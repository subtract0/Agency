{
  "timestamp": "2025-09-25T11:36:00.035361+00:00",
  "total_files_analyzed": 113,
  "total_lines_analyzed": 25876,
  "opportunities_found": [
    {
      "id": "notest_agency_code_agent",
      "type": "testing",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/agency_code_agent/agency_code_agent.py",
      "line_range": null,
      "description": "No test file found for agency_code_agent.py (1 functions)",
      "suggested_fix": "Create tests/test_agency_code_agent.py with comprehensive test coverage",
      "impact_score": 0.8,
      "confidence": 1.0,
      "metadata": {
        "functions": 1
      }
    },
    {
      "id": "nodoc_agency_code_agent_43",
      "type": "documentation",
      "severity": "low",
      "file_path": "/Users/am/Code/Agency/agency_code_agent/agency_code_agent.py",
      "line_range": [
        43,
        44
      ],
      "description": "Missing docstring for function 'create_agency_code_agent'",
      "suggested_fix": "Add comprehensive docstring explaining purpose, parameters, and return value",
      "impact_score": 0.4,
      "confidence": 1.0,
      "metadata": {
        "item": "create_agency_code_agent",
        "type": "function"
      }
    },
    {
      "id": "notest_compatibility",
      "type": "testing",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/auditor_agent/compatibility.py",
      "line_range": null,
      "description": "No test file found for compatibility.py (1 functions)",
      "suggested_fix": "Create tests/test_compatibility.py with comprehensive test coverage",
      "impact_score": 0.8,
      "confidence": 1.0,
      "metadata": {
        "functions": 1
      }
    },
    {
      "id": "const_dict_compatibility_11",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/auditor_agent/compatibility.py",
      "line_range": [
        11,
        12
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 11
      }
    },
    {
      "id": "long_auditor_agent_75",
      "type": "readability",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/auditor_agent/auditor_agent.py",
      "line_range": [
        75,
        156
      ],
      "description": "Function '_analyze_necessary_compliance' is 81 lines (limit: 50)",
      "suggested_fix": "Break down into smaller, focused functions",
      "impact_score": 0.7,
      "confidence": 1.0,
      "metadata": {
        "function": "_analyze_necessary_compliance",
        "length": 81
      }
    },
    {
      "id": "nodoc_auditor_agent_275",
      "type": "documentation",
      "severity": "low",
      "file_path": "/Users/am/Code/Agency/auditor_agent/auditor_agent.py",
      "line_range": [
        275,
        276
      ],
      "description": "Missing docstring for function 'create_auditor_agent'",
      "suggested_fix": "Add comprehensive docstring explaining purpose, parameters, and return value",
      "impact_score": 0.4,
      "confidence": 1.0,
      "metadata": {
        "item": "create_auditor_agent",
        "type": "function"
      }
    },
    {
      "id": "complex_auditor_agent_75",
      "type": "complexity",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/auditor_agent/auditor_agent.py",
      "line_range": [
        75,
        156
      ],
      "description": "High complexity in '_analyze_necessary_compliance' (score: 19)",
      "suggested_fix": "Refactor to reduce cyclomatic complexity",
      "impact_score": 0.7,
      "confidence": 0.8,
      "metadata": {
        "function": "_analyze_necessary_compliance",
        "complexity": 19
      }
    },
    {
      "id": "complex_auditor_agent_187",
      "type": "complexity",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/auditor_agent/auditor_agent.py",
      "line_range": [
        187,
        211
      ],
      "description": "High complexity in '_generate_recommendations' (score: 11)",
      "suggested_fix": "Refactor to reduce cyclomatic complexity",
      "impact_score": 0.7,
      "confidence": 0.8,
      "metadata": {
        "function": "_generate_recommendations",
        "complexity": 11
      }
    },
    {
      "id": "notest_ast_analyzer",
      "type": "testing",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/auditor_agent/ast_analyzer.py",
      "line_range": null,
      "description": "No test file found for ast_analyzer.py (13 functions)",
      "suggested_fix": "Create tests/test_ast_analyzer.py with comprehensive test coverage",
      "impact_score": 0.8,
      "confidence": 1.0,
      "metadata": {
        "functions": 13
      }
    },
    {
      "id": "err_nolog_ast_analyzer_50",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/auditor_agent/ast_analyzer.py",
      "line_range": [
        50,
        55
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 50
      }
    },
    {
      "id": "long_test_generator_agent_79",
      "type": "readability",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/test_generator_agent/test_generator_agent.py",
      "line_range": [
        79,
        140
      ],
      "description": "Function '_analyze_source_file' is 61 lines (limit: 50)",
      "suggested_fix": "Break down into smaller, focused functions",
      "impact_score": 0.7,
      "confidence": 1.0,
      "metadata": {
        "function": "_analyze_source_file",
        "length": 61
      }
    },
    {
      "id": "nodoc_test_generator_agent_499",
      "type": "documentation",
      "severity": "low",
      "file_path": "/Users/am/Code/Agency/test_generator_agent/test_generator_agent.py",
      "line_range": [
        499,
        500
      ],
      "description": "Missing docstring for function 'create_test_generator_agent'",
      "suggested_fix": "Add comprehensive docstring explaining purpose, parameters, and return value",
      "impact_score": 0.4,
      "confidence": 1.0,
      "metadata": {
        "item": "create_test_generator_agent",
        "type": "function"
      }
    },
    {
      "id": "complex_test_generator_agent_79",
      "type": "complexity",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/test_generator_agent/test_generator_agent.py",
      "line_range": [
        79,
        140
      ],
      "description": "High complexity in '_analyze_source_file' (score: 16)",
      "suggested_fix": "Refactor to reduce cyclomatic complexity",
      "impact_score": 0.7,
      "confidence": 0.8,
      "metadata": {
        "function": "_analyze_source_file",
        "complexity": 16
      }
    },
    {
      "id": "complex_test_generator_agent_439",
      "type": "complexity",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/test_generator_agent/test_generator_agent.py",
      "line_range": [
        439,
        462
      ],
      "description": "High complexity in '_generate_mock_args' (score: 11)",
      "suggested_fix": "Refactor to reduce cyclomatic complexity",
      "impact_score": 0.7,
      "confidence": 0.8,
      "metadata": {
        "function": "_generate_mock_args",
        "complexity": 11
      }
    },
    {
      "id": "arch_god_test_generator_agent_GenerateTests",
      "type": "architecture",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/test_generator_agent/test_generator_agent.py",
      "line_range": null,
      "description": "God class 'GenerateTests' has 29 methods",
      "suggested_fix": "Consider splitting into smaller, focused classes",
      "impact_score": 0.8,
      "confidence": 0.9,
      "metadata": {
        "class": "GenerateTests",
        "methods": 29
      }
    },
    {
      "id": "err_nolog_test_generator_agent_135",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/test_generator_agent/test_generator_agent.py",
      "line_range": [
        135,
        140
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 135
      }
    },
    {
      "id": "notest_learning_agent",
      "type": "testing",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/learning_agent/learning_agent.py",
      "line_range": null,
      "description": "No test file found for learning_agent.py (1 functions)",
      "suggested_fix": "Create tests/test_learning_agent.py with comprehensive test coverage",
      "impact_score": 0.8,
      "confidence": 1.0,
      "metadata": {
        "functions": 1
      }
    },
    {
      "id": "long_telemetry_pattern_analyzer_45",
      "type": "readability",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/learning_agent/tools/telemetry_pattern_analyzer.py",
      "line_range": [
        45,
        98
      ],
      "description": "Function 'run' is 53 lines (limit: 50)",
      "suggested_fix": "Break down into smaller, focused functions",
      "impact_score": 0.7,
      "confidence": 1.0,
      "metadata": {
        "function": "run",
        "length": 53
      }
    },
    {
      "id": "long_telemetry_pattern_analyzer_183",
      "type": "readability",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/learning_agent/tools/telemetry_pattern_analyzer.py",
      "line_range": [
        183,
        238
      ],
      "description": "Function '_extract_performance_patterns' is 55 lines (limit: 50)",
      "suggested_fix": "Break down into smaller, focused functions",
      "impact_score": 0.7,
      "confidence": 1.0,
      "metadata": {
        "function": "_extract_performance_patterns",
        "length": 55
      }
    },
    {
      "id": "notest_telemetry_pattern_analyzer",
      "type": "testing",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/learning_agent/tools/telemetry_pattern_analyzer.py",
      "line_range": null,
      "description": "No test file found for telemetry_pattern_analyzer.py (1 functions)",
      "suggested_fix": "Create tests/test_telemetry_pattern_analyzer.py with comprehensive test coverage",
      "impact_score": 0.8,
      "confidence": 1.0,
      "metadata": {
        "functions": 1
      }
    },
    {
      "id": "nodoc_telemetry_pattern_analyzer_45",
      "type": "documentation",
      "severity": "low",
      "file_path": "/Users/am/Code/Agency/learning_agent/tools/telemetry_pattern_analyzer.py",
      "line_range": [
        45,
        46
      ],
      "description": "Missing docstring for function 'run'",
      "suggested_fix": "Add comprehensive docstring explaining purpose, parameters, and return value",
      "impact_score": 0.4,
      "confidence": 1.0,
      "metadata": {
        "item": "run",
        "type": "function"
      }
    },
    {
      "id": "complex_telemetry_pattern_analyzer_136",
      "type": "complexity",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/learning_agent/tools/telemetry_pattern_analyzer.py",
      "line_range": [
        136,
        164
      ],
      "description": "High complexity in '_parse_telemetry_file' (score: 12)",
      "suggested_fix": "Refactor to reduce cyclomatic complexity",
      "impact_score": 0.7,
      "confidence": 0.8,
      "metadata": {
        "function": "_parse_telemetry_file",
        "complexity": 12
      }
    },
    {
      "id": "complex_telemetry_pattern_analyzer_183",
      "type": "complexity",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/learning_agent/tools/telemetry_pattern_analyzer.py",
      "line_range": [
        183,
        238
      ],
      "description": "High complexity in '_extract_performance_patterns' (score: 15)",
      "suggested_fix": "Refactor to reduce cyclomatic complexity",
      "impact_score": 0.7,
      "confidence": 0.8,
      "metadata": {
        "function": "_extract_performance_patterns",
        "complexity": 15
      }
    },
    {
      "id": "complex_telemetry_pattern_analyzer_352",
      "type": "complexity",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/learning_agent/tools/telemetry_pattern_analyzer.py",
      "line_range": [
        352,
        386
      ],
      "description": "High complexity in '_analyze_time_pattern' (score: 11)",
      "suggested_fix": "Refactor to reduce cyclomatic complexity",
      "impact_score": 0.7,
      "confidence": 0.8,
      "metadata": {
        "function": "_analyze_time_pattern",
        "complexity": 11
      }
    },
    {
      "id": "complex_telemetry_pattern_analyzer_437",
      "type": "complexity",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/learning_agent/tools/telemetry_pattern_analyzer.py",
      "line_range": [
        437,
        475
      ],
      "description": "High complexity in '_generate_insights' (score: 12)",
      "suggested_fix": "Refactor to reduce cyclomatic complexity",
      "impact_score": 0.7,
      "confidence": 0.8,
      "metadata": {
        "function": "_generate_insights",
        "complexity": 12
      }
    },
    {
      "id": "err_bare_telemetry_pattern_analyzer_365",
      "type": "error_handling",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/learning_agent/tools/telemetry_pattern_analyzer.py",
      "line_range": [
        365,
        366
      ],
      "description": "Bare except clause catches all exceptions",
      "suggested_fix": "Specify exception types to catch",
      "impact_score": 0.8,
      "confidence": 1.0,
      "metadata": {
        "line": 365
      }
    },
    {
      "id": "const_dict_telemetry_pattern_analyzer_352",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/learning_agent/tools/telemetry_pattern_analyzer.py",
      "line_range": [
        352,
        353
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 352
      }
    },
    {
      "id": "const_dict_telemetry_pattern_analyzer_508",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/learning_agent/tools/telemetry_pattern_analyzer.py",
      "line_range": [
        508,
        509
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 508
      }
    },
    {
      "id": "notest_analyze_session",
      "type": "testing",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/learning_agent/tools/analyze_session.py",
      "line_range": null,
      "description": "No test file found for analyze_session.py (1 functions)",
      "suggested_fix": "Create tests/test_analyze_session.py with comprehensive test coverage",
      "impact_score": 0.8,
      "confidence": 1.0,
      "metadata": {
        "functions": 1
      }
    },
    {
      "id": "nodoc_analyze_session_33",
      "type": "documentation",
      "severity": "low",
      "file_path": "/Users/am/Code/Agency/learning_agent/tools/analyze_session.py",
      "line_range": [
        33,
        34
      ],
      "description": "Missing docstring for function 'run'",
      "suggested_fix": "Add comprehensive docstring explaining purpose, parameters, and return value",
      "impact_score": 0.4,
      "confidence": 1.0,
      "metadata": {
        "item": "run",
        "type": "function"
      }
    },
    {
      "id": "err_nolog_analyze_session_77",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/learning_agent/tools/analyze_session.py",
      "line_range": [
        77,
        82
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 77
      }
    },
    {
      "id": "const_dict_analyze_session_80",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/learning_agent/tools/analyze_session.py",
      "line_range": [
        80,
        81
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 80
      }
    },
    {
      "id": "const_dict_analyze_session_118",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/learning_agent/tools/analyze_session.py",
      "line_range": [
        118,
        119
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 118
      }
    },
    {
      "id": "const_dict_analyze_session_157",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/learning_agent/tools/analyze_session.py",
      "line_range": [
        157,
        158
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 157
      }
    },
    {
      "id": "const_dict_analyze_session_191",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/learning_agent/tools/analyze_session.py",
      "line_range": [
        191,
        192
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 191
      }
    },
    {
      "id": "const_dict_analyze_session_210",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/learning_agent/tools/analyze_session.py",
      "line_range": [
        210,
        211
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 210
      }
    },
    {
      "id": "const_dict_analyze_session_235",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/learning_agent/tools/analyze_session.py",
      "line_range": [
        235,
        236
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 235
      }
    },
    {
      "id": "notest_store_knowledge",
      "type": "testing",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/learning_agent/tools/store_knowledge.py",
      "line_range": null,
      "description": "No test file found for store_knowledge.py (1 functions)",
      "suggested_fix": "Create tests/test_store_knowledge.py with comprehensive test coverage",
      "impact_score": 0.8,
      "confidence": 1.0,
      "metadata": {
        "functions": 1
      }
    },
    {
      "id": "nodoc_store_knowledge_32",
      "type": "documentation",
      "severity": "low",
      "file_path": "/Users/am/Code/Agency/learning_agent/tools/store_knowledge.py",
      "line_range": [
        32,
        33
      ],
      "description": "Missing docstring for function 'run'",
      "suggested_fix": "Add comprehensive docstring explaining purpose, parameters, and return value",
      "impact_score": 0.4,
      "confidence": 1.0,
      "metadata": {
        "item": "run",
        "type": "function"
      }
    },
    {
      "id": "complex_store_knowledge_127",
      "type": "complexity",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/learning_agent/tools/store_knowledge.py",
      "line_range": [
        127,
        175
      ],
      "description": "High complexity in '_update_existing_learning' (score: 11)",
      "suggested_fix": "Refactor to reduce cyclomatic complexity",
      "impact_score": 0.7,
      "confidence": 0.8,
      "metadata": {
        "function": "_update_existing_learning",
        "complexity": 11
      }
    },
    {
      "id": "complex_store_knowledge_216",
      "type": "complexity",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/learning_agent/tools/store_knowledge.py",
      "line_range": [
        216,
        265
      ],
      "description": "High complexity in '_create_embedding_text' (score: 15)",
      "suggested_fix": "Refactor to reduce cyclomatic complexity",
      "impact_score": 0.7,
      "confidence": 0.8,
      "metadata": {
        "function": "_create_embedding_text",
        "complexity": 15
      }
    },
    {
      "id": "err_nolog_store_knowledge_48",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/learning_agent/tools/store_knowledge.py",
      "line_range": [
        48,
        53
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 48
      }
    },
    {
      "id": "err_nolog_store_knowledge_89",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/learning_agent/tools/store_knowledge.py",
      "line_range": [
        89,
        94
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 89
      }
    },
    {
      "id": "err_nolog_store_knowledge_124",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/learning_agent/tools/store_knowledge.py",
      "line_range": [
        124,
        129
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 124
      }
    },
    {
      "id": "err_nolog_store_knowledge_172",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/learning_agent/tools/store_knowledge.py",
      "line_range": [
        172,
        177
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 172
      }
    },
    {
      "id": "err_nolog_store_knowledge_303",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/learning_agent/tools/store_knowledge.py",
      "line_range": [
        303,
        308
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 303
      }
    },
    {
      "id": "const_dict_store_knowledge_51",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/learning_agent/tools/store_knowledge.py",
      "line_range": [
        51,
        52
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 51
      }
    },
    {
      "id": "const_dict_store_knowledge_92",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/learning_agent/tools/store_knowledge.py",
      "line_range": [
        92,
        93
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 92
      }
    },
    {
      "id": "const_dict_store_knowledge_127",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/learning_agent/tools/store_knowledge.py",
      "line_range": [
        127,
        128
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 127
      }
    },
    {
      "id": "const_dict_store_knowledge_175",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/learning_agent/tools/store_knowledge.py",
      "line_range": [
        175,
        176
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 175
      }
    },
    {
      "id": "const_dict_store_knowledge_216",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/learning_agent/tools/store_knowledge.py",
      "line_range": [
        216,
        217
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 216
      }
    },
    {
      "id": "const_dict_store_knowledge_265",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/learning_agent/tools/store_knowledge.py",
      "line_range": [
        265,
        266
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 265
      }
    },
    {
      "id": "long_self_healing_pattern_extractor_50",
      "type": "readability",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/learning_agent/tools/self_healing_pattern_extractor.py",
      "line_range": [
        50,
        103
      ],
      "description": "Function 'run' is 53 lines (limit: 50)",
      "suggested_fix": "Break down into smaller, focused functions",
      "impact_score": 0.7,
      "confidence": 1.0,
      "metadata": {
        "function": "run",
        "length": 53
      }
    },
    {
      "id": "long_self_healing_pattern_extractor_250",
      "type": "readability",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/learning_agent/tools/self_healing_pattern_extractor.py",
      "line_range": [
        250,
        302
      ],
      "description": "Function '_parse_structured_log_line' is 52 lines (limit: 50)",
      "suggested_fix": "Break down into smaller, focused functions",
      "impact_score": 0.7,
      "confidence": 1.0,
      "metadata": {
        "function": "_parse_structured_log_line",
        "length": 52
      }
    },
    {
      "id": "long_self_healing_pattern_extractor_515",
      "type": "readability",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/learning_agent/tools/self_healing_pattern_extractor.py",
      "line_range": [
        515,
        568
      ],
      "description": "Function '_extract_sequence_patterns' is 53 lines (limit: 50)",
      "suggested_fix": "Break down into smaller, focused functions",
      "impact_score": 0.7,
      "confidence": 1.0,
      "metadata": {
        "function": "_extract_sequence_patterns",
        "length": 53
      }
    },
    {
      "id": "long_self_healing_pattern_extractor_591",
      "type": "readability",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/learning_agent/tools/self_healing_pattern_extractor.py",
      "line_range": [
        591,
        660
      ],
      "description": "Function '_generate_actionable_insights' is 69 lines (limit: 50)",
      "suggested_fix": "Break down into smaller, focused functions",
      "impact_score": 0.7,
      "confidence": 1.0,
      "metadata": {
        "function": "_generate_actionable_insights",
        "length": 69
      }
    },
    {
      "id": "notest_self_healing_pattern_extractor",
      "type": "testing",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/learning_agent/tools/self_healing_pattern_extractor.py",
      "line_range": null,
      "description": "No test file found for self_healing_pattern_extractor.py (1 functions)",
      "suggested_fix": "Create tests/test_self_healing_pattern_extractor.py with comprehensive test coverage",
      "impact_score": 0.8,
      "confidence": 1.0,
      "metadata": {
        "functions": 1
      }
    },
    {
      "id": "nodoc_self_healing_pattern_extractor_50",
      "type": "documentation",
      "severity": "low",
      "file_path": "/Users/am/Code/Agency/learning_agent/tools/self_healing_pattern_extractor.py",
      "line_range": [
        50,
        51
      ],
      "description": "Missing docstring for function 'run'",
      "suggested_fix": "Add comprehensive docstring explaining purpose, parameters, and return value",
      "impact_score": 0.4,
      "confidence": 1.0,
      "metadata": {
        "item": "run",
        "type": "function"
      }
    },
    {
      "id": "complex_self_healing_pattern_extractor_173",
      "type": "complexity",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/learning_agent/tools/self_healing_pattern_extractor.py",
      "line_range": [
        173,
        200
      ],
      "description": "High complexity in '_collect_from_telemetry' (score: 12)",
      "suggested_fix": "Refactor to reduce cyclomatic complexity",
      "impact_score": 0.7,
      "confidence": 0.8,
      "metadata": {
        "function": "_collect_from_telemetry",
        "complexity": 12
      }
    },
    {
      "id": "complex_self_healing_pattern_extractor_224",
      "type": "complexity",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/learning_agent/tools/self_healing_pattern_extractor.py",
      "line_range": [
        224,
        250
      ],
      "description": "High complexity in '_parse_log_file' (score: 12)",
      "suggested_fix": "Refactor to reduce cyclomatic complexity",
      "impact_score": 0.7,
      "confidence": 0.8,
      "metadata": {
        "function": "_parse_log_file",
        "complexity": 12
      }
    },
    {
      "id": "complex_self_healing_pattern_extractor_250",
      "type": "complexity",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/learning_agent/tools/self_healing_pattern_extractor.py",
      "line_range": [
        250,
        302
      ],
      "description": "High complexity in '_parse_structured_log_line' (score: 19)",
      "suggested_fix": "Refactor to reduce cyclomatic complexity",
      "impact_score": 0.7,
      "confidence": 0.8,
      "metadata": {
        "function": "_parse_structured_log_line",
        "complexity": 19
      }
    },
    {
      "id": "complex_self_healing_pattern_extractor_424",
      "type": "complexity",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/learning_agent/tools/self_healing_pattern_extractor.py",
      "line_range": [
        424,
        468
      ],
      "description": "High complexity in '_extract_context_patterns' (score: 11)",
      "suggested_fix": "Refactor to reduce cyclomatic complexity",
      "impact_score": 0.7,
      "confidence": 0.8,
      "metadata": {
        "function": "_extract_context_patterns",
        "complexity": 11
      }
    },
    {
      "id": "complex_self_healing_pattern_extractor_468",
      "type": "complexity",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/learning_agent/tools/self_healing_pattern_extractor.py",
      "line_range": [
        468,
        515
      ],
      "description": "High complexity in '_extract_timing_patterns' (score: 11)",
      "suggested_fix": "Refactor to reduce cyclomatic complexity",
      "impact_score": 0.7,
      "confidence": 0.8,
      "metadata": {
        "function": "_extract_timing_patterns",
        "complexity": 11
      }
    },
    {
      "id": "complex_self_healing_pattern_extractor_515",
      "type": "complexity",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/learning_agent/tools/self_healing_pattern_extractor.py",
      "line_range": [
        515,
        568
      ],
      "description": "High complexity in '_extract_sequence_patterns' (score: 12)",
      "suggested_fix": "Refactor to reduce cyclomatic complexity",
      "impact_score": 0.7,
      "confidence": 0.8,
      "metadata": {
        "function": "_extract_sequence_patterns",
        "complexity": 12
      }
    },
    {
      "id": "complex_self_healing_pattern_extractor_591",
      "type": "complexity",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/learning_agent/tools/self_healing_pattern_extractor.py",
      "line_range": [
        591,
        660
      ],
      "description": "High complexity in '_generate_actionable_insights' (score: 21)",
      "suggested_fix": "Refactor to reduce cyclomatic complexity",
      "impact_score": 0.7,
      "confidence": 0.8,
      "metadata": {
        "function": "_generate_actionable_insights",
        "complexity": 21
      }
    },
    {
      "id": "perf_self_healing_pattern_extractor_526",
      "type": "performance",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/learning_agent/tools/self_healing_pattern_extractor.py",
      "line_range": [
        526,
        527
      ],
      "description": "Performance issue: in range(len(",
      "suggested_fix": "Use enumerate() instead of range(len())",
      "impact_score": 0.6,
      "confidence": 0.7,
      "metadata": {
        "pattern": "in range(len(",
        "line": 526
      }
    },
    {
      "id": "arch_god_self_healing_pattern_extractor_SelfHealingPatternExtractor",
      "type": "architecture",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/learning_agent/tools/self_healing_pattern_extractor.py",
      "line_range": null,
      "description": "God class 'SelfHealingPatternExtractor' has 25 methods",
      "suggested_fix": "Consider splitting into smaller, focused classes",
      "impact_score": 0.8,
      "confidence": 0.9,
      "metadata": {
        "class": "SelfHealingPatternExtractor",
        "methods": 25
      }
    },
    {
      "id": "err_bare_self_healing_pattern_extractor_239",
      "type": "error_handling",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/learning_agent/tools/self_healing_pattern_extractor.py",
      "line_range": [
        239,
        240
      ],
      "description": "Bare except clause catches all exceptions",
      "suggested_fix": "Specify exception types to catch",
      "impact_score": 0.8,
      "confidence": 1.0,
      "metadata": {
        "line": 239
      }
    },
    {
      "id": "err_bare_self_healing_pattern_extractor_264",
      "type": "error_handling",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/learning_agent/tools/self_healing_pattern_extractor.py",
      "line_range": [
        264,
        265
      ],
      "description": "Bare except clause catches all exceptions",
      "suggested_fix": "Specify exception types to catch",
      "impact_score": 0.8,
      "confidence": 1.0,
      "metadata": {
        "line": 264
      }
    },
    {
      "id": "err_nolog_self_healing_pattern_extractor_299",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/learning_agent/tools/self_healing_pattern_extractor.py",
      "line_range": [
        299,
        304
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 299
      }
    },
    {
      "id": "err_bare_self_healing_pattern_extractor_337",
      "type": "error_handling",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/learning_agent/tools/self_healing_pattern_extractor.py",
      "line_range": [
        337,
        338
      ],
      "description": "Bare except clause catches all exceptions",
      "suggested_fix": "Specify exception types to catch",
      "impact_score": 0.8,
      "confidence": 1.0,
      "metadata": {
        "line": 337
      }
    },
    {
      "id": "err_bare_self_healing_pattern_extractor_493",
      "type": "error_handling",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/learning_agent/tools/self_healing_pattern_extractor.py",
      "line_range": [
        493,
        494
      ],
      "description": "Bare except clause catches all exceptions",
      "suggested_fix": "Specify exception types to catch",
      "impact_score": 0.8,
      "confidence": 1.0,
      "metadata": {
        "line": 493
      }
    },
    {
      "id": "err_bare_self_healing_pattern_extractor_542",
      "type": "error_handling",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/learning_agent/tools/self_healing_pattern_extractor.py",
      "line_range": [
        542,
        543
      ],
      "description": "Bare except clause catches all exceptions",
      "suggested_fix": "Specify exception types to catch",
      "impact_score": 0.8,
      "confidence": 1.0,
      "metadata": {
        "line": 542
      }
    },
    {
      "id": "const_dict_self_healing_pattern_extractor_114",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/learning_agent/tools/self_healing_pattern_extractor.py",
      "line_range": [
        114,
        115
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 114
      }
    },
    {
      "id": "const_dict_self_healing_pattern_extractor_328",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/learning_agent/tools/self_healing_pattern_extractor.py",
      "line_range": [
        328,
        329
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 328
      }
    },
    {
      "id": "const_dict_self_healing_pattern_extractor_346",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/learning_agent/tools/self_healing_pattern_extractor.py",
      "line_range": [
        346,
        347
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 346
      }
    },
    {
      "id": "const_dict_self_healing_pattern_extractor_358",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/learning_agent/tools/self_healing_pattern_extractor.py",
      "line_range": [
        358,
        359
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 358
      }
    },
    {
      "id": "const_dict_self_healing_pattern_extractor_568",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/learning_agent/tools/self_healing_pattern_extractor.py",
      "line_range": [
        568,
        569
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 568
      }
    },
    {
      "id": "const_dict_self_healing_pattern_extractor_705",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/learning_agent/tools/self_healing_pattern_extractor.py",
      "line_range": [
        705,
        706
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 705
      }
    },
    {
      "id": "const_dict_self_healing_pattern_extractor_720",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/learning_agent/tools/self_healing_pattern_extractor.py",
      "line_range": [
        720,
        721
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 720
      }
    },
    {
      "id": "const_dict_self_healing_pattern_extractor_731",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/learning_agent/tools/self_healing_pattern_extractor.py",
      "line_range": [
        731,
        732
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 731
      }
    },
    {
      "id": "const_dict_self_healing_pattern_extractor_740",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/learning_agent/tools/self_healing_pattern_extractor.py",
      "line_range": [
        740,
        741
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 740
      }
    },
    {
      "id": "const_dict_self_healing_pattern_extractor_749",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/learning_agent/tools/self_healing_pattern_extractor.py",
      "line_range": [
        749,
        750
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 749
      }
    },
    {
      "id": "long_cross_session_learner_52",
      "type": "readability",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/learning_agent/tools/cross_session_learner.py",
      "line_range": [
        52,
        106
      ],
      "description": "Function 'run' is 54 lines (limit: 50)",
      "suggested_fix": "Break down into smaller, focused functions",
      "impact_score": 0.7,
      "confidence": 1.0,
      "metadata": {
        "function": "run",
        "length": 54
      }
    },
    {
      "id": "long_cross_session_learner_358",
      "type": "readability",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/learning_agent/tools/cross_session_learner.py",
      "line_range": [
        358,
        409
      ],
      "description": "Function '_calculate_relevance_score' is 51 lines (limit: 50)",
      "suggested_fix": "Break down into smaller, focused functions",
      "impact_score": 0.7,
      "confidence": 1.0,
      "metadata": {
        "function": "_calculate_relevance_score",
        "length": 51
      }
    },
    {
      "id": "notest_cross_session_learner",
      "type": "testing",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/learning_agent/tools/cross_session_learner.py",
      "line_range": null,
      "description": "No test file found for cross_session_learner.py (2 functions)",
      "suggested_fix": "Create tests/test_cross_session_learner.py with comprehensive test coverage",
      "impact_score": 0.8,
      "confidence": 1.0,
      "metadata": {
        "functions": 2
      }
    },
    {
      "id": "nodoc_cross_session_learner_52",
      "type": "documentation",
      "severity": "low",
      "file_path": "/Users/am/Code/Agency/learning_agent/tools/cross_session_learner.py",
      "line_range": [
        52,
        53
      ],
      "description": "Missing docstring for function 'run'",
      "suggested_fix": "Add comprehensive docstring explaining purpose, parameters, and return value",
      "impact_score": 0.4,
      "confidence": 1.0,
      "metadata": {
        "item": "run",
        "type": "function"
      }
    },
    {
      "id": "nodoc_cross_session_learner_312",
      "type": "documentation",
      "severity": "low",
      "file_path": "/Users/am/Code/Agency/learning_agent/tools/cross_session_learner.py",
      "line_range": [
        312,
        313
      ],
      "description": "Missing docstring for function 'extract_text_recursive'",
      "suggested_fix": "Add comprehensive docstring explaining purpose, parameters, and return value",
      "impact_score": 0.4,
      "confidence": 1.0,
      "metadata": {
        "item": "extract_text_recursive",
        "type": "function"
      }
    },
    {
      "id": "complex_cross_session_learner_139",
      "type": "complexity",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/learning_agent/tools/cross_session_learner.py",
      "line_range": [
        139,
        173
      ],
      "description": "High complexity in '_load_from_vector_store' (score: 12)",
      "suggested_fix": "Refactor to reduce cyclomatic complexity",
      "impact_score": 0.7,
      "confidence": 0.8,
      "metadata": {
        "function": "_load_from_vector_store",
        "complexity": 12
      }
    },
    {
      "id": "complex_cross_session_learner_199",
      "type": "complexity",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/learning_agent/tools/cross_session_learner.py",
      "line_range": [
        199,
        226
      ],
      "description": "High complexity in '_load_from_learning_storage' (score: 11)",
      "suggested_fix": "Refactor to reduce cyclomatic complexity",
      "impact_score": 0.7,
      "confidence": 0.8,
      "metadata": {
        "function": "_load_from_learning_storage",
        "complexity": 11
      }
    },
    {
      "id": "complex_cross_session_learner_312",
      "type": "complexity",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/learning_agent/tools/cross_session_learner.py",
      "line_range": [
        312,
        358
      ],
      "description": "High complexity in 'extract_text_recursive' (score: 16)",
      "suggested_fix": "Refactor to reduce cyclomatic complexity",
      "impact_score": 0.7,
      "confidence": 0.8,
      "metadata": {
        "function": "extract_text_recursive",
        "complexity": 16
      }
    },
    {
      "id": "complex_cross_session_learner_460",
      "type": "complexity",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/learning_agent/tools/cross_session_learner.py",
      "line_range": [
        460,
        493
      ],
      "description": "High complexity in '_generate_recommendations' (score: 11)",
      "suggested_fix": "Refactor to reduce cyclomatic complexity",
      "impact_score": 0.7,
      "confidence": 0.8,
      "metadata": {
        "function": "_generate_recommendations",
        "complexity": 11
      }
    },
    {
      "id": "complex_cross_session_learner_560",
      "type": "complexity",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/learning_agent/tools/cross_session_learner.py",
      "line_range": [
        560,
        599
      ],
      "description": "High complexity in '_extract_common_insights' (score: 14)",
      "suggested_fix": "Refactor to reduce cyclomatic complexity",
      "impact_score": 0.7,
      "confidence": 0.8,
      "metadata": {
        "function": "_extract_common_insights",
        "complexity": 14
      }
    },
    {
      "id": "arch_god_cross_session_learner_CrossSessionLearner",
      "type": "architecture",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/learning_agent/tools/cross_session_learner.py",
      "line_range": null,
      "description": "God class 'CrossSessionLearner' has 26 methods",
      "suggested_fix": "Consider splitting into smaller, focused classes",
      "impact_score": 0.8,
      "confidence": 0.9,
      "metadata": {
        "class": "CrossSessionLearner",
        "methods": 26
      }
    },
    {
      "id": "err_nolog_cross_session_learner_707",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/learning_agent/tools/cross_session_learner.py",
      "line_range": [
        707,
        712
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 707
      }
    },
    {
      "id": "const_dict_cross_session_learner_106",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/learning_agent/tools/cross_session_learner.py",
      "line_range": [
        106,
        107
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 106
      }
    },
    {
      "id": "const_dict_cross_session_learner_263",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/learning_agent/tools/cross_session_learner.py",
      "line_range": [
        263,
        264
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 263
      }
    },
    {
      "id": "const_dict_cross_session_learner_268",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/learning_agent/tools/cross_session_learner.py",
      "line_range": [
        268,
        269
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 268
      }
    },
    {
      "id": "const_dict_cross_session_learner_296",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/learning_agent/tools/cross_session_learner.py",
      "line_range": [
        296,
        297
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 296
      }
    },
    {
      "id": "const_dict_cross_session_learner_358",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/learning_agent/tools/cross_session_learner.py",
      "line_range": [
        358,
        359
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 358
      }
    },
    {
      "id": "const_dict_cross_session_learner_409",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/learning_agent/tools/cross_session_learner.py",
      "line_range": [
        409,
        410
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 409
      }
    },
    {
      "id": "const_dict_cross_session_learner_422",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/learning_agent/tools/cross_session_learner.py",
      "line_range": [
        422,
        423
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 422
      }
    },
    {
      "id": "const_dict_cross_session_learner_435",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/learning_agent/tools/cross_session_learner.py",
      "line_range": [
        435,
        436
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 435
      }
    },
    {
      "id": "const_dict_cross_session_learner_460",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/learning_agent/tools/cross_session_learner.py",
      "line_range": [
        460,
        461
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 460
      }
    },
    {
      "id": "const_dict_cross_session_learner_494",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/learning_agent/tools/cross_session_learner.py",
      "line_range": [
        494,
        495
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 494
      }
    },
    {
      "id": "const_dict_cross_session_learner_526",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/learning_agent/tools/cross_session_learner.py",
      "line_range": [
        526,
        527
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 526
      }
    },
    {
      "id": "const_dict_cross_session_learner_527",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/learning_agent/tools/cross_session_learner.py",
      "line_range": [
        527,
        528
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 527
      }
    },
    {
      "id": "const_dict_cross_session_learner_599",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/learning_agent/tools/cross_session_learner.py",
      "line_range": [
        599,
        600
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 599
      }
    },
    {
      "id": "const_dict_cross_session_learner_642",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/learning_agent/tools/cross_session_learner.py",
      "line_range": [
        642,
        643
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 642
      }
    },
    {
      "id": "const_dict_cross_session_learner_676",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/learning_agent/tools/cross_session_learner.py",
      "line_range": [
        676,
        677
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 676
      }
    },
    {
      "id": "const_dict_cross_session_learner_692",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/learning_agent/tools/cross_session_learner.py",
      "line_range": [
        692,
        693
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 692
      }
    },
    {
      "id": "const_dict_cross_session_learner_710",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/learning_agent/tools/cross_session_learner.py",
      "line_range": [
        710,
        711
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 710
      }
    },
    {
      "id": "long_consolidate_learning_65",
      "type": "readability",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/learning_agent/tools/consolidate_learning.py",
      "line_range": [
        65,
        117
      ],
      "description": "Function '_create_learning_object' is 52 lines (limit: 50)",
      "suggested_fix": "Break down into smaller, focused functions",
      "impact_score": 0.7,
      "confidence": 1.0,
      "metadata": {
        "function": "_create_learning_object",
        "length": 52
      }
    },
    {
      "id": "notest_consolidate_learning",
      "type": "testing",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/learning_agent/tools/consolidate_learning.py",
      "line_range": null,
      "description": "No test file found for consolidate_learning.py (1 functions)",
      "suggested_fix": "Create tests/test_consolidate_learning.py with comprehensive test coverage",
      "impact_score": 0.8,
      "confidence": 1.0,
      "metadata": {
        "functions": 1
      }
    },
    {
      "id": "nodoc_consolidate_learning_34",
      "type": "documentation",
      "severity": "low",
      "file_path": "/Users/am/Code/Agency/learning_agent/tools/consolidate_learning.py",
      "line_range": [
        34,
        35
      ],
      "description": "Missing docstring for function 'run'",
      "suggested_fix": "Add comprehensive docstring explaining purpose, parameters, and return value",
      "impact_score": 0.4,
      "confidence": 1.0,
      "metadata": {
        "item": "run",
        "type": "function"
      }
    },
    {
      "id": "complex_consolidate_learning_117",
      "type": "complexity",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/learning_agent/tools/consolidate_learning.py",
      "line_range": [
        117,
        149
      ],
      "description": "High complexity in '_determine_learning_type' (score: 11)",
      "suggested_fix": "Refactor to reduce cyclomatic complexity",
      "impact_score": 0.7,
      "confidence": 0.8,
      "metadata": {
        "function": "_determine_learning_type",
        "complexity": 11
      }
    },
    {
      "id": "complex_consolidate_learning_149",
      "type": "complexity",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/learning_agent/tools/consolidate_learning.py",
      "line_range": [
        149,
        199
      ],
      "description": "High complexity in '_extract_patterns' (score: 13)",
      "suggested_fix": "Refactor to reduce cyclomatic complexity",
      "impact_score": 0.7,
      "confidence": 0.8,
      "metadata": {
        "function": "_extract_patterns",
        "complexity": 13
      }
    },
    {
      "id": "err_nolog_consolidate_learning_62",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/learning_agent/tools/consolidate_learning.py",
      "line_range": [
        62,
        67
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 62
      }
    },
    {
      "id": "err_nolog_consolidate_learning_105",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/learning_agent/tools/consolidate_learning.py",
      "line_range": [
        105,
        110
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 105
      }
    },
    {
      "id": "const_dict_consolidate_learning_65",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/learning_agent/tools/consolidate_learning.py",
      "line_range": [
        65,
        66
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 65
      }
    },
    {
      "id": "const_dict_consolidate_learning_117",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/learning_agent/tools/consolidate_learning.py",
      "line_range": [
        117,
        118
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 117
      }
    },
    {
      "id": "const_dict_consolidate_learning_149",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/learning_agent/tools/consolidate_learning.py",
      "line_range": [
        149,
        150
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 149
      }
    },
    {
      "id": "const_dict_consolidate_learning_199",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/learning_agent/tools/consolidate_learning.py",
      "line_range": [
        199,
        200
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 199
      }
    },
    {
      "id": "const_dict_consolidate_learning_246",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/learning_agent/tools/consolidate_learning.py",
      "line_range": [
        246,
        247
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 246
      }
    },
    {
      "id": "long_extract_insights_72",
      "type": "readability",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/learning_agent/tools/extract_insights.py",
      "line_range": [
        72,
        125
      ],
      "description": "Function '_extract_tool_insights' is 53 lines (limit: 50)",
      "suggested_fix": "Break down into smaller, focused functions",
      "impact_score": 0.7,
      "confidence": 1.0,
      "metadata": {
        "function": "_extract_tool_insights",
        "length": 53
      }
    },
    {
      "id": "long_extract_insights_125",
      "type": "readability",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/learning_agent/tools/extract_insights.py",
      "line_range": [
        125,
        177
      ],
      "description": "Function '_extract_error_insights' is 52 lines (limit: 50)",
      "suggested_fix": "Break down into smaller, focused functions",
      "impact_score": 0.7,
      "confidence": 1.0,
      "metadata": {
        "function": "_extract_error_insights",
        "length": 52
      }
    },
    {
      "id": "notest_extract_insights",
      "type": "testing",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/learning_agent/tools/extract_insights.py",
      "line_range": null,
      "description": "No test file found for extract_insights.py (1 functions)",
      "suggested_fix": "Create tests/test_extract_insights.py with comprehensive test coverage",
      "impact_score": 0.8,
      "confidence": 1.0,
      "metadata": {
        "functions": 1
      }
    },
    {
      "id": "nodoc_extract_insights_33",
      "type": "documentation",
      "severity": "low",
      "file_path": "/Users/am/Code/Agency/learning_agent/tools/extract_insights.py",
      "line_range": [
        33,
        34
      ],
      "description": "Missing docstring for function 'run'",
      "suggested_fix": "Add comprehensive docstring explaining purpose, parameters, and return value",
      "impact_score": 0.4,
      "confidence": 1.0,
      "metadata": {
        "item": "run",
        "type": "function"
      }
    },
    {
      "id": "err_nolog_extract_insights_69",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/learning_agent/tools/extract_insights.py",
      "line_range": [
        69,
        74
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 69
      }
    },
    {
      "id": "const_dict_extract_insights_72",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/learning_agent/tools/extract_insights.py",
      "line_range": [
        72,
        73
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 72
      }
    },
    {
      "id": "const_dict_extract_insights_125",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/learning_agent/tools/extract_insights.py",
      "line_range": [
        125,
        126
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 125
      }
    },
    {
      "id": "const_dict_extract_insights_177",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/learning_agent/tools/extract_insights.py",
      "line_range": [
        177,
        178
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 177
      }
    },
    {
      "id": "const_dict_extract_insights_222",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/learning_agent/tools/extract_insights.py",
      "line_range": [
        222,
        223
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 222
      }
    },
    {
      "id": "notest_quality_enforcer_agent",
      "type": "testing",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/quality_enforcer_agent/quality_enforcer_agent.py",
      "line_range": null,
      "description": "No test file found for quality_enforcer_agent.py (5 functions)",
      "suggested_fix": "Create tests/test_quality_enforcer_agent.py with comprehensive test coverage",
      "impact_score": 0.8,
      "confidence": 1.0,
      "metadata": {
        "functions": 5
      }
    },
    {
      "id": "nodoc_quality_enforcer_agent_153",
      "type": "documentation",
      "severity": "low",
      "file_path": "/Users/am/Code/Agency/quality_enforcer_agent/quality_enforcer_agent.py",
      "line_range": [
        153,
        154
      ],
      "description": "Missing docstring for function 'create_quality_enforcer_agent'",
      "suggested_fix": "Add comprehensive docstring explaining purpose, parameters, and return value",
      "impact_score": 0.4,
      "confidence": 1.0,
      "metadata": {
        "item": "create_quality_enforcer_agent",
        "type": "function"
      }
    },
    {
      "id": "err_nolog_quality_enforcer_agent_113",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/quality_enforcer_agent/quality_enforcer_agent.py",
      "line_range": [
        113,
        118
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 113
      }
    },
    {
      "id": "err_bare_quality_enforcer_agent_164",
      "type": "error_handling",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/quality_enforcer_agent/quality_enforcer_agent.py",
      "line_range": [
        164,
        165
      ],
      "description": "Bare except clause catches all exceptions",
      "suggested_fix": "Specify exception types to catch",
      "impact_score": 0.8,
      "confidence": 1.0,
      "metadata": {
        "line": 164
      }
    },
    {
      "id": "notest_merger_agent",
      "type": "testing",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/merger_agent/merger_agent.py",
      "line_range": null,
      "description": "No test file found for merger_agent.py (1 functions)",
      "suggested_fix": "Create tests/test_merger_agent.py with comprehensive test coverage",
      "impact_score": 0.8,
      "confidence": 1.0,
      "metadata": {
        "functions": 1
      }
    },
    {
      "id": "nodoc_merger_agent_28",
      "type": "documentation",
      "severity": "low",
      "file_path": "/Users/am/Code/Agency/merger_agent/merger_agent.py",
      "line_range": [
        28,
        29
      ],
      "description": "Missing docstring for function 'create_merger_agent'",
      "suggested_fix": "Add comprehensive docstring explaining purpose, parameters, and return value",
      "impact_score": 0.4,
      "confidence": 1.0,
      "metadata": {
        "item": "create_merger_agent",
        "type": "function"
      }
    },
    {
      "id": "notest_toolsmith_agent",
      "type": "testing",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/toolsmith_agent/toolsmith_agent.py",
      "line_range": null,
      "description": "No test file found for toolsmith_agent.py (1 functions)",
      "suggested_fix": "Create tests/test_toolsmith_agent.py with comprehensive test coverage",
      "impact_score": 0.8,
      "confidence": 1.0,
      "metadata": {
        "functions": 1
      }
    },
    {
      "id": "nodoc_toolsmith_agent_20",
      "type": "documentation",
      "severity": "low",
      "file_path": "/Users/am/Code/Agency/toolsmith_agent/toolsmith_agent.py",
      "line_range": [
        20,
        21
      ],
      "description": "Missing docstring for function 'create_toolsmith_agent'",
      "suggested_fix": "Add comprehensive docstring explaining purpose, parameters, and return value",
      "impact_score": 0.4,
      "confidence": 1.0,
      "metadata": {
        "item": "create_toolsmith_agent",
        "type": "function"
      }
    },
    {
      "id": "notest_chief_architect_agent",
      "type": "testing",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/chief_architect_agent/chief_architect_agent.py",
      "line_range": null,
      "description": "No test file found for chief_architect_agent.py (1 functions)",
      "suggested_fix": "Create tests/test_chief_architect_agent.py with comprehensive test coverage",
      "impact_score": 0.8,
      "confidence": 1.0,
      "metadata": {
        "functions": 1
      }
    },
    {
      "id": "nodoc_chief_architect_agent_15",
      "type": "documentation",
      "severity": "low",
      "file_path": "/Users/am/Code/Agency/chief_architect_agent/chief_architect_agent.py",
      "line_range": [
        15,
        16
      ],
      "description": "Missing docstring for function 'create_chief_architect_agent'",
      "suggested_fix": "Add comprehensive docstring explaining purpose, parameters, and return value",
      "impact_score": 0.4,
      "confidence": 1.0,
      "metadata": {
        "item": "create_chief_architect_agent",
        "type": "function"
      }
    },
    {
      "id": "notest_architecture_loop",
      "type": "testing",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/chief_architect_agent/tools/architecture_loop.py",
      "line_range": null,
      "description": "No test file found for architecture_loop.py (1 functions)",
      "suggested_fix": "Create tests/test_architecture_loop.py with comprehensive test coverage",
      "impact_score": 0.8,
      "confidence": 1.0,
      "metadata": {
        "functions": 1
      }
    },
    {
      "id": "nodoc_architecture_loop_12",
      "type": "documentation",
      "severity": "low",
      "file_path": "/Users/am/Code/Agency/chief_architect_agent/tools/architecture_loop.py",
      "line_range": [
        12,
        13
      ],
      "description": "Missing docstring for class 'RunArchitectureLoop'",
      "suggested_fix": "Add comprehensive docstring explaining purpose, parameters, and return value",
      "impact_score": 0.4,
      "confidence": 1.0,
      "metadata": {
        "item": "RunArchitectureLoop",
        "type": "class"
      }
    },
    {
      "id": "nodoc_architecture_loop_16",
      "type": "documentation",
      "severity": "low",
      "file_path": "/Users/am/Code/Agency/chief_architect_agent/tools/architecture_loop.py",
      "line_range": [
        16,
        17
      ],
      "description": "Missing docstring for function 'run'",
      "suggested_fix": "Add comprehensive docstring explaining purpose, parameters, and return value",
      "impact_score": 0.4,
      "confidence": 1.0,
      "metadata": {
        "item": "run",
        "type": "function"
      }
    },
    {
      "id": "err_nolog_architecture_loop_41",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/chief_architect_agent/tools/architecture_loop.py",
      "line_range": [
        41,
        46
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 41
      }
    },
    {
      "id": "err_nolog_architecture_loop_60",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/chief_architect_agent/tools/architecture_loop.py",
      "line_range": [
        60,
        65
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 60
      }
    },
    {
      "id": "err_nolog_architecture_loop_64",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/chief_architect_agent/tools/architecture_loop.py",
      "line_range": [
        64,
        69
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 64
      }
    },
    {
      "id": "const_dict_architecture_loop_17",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/chief_architect_agent/tools/architecture_loop.py",
      "line_range": [
        17,
        18
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 17
      }
    },
    {
      "id": "const_dict_architecture_loop_46",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/chief_architect_agent/tools/architecture_loop.py",
      "line_range": [
        46,
        47
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 46
      }
    },
    {
      "id": "const_valid_architecture_loop_46",
      "type": "constitutional",
      "severity": "critical",
      "file_path": "/Users/am/Code/Agency/chief_architect_agent/tools/architecture_loop.py",
      "line_range": [
        46,
        56
      ],
      "description": "Constitutional violation: API endpoint without validation",
      "suggested_fix": "Add Zod schema validation for all inputs",
      "impact_score": 1.0,
      "confidence": 0.7,
      "metadata": {
        "article": "Validate All Inputs",
        "line": 46
      }
    },
    {
      "id": "const_dict_architecture_loop_47",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/chief_architect_agent/tools/architecture_loop.py",
      "line_range": [
        47,
        48
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 47
      }
    },
    {
      "id": "const_dict_architecture_loop_68",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/chief_architect_agent/tools/architecture_loop.py",
      "line_range": [
        68,
        69
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 68
      }
    },
    {
      "id": "notest_work_completion_summary_agent",
      "type": "testing",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/work_completion_summary_agent/work_completion_summary_agent.py",
      "line_range": null,
      "description": "No test file found for work_completion_summary_agent.py (1 functions)",
      "suggested_fix": "Create tests/test_work_completion_summary_agent.py with comprehensive test coverage",
      "impact_score": 0.8,
      "confidence": 1.0,
      "metadata": {
        "functions": 1
      }
    },
    {
      "id": "nodoc_work_completion_summary_agent_18",
      "type": "documentation",
      "severity": "low",
      "file_path": "/Users/am/Code/Agency/work_completion_summary_agent/work_completion_summary_agent.py",
      "line_range": [
        18,
        19
      ],
      "description": "Missing docstring for function 'create_work_completion_summary_agent'",
      "suggested_fix": "Add comprehensive docstring explaining purpose, parameters, and return value",
      "impact_score": 0.4,
      "confidence": 1.0,
      "metadata": {
        "item": "create_work_completion_summary_agent",
        "type": "function"
      }
    },
    {
      "id": "long_patterns_189",
      "type": "readability",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/core/patterns.py",
      "line_range": [
        189,
        242
      ],
      "description": "Function 'get_statistics' is 53 lines (limit: 50)",
      "suggested_fix": "Break down into smaller, focused functions",
      "impact_score": 0.7,
      "confidence": 1.0,
      "metadata": {
        "function": "get_statistics",
        "length": 53
      }
    },
    {
      "id": "notest_patterns",
      "type": "testing",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/core/patterns.py",
      "line_range": null,
      "description": "No test file found for patterns.py (7 functions)",
      "suggested_fix": "Create tests/test_patterns.py with comprehensive test coverage",
      "impact_score": 0.8,
      "confidence": 1.0,
      "metadata": {
        "functions": 7
      }
    },
    {
      "id": "const_dict_patterns_18",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/core/patterns.py",
      "line_range": [
        18,
        19
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 18
      }
    },
    {
      "id": "const_dict_patterns_41",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/core/patterns.py",
      "line_range": [
        41,
        42
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 41
      }
    },
    {
      "id": "const_dict_patterns_189",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/core/patterns.py",
      "line_range": [
        189,
        190
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 189
      }
    },
    {
      "id": "const_dict_patterns_256",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/core/patterns.py",
      "line_range": [
        256,
        257
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 256
      }
    },
    {
      "id": "long_consolidate_tests_11",
      "type": "readability",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/core/consolidate_tests.py",
      "line_range": [
        11,
        98
      ],
      "description": "Function 'consolidate_test_files' is 87 lines (limit: 50)",
      "suggested_fix": "Break down into smaller, focused functions",
      "impact_score": 0.7,
      "confidence": 1.0,
      "metadata": {
        "function": "consolidate_test_files",
        "length": 87
      }
    },
    {
      "id": "notest_consolidate_tests",
      "type": "testing",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/core/consolidate_tests.py",
      "line_range": null,
      "description": "No test file found for consolidate_tests.py (2 functions)",
      "suggested_fix": "Create tests/test_consolidate_tests.py with comprehensive test coverage",
      "impact_score": 0.8,
      "confidence": 1.0,
      "metadata": {
        "functions": 2
      }
    },
    {
      "id": "complex_consolidate_tests_11",
      "type": "complexity",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/core/consolidate_tests.py",
      "line_range": [
        11,
        98
      ],
      "description": "High complexity in 'consolidate_test_files' (score: 17)",
      "suggested_fix": "Refactor to reduce cyclomatic complexity",
      "impact_score": 0.7,
      "confidence": 0.8,
      "metadata": {
        "function": "consolidate_test_files",
        "complexity": 17
      }
    },
    {
      "id": "long___init___79",
      "type": "readability",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/core/__init__.py",
      "line_range": [
        79,
        137
      ],
      "description": "Function 'detect_and_fix_errors' is 58 lines (limit: 50)",
      "suggested_fix": "Break down into smaller, focused functions",
      "impact_score": 0.7,
      "confidence": 1.0,
      "metadata": {
        "function": "detect_and_fix_errors",
        "length": 58
      }
    },
    {
      "id": "notest___init__",
      "type": "testing",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/core/__init__.py",
      "line_range": null,
      "description": "No test file found for __init__.py (14 functions)",
      "suggested_fix": "Create tests/test___init__.py with comprehensive test coverage",
      "impact_score": 0.8,
      "confidence": 1.0,
      "metadata": {
        "functions": 14
      }
    },
    {
      "id": "nodoc___init___252",
      "type": "documentation",
      "severity": "low",
      "file_path": "/Users/am/Code/Agency/core/__init__.py",
      "line_range": [
        252,
        253
      ],
      "description": "Missing docstring for function 'learn_from_operation_result'",
      "suggested_fix": "Add comprehensive docstring explaining purpose, parameters, and return value",
      "impact_score": 0.4,
      "confidence": 1.0,
      "metadata": {
        "item": "learn_from_operation_result",
        "type": "function"
      }
    },
    {
      "id": "const_dict___init___79",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/core/__init__.py",
      "line_range": [
        79,
        80
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 79
      }
    },
    {
      "id": "const_dict___init___137",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/core/__init__.py",
      "line_range": [
        137,
        138
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 137
      }
    },
    {
      "id": "const_dict___init___156",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/core/__init__.py",
      "line_range": [
        156,
        157
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 156
      }
    },
    {
      "id": "const_dict___init___241",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/core/__init__.py",
      "line_range": [
        241,
        242
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 241
      }
    },
    {
      "id": "const_dict___init___255",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/core/__init__.py",
      "line_range": [
        255,
        256
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 255
      }
    },
    {
      "id": "const_dict___init___256",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/core/__init__.py",
      "line_range": [
        256,
        257
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 256
      }
    },
    {
      "id": "long_telemetry_108",
      "type": "readability",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/core/telemetry.py",
      "line_range": [
        108,
        160
      ],
      "description": "Function 'query' is 52 lines (limit: 50)",
      "suggested_fix": "Break down into smaller, focused functions",
      "impact_score": 0.7,
      "confidence": 1.0,
      "metadata": {
        "function": "query",
        "length": 52
      }
    },
    {
      "id": "long_telemetry_238",
      "type": "readability",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/core/telemetry.py",
      "line_range": [
        238,
        297
      ],
      "description": "Function 'consolidate_legacy_logs' is 59 lines (limit: 50)",
      "suggested_fix": "Break down into smaller, focused functions",
      "impact_score": 0.7,
      "confidence": 1.0,
      "metadata": {
        "function": "consolidate_legacy_logs",
        "length": 59
      }
    },
    {
      "id": "notest_telemetry",
      "type": "testing",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/core/telemetry.py",
      "line_range": null,
      "description": "No test file found for telemetry.py (6 functions)",
      "suggested_fix": "Create tests/test_telemetry.py with comprehensive test coverage",
      "impact_score": 0.8,
      "confidence": 1.0,
      "metadata": {
        "functions": 6
      }
    },
    {
      "id": "nodoc_telemetry_108",
      "type": "documentation",
      "severity": "low",
      "file_path": "/Users/am/Code/Agency/core/telemetry.py",
      "line_range": [
        108,
        109
      ],
      "description": "Missing docstring for function 'query'",
      "suggested_fix": "Add comprehensive docstring explaining purpose, parameters, and return value",
      "impact_score": 0.4,
      "confidence": 1.0,
      "metadata": {
        "item": "query",
        "type": "function"
      }
    },
    {
      "id": "complex_telemetry_61",
      "type": "complexity",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/core/telemetry.py",
      "line_range": [
        61,
        108
      ],
      "description": "High complexity in 'log' (score: 13)",
      "suggested_fix": "Refactor to reduce cyclomatic complexity",
      "impact_score": 0.7,
      "confidence": 0.8,
      "metadata": {
        "function": "log",
        "complexity": 13
      }
    },
    {
      "id": "complex_telemetry_108",
      "type": "complexity",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/core/telemetry.py",
      "line_range": [
        108,
        160
      ],
      "description": "High complexity in 'query' (score: 13)",
      "suggested_fix": "Refactor to reduce cyclomatic complexity",
      "impact_score": 0.7,
      "confidence": 0.8,
      "metadata": {
        "function": "query",
        "complexity": 13
      }
    },
    {
      "id": "leak_file_telemetry_87",
      "type": "memory_leaks",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/core/telemetry.py",
      "line_range": [
        87,
        88
      ],
      "description": "File opened without context manager",
      "suggested_fix": "Use 'with open(...) as f:' pattern",
      "impact_score": 0.7,
      "confidence": 0.9,
      "metadata": {
        "line": 87
      }
    },
    {
      "id": "err_nolog_telemetry_94",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/core/telemetry.py",
      "line_range": [
        94,
        99
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 94
      }
    },
    {
      "id": "err_nolog_telemetry_96",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/core/telemetry.py",
      "line_range": [
        96,
        101
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 96
      }
    },
    {
      "id": "err_nolog_telemetry_155",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/core/telemetry.py",
      "line_range": [
        155,
        160
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 155
      }
    },
    {
      "id": "const_dict_telemetry_61",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/core/telemetry.py",
      "line_range": [
        61,
        62
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 61
      }
    },
    {
      "id": "const_dict_telemetry_160",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/core/telemetry.py",
      "line_range": [
        160,
        161
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 160
      }
    },
    {
      "id": "const_dict_telemetry_310",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/core/telemetry.py",
      "line_range": [
        310,
        311
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 310
      }
    },
    {
      "id": "long_unified_edit_217",
      "type": "readability",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/core/unified_edit.py",
      "line_range": [
        217,
        280
      ],
      "description": "Function 'validate_edit' is 63 lines (limit: 50)",
      "suggested_fix": "Break down into smaller, focused functions",
      "impact_score": 0.7,
      "confidence": 1.0,
      "metadata": {
        "function": "validate_edit",
        "length": 63
      }
    },
    {
      "id": "notest_unified_edit",
      "type": "testing",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/core/unified_edit.py",
      "line_range": null,
      "description": "No test file found for unified_edit.py (6 functions)",
      "suggested_fix": "Create tests/test_unified_edit.py with comprehensive test coverage",
      "impact_score": 0.8,
      "confidence": 1.0,
      "metadata": {
        "functions": 6
      }
    },
    {
      "id": "nodoc_unified_edit_45",
      "type": "documentation",
      "severity": "low",
      "file_path": "/Users/am/Code/Agency/core/unified_edit.py",
      "line_range": [
        45,
        46
      ],
      "description": "Missing docstring for function 'edit'",
      "suggested_fix": "Add comprehensive docstring explaining purpose, parameters, and return value",
      "impact_score": 0.4,
      "confidence": 1.0,
      "metadata": {
        "item": "edit",
        "type": "function"
      }
    },
    {
      "id": "nodoc_unified_edit_168",
      "type": "documentation",
      "severity": "low",
      "file_path": "/Users/am/Code/Agency/core/unified_edit.py",
      "line_range": [
        168,
        169
      ],
      "description": "Missing docstring for function 'smart_edit'",
      "suggested_fix": "Add comprehensive docstring explaining purpose, parameters, and return value",
      "impact_score": 0.4,
      "confidence": 1.0,
      "metadata": {
        "item": "smart_edit",
        "type": "function"
      }
    },
    {
      "id": "nodoc_unified_edit_217",
      "type": "documentation",
      "severity": "low",
      "file_path": "/Users/am/Code/Agency/core/unified_edit.py",
      "line_range": [
        217,
        218
      ],
      "description": "Missing docstring for function 'validate_edit'",
      "suggested_fix": "Add comprehensive docstring explaining purpose, parameters, and return value",
      "impact_score": 0.4,
      "confidence": 1.0,
      "metadata": {
        "item": "validate_edit",
        "type": "function"
      }
    },
    {
      "id": "nodoc_unified_edit_280",
      "type": "documentation",
      "severity": "low",
      "file_path": "/Users/am/Code/Agency/core/unified_edit.py",
      "line_range": [
        280,
        281
      ],
      "description": "Missing docstring for function 'batch_edit'",
      "suggested_fix": "Add comprehensive docstring explaining purpose, parameters, and return value",
      "impact_score": 0.4,
      "confidence": 1.0,
      "metadata": {
        "item": "batch_edit",
        "type": "function"
      }
    },
    {
      "id": "nodoc_unified_edit_334",
      "type": "documentation",
      "severity": "low",
      "file_path": "/Users/am/Code/Agency/core/unified_edit.py",
      "line_range": [
        334,
        335
      ],
      "description": "Missing docstring for function 'edit_file'",
      "suggested_fix": "Add comprehensive docstring explaining purpose, parameters, and return value",
      "impact_score": 0.4,
      "confidence": 1.0,
      "metadata": {
        "item": "edit_file",
        "type": "function"
      }
    },
    {
      "id": "err_nolog_unified_edit_251",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/core/unified_edit.py",
      "line_range": [
        251,
        256
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 251
      }
    },
    {
      "id": "err_nolog_unified_edit_306",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/core/unified_edit.py",
      "line_range": [
        306,
        311
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 306
      }
    },
    {
      "id": "const_dict_unified_edit_222",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/core/unified_edit.py",
      "line_range": [
        222,
        223
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 222
      }
    },
    {
      "id": "long_self_healing_56",
      "type": "readability",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/core/self_healing.py",
      "line_range": [
        56,
        114
      ],
      "description": "Function 'detect_errors' is 58 lines (limit: 50)",
      "suggested_fix": "Break down into smaller, focused functions",
      "impact_score": 0.7,
      "confidence": 1.0,
      "metadata": {
        "function": "detect_errors",
        "length": 58
      }
    },
    {
      "id": "long_self_healing_114",
      "type": "readability",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/core/self_healing.py",
      "line_range": [
        114,
        182
      ],
      "description": "Function 'fix_error' is 68 lines (limit: 50)",
      "suggested_fix": "Break down into smaller, focused functions",
      "impact_score": 0.7,
      "confidence": 1.0,
      "metadata": {
        "function": "fix_error",
        "length": 68
      }
    },
    {
      "id": "notest_self_healing",
      "type": "testing",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/core/self_healing.py",
      "line_range": null,
      "description": "No test file found for self_healing.py (3 functions)",
      "suggested_fix": "Create tests/test_self_healing.py with comprehensive test coverage",
      "impact_score": 0.8,
      "confidence": 1.0,
      "metadata": {
        "functions": 3
      }
    },
    {
      "id": "complex_self_healing_56",
      "type": "complexity",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/core/self_healing.py",
      "line_range": [
        56,
        114
      ],
      "description": "High complexity in 'detect_errors' (score: 15)",
      "suggested_fix": "Refactor to reduce cyclomatic complexity",
      "impact_score": 0.7,
      "confidence": 0.8,
      "metadata": {
        "function": "detect_errors",
        "complexity": 15
      }
    },
    {
      "id": "complex_self_healing_114",
      "type": "complexity",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/core/self_healing.py",
      "line_range": [
        114,
        182
      ],
      "description": "High complexity in 'fix_error' (score: 18)",
      "suggested_fix": "Refactor to reduce cyclomatic complexity",
      "impact_score": 0.7,
      "confidence": 0.8,
      "metadata": {
        "function": "fix_error",
        "complexity": 18
      }
    },
    {
      "id": "err_nolog_self_healing_150",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/core/self_healing.py",
      "line_range": [
        150,
        155
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 150
      }
    },
    {
      "id": "err_bare_self_healing_163",
      "type": "error_handling",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/core/self_healing.py",
      "line_range": [
        163,
        164
      ],
      "description": "Bare except clause catches all exceptions",
      "suggested_fix": "Specify exception types to catch",
      "impact_score": 0.8,
      "confidence": 1.0,
      "metadata": {
        "line": 163
      }
    },
    {
      "id": "err_nolog_self_healing_220",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/core/self_healing.py",
      "line_range": [
        220,
        225
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 220
      }
    },
    {
      "id": "err_nolog_self_healing_287",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/core/self_healing.py",
      "line_range": [
        287,
        292
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 287
      }
    },
    {
      "id": "long_system_hooks_19",
      "type": "readability",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/shared/system_hooks.py",
      "line_range": [
        19,
        91
      ],
      "description": "Function '__init__' is 72 lines (limit: 50)",
      "suggested_fix": "Break down into smaller, focused functions",
      "impact_score": 0.7,
      "confidence": 1.0,
      "metadata": {
        "function": "__init__",
        "length": 72
      }
    },
    {
      "id": "long_system_hooks_91",
      "type": "readability",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/shared/system_hooks.py",
      "line_range": [
        91,
        153
      ],
      "description": "Function '__init__' is 62 lines (limit: 50)",
      "suggested_fix": "Break down into smaller, focused functions",
      "impact_score": 0.7,
      "confidence": 1.0,
      "metadata": {
        "function": "__init__",
        "length": 62
      }
    },
    {
      "id": "long_system_hooks_153",
      "type": "readability",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/shared/system_hooks.py",
      "line_range": [
        153,
        252
      ],
      "description": "Function '_agent_label' is 99 lines (limit: 50)",
      "suggested_fix": "Break down into smaller, focused functions",
      "impact_score": 0.7,
      "confidence": 1.0,
      "metadata": {
        "function": "_agent_label",
        "length": 99
      }
    },
    {
      "id": "long_system_hooks_345",
      "type": "readability",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/shared/system_hooks.py",
      "line_range": [
        345,
        410
      ],
      "description": "Function '__init__' is 65 lines (limit: 50)",
      "suggested_fix": "Break down into smaller, focused functions",
      "impact_score": 0.7,
      "confidence": 1.0,
      "metadata": {
        "function": "__init__",
        "length": 65
      }
    },
    {
      "id": "long_system_hooks_519",
      "type": "readability",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/shared/system_hooks.py",
      "line_range": [
        519,
        613
      ],
      "description": "Function 'filter_duplicates' is 94 lines (limit: 50)",
      "suggested_fix": "Break down into smaller, focused functions",
      "impact_score": 0.7,
      "confidence": 1.0,
      "metadata": {
        "function": "filter_duplicates",
        "length": 94
      }
    },
    {
      "id": "long_system_hooks_743",
      "type": "readability",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/shared/system_hooks.py",
      "line_range": [
        743,
        802
      ],
      "description": "Function '_snapshot_files' is 59 lines (limit: 50)",
      "suggested_fix": "Break down into smaller, focused functions",
      "impact_score": 0.7,
      "confidence": 1.0,
      "metadata": {
        "function": "_snapshot_files",
        "length": 59
      }
    },
    {
      "id": "notest_system_hooks",
      "type": "testing",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/shared/system_hooks.py",
      "line_range": null,
      "description": "No test file found for system_hooks.py (10 functions)",
      "suggested_fix": "Create tests/test_system_hooks.py with comprehensive test coverage",
      "impact_score": 0.8,
      "confidence": 1.0,
      "metadata": {
        "functions": 10
      }
    },
    {
      "id": "nodoc_system_hooks_689",
      "type": "documentation",
      "severity": "low",
      "file_path": "/Users/am/Code/Agency/shared/system_hooks.py",
      "line_range": [
        689,
        690
      ],
      "description": "Missing docstring for function 'wrapped_run'",
      "suggested_fix": "Add comprehensive docstring explaining purpose, parameters, and return value",
      "impact_score": 0.4,
      "confidence": 1.0,
      "metadata": {
        "item": "wrapped_run",
        "type": "function"
      }
    },
    {
      "id": "nodoc_system_hooks_802",
      "type": "documentation",
      "severity": "low",
      "file_path": "/Users/am/Code/Agency/shared/system_hooks.py",
      "line_range": [
        802,
        803
      ],
      "description": "Missing docstring for function 'create_intent_router_hook'",
      "suggested_fix": "Add comprehensive docstring explaining purpose, parameters, and return value",
      "impact_score": 0.4,
      "confidence": 1.0,
      "metadata": {
        "item": "create_intent_router_hook",
        "type": "function"
      }
    },
    {
      "id": "nodoc_system_hooks_806",
      "type": "documentation",
      "severity": "low",
      "file_path": "/Users/am/Code/Agency/shared/system_hooks.py",
      "line_range": [
        806,
        807
      ],
      "description": "Missing docstring for function 'create_tool_wrapper_hook'",
      "suggested_fix": "Add comprehensive docstring explaining purpose, parameters, and return value",
      "impact_score": 0.4,
      "confidence": 1.0,
      "metadata": {
        "item": "create_tool_wrapper_hook",
        "type": "function"
      }
    },
    {
      "id": "nodoc_system_hooks_814",
      "type": "documentation",
      "severity": "low",
      "file_path": "/Users/am/Code/Agency/shared/system_hooks.py",
      "line_range": [
        814,
        815
      ],
      "description": "Missing docstring for function 'create_mutation_snapshot_hook'",
      "suggested_fix": "Add comprehensive docstring explaining purpose, parameters, and return value",
      "impact_score": 0.4,
      "confidence": 1.0,
      "metadata": {
        "item": "create_mutation_snapshot_hook",
        "type": "function"
      }
    },
    {
      "id": "nodoc_system_hooks_818",
      "type": "documentation",
      "severity": "low",
      "file_path": "/Users/am/Code/Agency/shared/system_hooks.py",
      "line_range": [
        818,
        819
      ],
      "description": "Missing docstring for function 'create_runtime_hints_hook'",
      "suggested_fix": "Add comprehensive docstring explaining purpose, parameters, and return value",
      "impact_score": 0.4,
      "confidence": 1.0,
      "metadata": {
        "item": "create_runtime_hints_hook",
        "type": "function"
      }
    },
    {
      "id": "complex_system_hooks_19",
      "type": "complexity",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/shared/system_hooks.py",
      "line_range": [
        19,
        91
      ],
      "description": "High complexity in '__init__' (score: 31)",
      "suggested_fix": "Refactor to reduce cyclomatic complexity",
      "impact_score": 0.7,
      "confidence": 0.8,
      "metadata": {
        "function": "__init__",
        "complexity": 31
      }
    },
    {
      "id": "complex_system_hooks_91",
      "type": "complexity",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/shared/system_hooks.py",
      "line_range": [
        91,
        153
      ],
      "description": "High complexity in '__init__' (score: 13)",
      "suggested_fix": "Refactor to reduce cyclomatic complexity",
      "impact_score": 0.7,
      "confidence": 0.8,
      "metadata": {
        "function": "__init__",
        "complexity": 13
      }
    },
    {
      "id": "complex_system_hooks_153",
      "type": "complexity",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/shared/system_hooks.py",
      "line_range": [
        153,
        252
      ],
      "description": "High complexity in '_agent_label' (score: 18)",
      "suggested_fix": "Refactor to reduce cyclomatic complexity",
      "impact_score": 0.7,
      "confidence": 0.8,
      "metadata": {
        "function": "_agent_label",
        "complexity": 18
      }
    },
    {
      "id": "complex_system_hooks_345",
      "type": "complexity",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/shared/system_hooks.py",
      "line_range": [
        345,
        410
      ],
      "description": "High complexity in '__init__' (score: 12)",
      "suggested_fix": "Refactor to reduce cyclomatic complexity",
      "impact_score": 0.7,
      "confidence": 0.8,
      "metadata": {
        "function": "__init__",
        "complexity": 12
      }
    },
    {
      "id": "complex_system_hooks_444",
      "type": "complexity",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/shared/system_hooks.py",
      "line_range": [
        444,
        485
      ],
      "description": "High complexity in '_create_reminder_message' (score: 12)",
      "suggested_fix": "Refactor to reduce cyclomatic complexity",
      "impact_score": 0.7,
      "confidence": 0.8,
      "metadata": {
        "function": "_create_reminder_message",
        "complexity": 12
      }
    },
    {
      "id": "complex_system_hooks_519",
      "type": "complexity",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/shared/system_hooks.py",
      "line_range": [
        519,
        613
      ],
      "description": "High complexity in 'filter_duplicates' (score: 24)",
      "suggested_fix": "Refactor to reduce cyclomatic complexity",
      "impact_score": 0.7,
      "confidence": 0.8,
      "metadata": {
        "function": "filter_duplicates",
        "complexity": 24
      }
    },
    {
      "id": "complex_system_hooks_647",
      "type": "complexity",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/shared/system_hooks.py",
      "line_range": [
        647,
        678
      ],
      "description": "High complexity in '__init__' (score: 13)",
      "suggested_fix": "Refactor to reduce cyclomatic complexity",
      "impact_score": 0.7,
      "confidence": 0.8,
      "metadata": {
        "function": "__init__",
        "complexity": 13
      }
    },
    {
      "id": "complex_system_hooks_713",
      "type": "complexity",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/shared/system_hooks.py",
      "line_range": [
        713,
        743
      ],
      "description": "High complexity in '_extract_target_files' (score: 13)",
      "suggested_fix": "Refactor to reduce cyclomatic complexity",
      "impact_score": 0.7,
      "confidence": 0.8,
      "metadata": {
        "function": "_extract_target_files",
        "complexity": 13
      }
    },
    {
      "id": "complex_system_hooks_743",
      "type": "complexity",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/shared/system_hooks.py",
      "line_range": [
        743,
        802
      ],
      "description": "High complexity in '_snapshot_files' (score: 20)",
      "suggested_fix": "Refactor to reduce cyclomatic complexity",
      "impact_score": 0.7,
      "confidence": 0.8,
      "metadata": {
        "function": "_snapshot_files",
        "complexity": 20
      }
    },
    {
      "id": "err_nolog_system_hooks_268",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/shared/system_hooks.py",
      "line_range": [
        268,
        273
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 268
      }
    },
    {
      "id": "err_nolog_system_hooks_307",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/shared/system_hooks.py",
      "line_range": [
        307,
        312
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 307
      }
    },
    {
      "id": "err_nolog_system_hooks_396",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/shared/system_hooks.py",
      "line_range": [
        396,
        401
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 396
      }
    },
    {
      "id": "err_nolog_system_hooks_402",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/shared/system_hooks.py",
      "line_range": [
        402,
        407
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 402
      }
    },
    {
      "id": "err_nolog_system_hooks_440",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/shared/system_hooks.py",
      "line_range": [
        440,
        445
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 440
      }
    },
    {
      "id": "err_nolog_system_hooks_660",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/shared/system_hooks.py",
      "line_range": [
        660,
        665
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 660
      }
    },
    {
      "id": "err_nolog_system_hooks_668",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/shared/system_hooks.py",
      "line_range": [
        668,
        673
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 668
      }
    },
    {
      "id": "err_nolog_system_hooks_670",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/shared/system_hooks.py",
      "line_range": [
        670,
        675
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 670
      }
    },
    {
      "id": "err_nolog_system_hooks_693",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/shared/system_hooks.py",
      "line_range": [
        693,
        698
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 693
      }
    },
    {
      "id": "err_nolog_system_hooks_710",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/shared/system_hooks.py",
      "line_range": [
        710,
        715
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 710
      }
    },
    {
      "id": "err_nolog_system_hooks_727",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/shared/system_hooks.py",
      "line_range": [
        727,
        732
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 727
      }
    },
    {
      "id": "err_nolog_system_hooks_739",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/shared/system_hooks.py",
      "line_range": [
        739,
        744
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 739
      }
    },
    {
      "id": "err_nolog_system_hooks_757",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/shared/system_hooks.py",
      "line_range": [
        757,
        762
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 757
      }
    },
    {
      "id": "err_nolog_system_hooks_763",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/shared/system_hooks.py",
      "line_range": [
        763,
        768
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 763
      }
    },
    {
      "id": "err_nolog_system_hooks_790",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/shared/system_hooks.py",
      "line_range": [
        790,
        795
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 790
      }
    },
    {
      "id": "err_nolog_system_hooks_799",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/shared/system_hooks.py",
      "line_range": [
        799,
        804
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 799
      }
    },
    {
      "id": "const_dict_pattern_models_23",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/shared/pattern_models.py",
      "line_range": [
        23,
        24
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 23
      }
    },
    {
      "id": "const_dict_pattern_models_42",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/shared/pattern_models.py",
      "line_range": [
        42,
        43
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 42
      }
    },
    {
      "id": "const_dict_pattern_models_43",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/shared/pattern_models.py",
      "line_range": [
        43,
        44
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 43
      }
    },
    {
      "id": "notest_agent_utils",
      "type": "testing",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/shared/agent_utils.py",
      "line_range": null,
      "description": "No test file found for agent_utils.py (5 functions)",
      "suggested_fix": "Create tests/test_agent_utils.py with comprehensive test coverage",
      "impact_score": 0.8,
      "confidence": 1.0,
      "metadata": {
        "functions": 5
      }
    },
    {
      "id": "nodoc_agent_utils_52",
      "type": "documentation",
      "severity": "low",
      "file_path": "/Users/am/Code/Agency/shared/agent_utils.py",
      "line_range": [
        52,
        53
      ],
      "description": "Missing docstring for function 'create_model_settings'",
      "suggested_fix": "Add comprehensive docstring explaining purpose, parameters, and return value",
      "impact_score": 0.4,
      "confidence": 1.0,
      "metadata": {
        "item": "create_model_settings",
        "type": "function"
      }
    },
    {
      "id": "long_retry_controller_262",
      "type": "readability",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/shared/retry_controller.py",
      "line_range": [
        262,
        441
      ],
      "description": "Function 'execute_with_retry' is 179 lines (limit: 50)",
      "suggested_fix": "Break down into smaller, focused functions",
      "impact_score": 0.7,
      "confidence": 1.0,
      "metadata": {
        "function": "execute_with_retry",
        "length": 179
      }
    },
    {
      "id": "nodoc_retry_controller_169",
      "type": "documentation",
      "severity": "low",
      "file_path": "/Users/am/Code/Agency/shared/retry_controller.py",
      "line_range": [
        169,
        170
      ],
      "description": "Missing docstring for class 'CircuitBreakerOpenError'",
      "suggested_fix": "Add comprehensive docstring explaining purpose, parameters, and return value",
      "impact_score": 0.4,
      "confidence": 1.0,
      "metadata": {
        "item": "CircuitBreakerOpenError",
        "type": "class"
      }
    },
    {
      "id": "nodoc_retry_controller_184",
      "type": "documentation",
      "severity": "low",
      "file_path": "/Users/am/Code/Agency/shared/retry_controller.py",
      "line_range": [
        184,
        185
      ],
      "description": "Missing docstring for function 'allow_request'",
      "suggested_fix": "Add comprehensive docstring explaining purpose, parameters, and return value",
      "impact_score": 0.4,
      "confidence": 1.0,
      "metadata": {
        "item": "allow_request",
        "type": "function"
      }
    },
    {
      "id": "nodoc_retry_controller_203",
      "type": "documentation",
      "severity": "low",
      "file_path": "/Users/am/Code/Agency/shared/retry_controller.py",
      "line_range": [
        203,
        204
      ],
      "description": "Missing docstring for function 'record_success'",
      "suggested_fix": "Add comprehensive docstring explaining purpose, parameters, and return value",
      "impact_score": 0.4,
      "confidence": 1.0,
      "metadata": {
        "item": "record_success",
        "type": "function"
      }
    },
    {
      "id": "nodoc_retry_controller_212",
      "type": "documentation",
      "severity": "low",
      "file_path": "/Users/am/Code/Agency/shared/retry_controller.py",
      "line_range": [
        212,
        213
      ],
      "description": "Missing docstring for function 'record_failure'",
      "suggested_fix": "Add comprehensive docstring explaining purpose, parameters, and return value",
      "impact_score": 0.4,
      "confidence": 1.0,
      "metadata": {
        "item": "record_failure",
        "type": "function"
      }
    },
    {
      "id": "nodoc_retry_controller_451",
      "type": "documentation",
      "severity": "low",
      "file_path": "/Users/am/Code/Agency/shared/retry_controller.py",
      "line_range": [
        451,
        452
      ],
      "description": "Missing docstring for class 'WrappedTool:'",
      "suggested_fix": "Add comprehensive docstring explaining purpose, parameters, and return value",
      "impact_score": 0.4,
      "confidence": 1.0,
      "metadata": {
        "item": "WrappedTool:",
        "type": "class"
      }
    },
    {
      "id": "nodoc_retry_controller_469",
      "type": "documentation",
      "severity": "low",
      "file_path": "/Users/am/Code/Agency/shared/retry_controller.py",
      "line_range": [
        469,
        470
      ],
      "description": "Missing docstring for function 'wrapper'",
      "suggested_fix": "Add comprehensive docstring explaining purpose, parameters, and return value",
      "impact_score": 0.4,
      "confidence": 1.0,
      "metadata": {
        "item": "wrapper",
        "type": "function"
      }
    },
    {
      "id": "nodoc_retry_controller_490",
      "type": "documentation",
      "severity": "low",
      "file_path": "/Users/am/Code/Agency/shared/retry_controller.py",
      "line_range": [
        490,
        491
      ],
      "description": "Missing docstring for function 'target'",
      "suggested_fix": "Add comprehensive docstring explaining purpose, parameters, and return value",
      "impact_score": 0.4,
      "confidence": 1.0,
      "metadata": {
        "item": "target",
        "type": "function"
      }
    },
    {
      "id": "complex_retry_controller_262",
      "type": "complexity",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/shared/retry_controller.py",
      "line_range": [
        262,
        441
      ],
      "description": "High complexity in 'execute_with_retry' (score: 56)",
      "suggested_fix": "Refactor to reduce cyclomatic complexity",
      "impact_score": 0.7,
      "confidence": 0.8,
      "metadata": {
        "function": "execute_with_retry",
        "complexity": 56
      }
    },
    {
      "id": "perf_retry_controller_368",
      "type": "performance",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/shared/retry_controller.py",
      "line_range": [
        368,
        369
      ],
      "description": "Performance issue: time.sleep(",
      "suggested_fix": "Avoid blocking sleep in async code",
      "impact_score": 0.6,
      "confidence": 0.7,
      "metadata": {
        "pattern": "time.sleep(",
        "line": 368
      }
    },
    {
      "id": "err_nolog_retry_controller_330",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/shared/retry_controller.py",
      "line_range": [
        330,
        335
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 330
      }
    },
    {
      "id": "err_nolog_retry_controller_413",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/shared/retry_controller.py",
      "line_range": [
        413,
        418
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 413
      }
    },
    {
      "id": "err_nolog_retry_controller_493",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/shared/retry_controller.py",
      "line_range": [
        493,
        498
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 493
      }
    },
    {
      "id": "const_dict_retry_controller_475",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/shared/retry_controller.py",
      "line_range": [
        475,
        476
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 475
      }
    },
    {
      "id": "const_dict_retry_controller_510",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/shared/retry_controller.py",
      "line_range": [
        510,
        511
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 510
      }
    },
    {
      "id": "notest_utils",
      "type": "testing",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/shared/utils.py",
      "line_range": null,
      "description": "No test file found for utils.py (1 functions)",
      "suggested_fix": "Create tests/test_utils.py with comprehensive test coverage",
      "impact_score": 0.8,
      "confidence": 1.0,
      "metadata": {
        "functions": 1
      }
    },
    {
      "id": "complex_utils_5",
      "type": "complexity",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/shared/utils.py",
      "line_range": [
        5,
        45
      ],
      "description": "High complexity in 'silence_warnings_and_logs' (score: 11)",
      "suggested_fix": "Refactor to reduce cyclomatic complexity",
      "impact_score": 0.7,
      "confidence": 0.8,
      "metadata": {
        "function": "silence_warnings_and_logs",
        "complexity": 11
      }
    },
    {
      "id": "err_nolog_utils_25",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/shared/utils.py",
      "line_range": [
        25,
        30
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 25
      }
    },
    {
      "id": "err_nolog_utils_49",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/shared/utils.py",
      "line_range": [
        49,
        54
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 49
      }
    },
    {
      "id": "const_dict_telemetry_models_15",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/shared/telemetry_models.py",
      "line_range": [
        15,
        16
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 15
      }
    },
    {
      "id": "const_dict_telemetry_models_16",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/shared/telemetry_models.py",
      "line_range": [
        16,
        17
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 16
      }
    },
    {
      "id": "const_dict_telemetry_models_22",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/shared/telemetry_models.py",
      "line_range": [
        22,
        23
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 22
      }
    },
    {
      "id": "const_dict_telemetry_models_23",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/shared/telemetry_models.py",
      "line_range": [
        23,
        24
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 23
      }
    },
    {
      "id": "const_dict_telemetry_models_26",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/shared/telemetry_models.py",
      "line_range": [
        26,
        27
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 26
      }
    },
    {
      "id": "notest_agent_context",
      "type": "testing",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/shared/agent_context.py",
      "line_range": null,
      "description": "No test file found for agent_context.py (6 functions)",
      "suggested_fix": "Create tests/test_agent_context.py with comprehensive test coverage",
      "impact_score": 0.8,
      "confidence": 1.0,
      "metadata": {
        "functions": 6
      }
    },
    {
      "id": "const_dict_agent_context_32",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/shared/agent_context.py",
      "line_range": [
        32,
        33
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 32
      }
    },
    {
      "id": "const_dict_learning_models_17",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/shared/learning_models.py",
      "line_range": [
        17,
        18
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 17
      }
    },
    {
      "id": "const_dict_learning_models_26",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/shared/learning_models.py",
      "line_range": [
        26,
        27
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 26
      }
    },
    {
      "id": "const_dict_learning_models_33",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/shared/learning_models.py",
      "line_range": [
        33,
        34
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 33
      }
    },
    {
      "id": "notest_common_models",
      "type": "testing",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/shared/common_models.py",
      "line_range": null,
      "description": "No test file found for common_models.py (2 functions)",
      "suggested_fix": "Create tests/test_common_models.py with comprehensive test coverage",
      "impact_score": 0.8,
      "confidence": 1.0,
      "metadata": {
        "functions": 2
      }
    },
    {
      "id": "notest_exit_plan_mode",
      "type": "testing",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/tools/exit_plan_mode.py",
      "line_range": null,
      "description": "No test file found for exit_plan_mode.py (1 functions)",
      "suggested_fix": "Create tests/test_exit_plan_mode.py with comprehensive test coverage",
      "impact_score": 0.8,
      "confidence": 1.0,
      "metadata": {
        "functions": 1
      }
    },
    {
      "id": "nodoc_exit_plan_mode_20",
      "type": "documentation",
      "severity": "low",
      "file_path": "/Users/am/Code/Agency/tools/exit_plan_mode.py",
      "line_range": [
        20,
        21
      ],
      "description": "Missing docstring for function 'run'",
      "suggested_fix": "Add comprehensive docstring explaining purpose, parameters, and return value",
      "impact_score": 0.4,
      "confidence": 1.0,
      "metadata": {
        "item": "run",
        "type": "function"
      }
    },
    {
      "id": "err_nolog_exit_plan_mode_42",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/exit_plan_mode.py",
      "line_range": [
        42,
        47
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 42
      }
    },
    {
      "id": "notest_git",
      "type": "testing",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/tools/git.py",
      "line_range": null,
      "description": "No test file found for git.py (1 functions)",
      "suggested_fix": "Create tests/test_git.py with comprehensive test coverage",
      "impact_score": 0.8,
      "confidence": 1.0,
      "metadata": {
        "functions": 1
      }
    },
    {
      "id": "nodoc_git_16",
      "type": "documentation",
      "severity": "low",
      "file_path": "/Users/am/Code/Agency/tools/git.py",
      "line_range": [
        16,
        17
      ],
      "description": "Missing docstring for function 'run'",
      "suggested_fix": "Add comprehensive docstring explaining purpose, parameters, and return value",
      "impact_score": 0.4,
      "confidence": 1.0,
      "metadata": {
        "item": "run",
        "type": "function"
      }
    },
    {
      "id": "err_nolog_git_21",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/git.py",
      "line_range": [
        21,
        26
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 21
      }
    },
    {
      "id": "err_nolog_git_30",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/git.py",
      "line_range": [
        30,
        35
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 30
      }
    },
    {
      "id": "err_nolog_git_61",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/git.py",
      "line_range": [
        61,
        66
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 61
      }
    },
    {
      "id": "err_nolog_git_85",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/git.py",
      "line_range": [
        85,
        90
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 85
      }
    },
    {
      "id": "long_undo_snapshot_21",
      "type": "readability",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/undo_snapshot.py",
      "line_range": [
        21,
        74
      ],
      "description": "Function 'run' is 53 lines (limit: 50)",
      "suggested_fix": "Break down into smaller, focused functions",
      "impact_score": 0.7,
      "confidence": 1.0,
      "metadata": {
        "function": "run",
        "length": 53
      }
    },
    {
      "id": "notest_undo_snapshot",
      "type": "testing",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/tools/undo_snapshot.py",
      "line_range": null,
      "description": "No test file found for undo_snapshot.py (2 functions)",
      "suggested_fix": "Create tests/test_undo_snapshot.py with comprehensive test coverage",
      "impact_score": 0.8,
      "confidence": 1.0,
      "metadata": {
        "functions": 2
      }
    },
    {
      "id": "nodoc_undo_snapshot_21",
      "type": "documentation",
      "severity": "low",
      "file_path": "/Users/am/Code/Agency/tools/undo_snapshot.py",
      "line_range": [
        21,
        22
      ],
      "description": "Missing docstring for function 'run'",
      "suggested_fix": "Add comprehensive docstring explaining purpose, parameters, and return value",
      "impact_score": 0.4,
      "confidence": 1.0,
      "metadata": {
        "item": "run",
        "type": "function"
      }
    },
    {
      "id": "nodoc_undo_snapshot_74",
      "type": "documentation",
      "severity": "low",
      "file_path": "/Users/am/Code/Agency/tools/undo_snapshot.py",
      "line_range": [
        74,
        75
      ],
      "description": "Missing docstring for function 'run'",
      "suggested_fix": "Add comprehensive docstring explaining purpose, parameters, and return value",
      "impact_score": 0.4,
      "confidence": 1.0,
      "metadata": {
        "item": "run",
        "type": "function"
      }
    },
    {
      "id": "err_nolog_undo_snapshot_32",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/undo_snapshot.py",
      "line_range": [
        32,
        37
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 32
      }
    },
    {
      "id": "err_nolog_undo_snapshot_86",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/undo_snapshot.py",
      "line_range": [
        86,
        91
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 86
      }
    },
    {
      "id": "err_nolog_undo_snapshot_100",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/undo_snapshot.py",
      "line_range": [
        100,
        105
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 100
      }
    },
    {
      "id": "notest_feature_inventory",
      "type": "testing",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/tools/feature_inventory.py",
      "line_range": null,
      "description": "No test file found for feature_inventory.py (3 functions)",
      "suggested_fix": "Create tests/test_feature_inventory.py with comprehensive test coverage",
      "impact_score": 0.8,
      "confidence": 1.0,
      "metadata": {
        "functions": 3
      }
    },
    {
      "id": "err_nolog_feature_inventory_43",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/feature_inventory.py",
      "line_range": [
        43,
        48
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 43
      }
    },
    {
      "id": "long_write_31",
      "type": "readability",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/write.py",
      "line_range": [
        31,
        115
      ],
      "description": "Function 'run' is 84 lines (limit: 50)",
      "suggested_fix": "Break down into smaller, focused functions",
      "impact_score": 0.7,
      "confidence": 1.0,
      "metadata": {
        "function": "run",
        "length": 84
      }
    },
    {
      "id": "notest_write",
      "type": "testing",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/tools/write.py",
      "line_range": null,
      "description": "No test file found for write.py (3 functions)",
      "suggested_fix": "Create tests/test_write.py with comprehensive test coverage",
      "impact_score": 0.8,
      "confidence": 1.0,
      "metadata": {
        "functions": 3
      }
    },
    {
      "id": "nodoc_write_31",
      "type": "documentation",
      "severity": "low",
      "file_path": "/Users/am/Code/Agency/tools/write.py",
      "line_range": [
        31,
        32
      ],
      "description": "Missing docstring for function 'run'",
      "suggested_fix": "Add comprehensive docstring explaining purpose, parameters, and return value",
      "impact_score": 0.4,
      "confidence": 1.0,
      "metadata": {
        "item": "run",
        "type": "function"
      }
    },
    {
      "id": "complex_write_31",
      "type": "complexity",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/tools/write.py",
      "line_range": [
        31,
        115
      ],
      "description": "High complexity in 'run' (score: 26)",
      "suggested_fix": "Refactor to reduce cyclomatic complexity",
      "impact_score": 0.7,
      "confidence": 0.8,
      "metadata": {
        "function": "run",
        "complexity": 26
      }
    },
    {
      "id": "err_nolog_write_68",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/write.py",
      "line_range": [
        68,
        73
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 68
      }
    },
    {
      "id": "err_nolog_write_97",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/write.py",
      "line_range": [
        97,
        102
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 97
      }
    },
    {
      "id": "err_nolog_write_100",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/write.py",
      "line_range": [
        100,
        105
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 100
      }
    },
    {
      "id": "long_bash_135",
      "type": "readability",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/bash.py",
      "line_range": [
        135,
        188
      ],
      "description": "Function 'run' is 53 lines (limit: 50)",
      "suggested_fix": "Break down into smaller, focused functions",
      "impact_score": 0.7,
      "confidence": 1.0,
      "metadata": {
        "function": "run",
        "length": 53
      }
    },
    {
      "id": "notest_bash",
      "type": "testing",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/tools/bash.py",
      "line_range": null,
      "description": "No test file found for bash.py (1 functions)",
      "suggested_fix": "Create tests/test_bash.py with comprehensive test coverage",
      "impact_score": 0.8,
      "confidence": 1.0,
      "metadata": {
        "functions": 1
      }
    },
    {
      "id": "complex_bash_135",
      "type": "complexity",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/tools/bash.py",
      "line_range": [
        135,
        188
      ],
      "description": "High complexity in 'run' (score: 17)",
      "suggested_fix": "Refactor to reduce cyclomatic complexity",
      "impact_score": 0.7,
      "confidence": 0.8,
      "metadata": {
        "function": "run",
        "complexity": 17
      }
    },
    {
      "id": "err_nolog_bash_184",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/bash.py",
      "line_range": [
        184,
        189
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 184
      }
    },
    {
      "id": "err_nolog_bash_214",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/bash.py",
      "line_range": [
        214,
        219
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 214
      }
    },
    {
      "id": "err_nolog_bash_249",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/bash.py",
      "line_range": [
        249,
        254
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 249
      }
    },
    {
      "id": "long_notebook_read_24",
      "type": "readability",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/notebook_read.py",
      "line_range": [
        24,
        86
      ],
      "description": "Function 'run' is 62 lines (limit: 50)",
      "suggested_fix": "Break down into smaller, focused functions",
      "impact_score": 0.7,
      "confidence": 1.0,
      "metadata": {
        "function": "run",
        "length": 62
      }
    },
    {
      "id": "notest_notebook_read",
      "type": "testing",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/tools/notebook_read.py",
      "line_range": null,
      "description": "No test file found for notebook_read.py (1 functions)",
      "suggested_fix": "Create tests/test_notebook_read.py with comprehensive test coverage",
      "impact_score": 0.8,
      "confidence": 1.0,
      "metadata": {
        "functions": 1
      }
    },
    {
      "id": "nodoc_notebook_read_24",
      "type": "documentation",
      "severity": "low",
      "file_path": "/Users/am/Code/Agency/tools/notebook_read.py",
      "line_range": [
        24,
        25
      ],
      "description": "Missing docstring for function 'run'",
      "suggested_fix": "Add comprehensive docstring explaining purpose, parameters, and return value",
      "impact_score": 0.4,
      "confidence": 1.0,
      "metadata": {
        "item": "run",
        "type": "function"
      }
    },
    {
      "id": "complex_notebook_read_24",
      "type": "complexity",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/tools/notebook_read.py",
      "line_range": [
        24,
        86
      ],
      "description": "High complexity in 'run' (score: 23)",
      "suggested_fix": "Refactor to reduce cyclomatic complexity",
      "impact_score": 0.7,
      "confidence": 0.8,
      "metadata": {
        "function": "run",
        "complexity": 23
      }
    },
    {
      "id": "err_nolog_notebook_read_48",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/notebook_read.py",
      "line_range": [
        48,
        53
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 48
      }
    },
    {
      "id": "err_nolog_notebook_read_83",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/notebook_read.py",
      "line_range": [
        83,
        88
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 83
      }
    },
    {
      "id": "long_learning_dashboard_142",
      "type": "readability",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/learning_dashboard.py",
      "line_range": [
        142,
        200
      ],
      "description": "Function '_collect_vector_store_metrics' is 58 lines (limit: 50)",
      "suggested_fix": "Break down into smaller, focused functions",
      "impact_score": 0.7,
      "confidence": 1.0,
      "metadata": {
        "function": "_collect_vector_store_metrics",
        "length": 58
      }
    },
    {
      "id": "long_learning_dashboard_248",
      "type": "readability",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/learning_dashboard.py",
      "line_range": [
        248,
        305
      ],
      "description": "Function '_collect_learning_progression_metrics' is 57 lines (limit: 50)",
      "suggested_fix": "Break down into smaller, focused functions",
      "impact_score": 0.7,
      "confidence": 1.0,
      "metadata": {
        "function": "_collect_learning_progression_metrics",
        "length": 57
      }
    },
    {
      "id": "long_learning_dashboard_491",
      "type": "readability",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/learning_dashboard.py",
      "line_range": [
        491,
        553
      ],
      "description": "Function '_check_learning_alerts' is 62 lines (limit: 50)",
      "suggested_fix": "Break down into smaller, focused functions",
      "impact_score": 0.7,
      "confidence": 1.0,
      "metadata": {
        "function": "_check_learning_alerts",
        "length": 62
      }
    },
    {
      "id": "long_learning_dashboard_589",
      "type": "readability",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/learning_dashboard.py",
      "line_range": [
        589,
        658
      ],
      "description": "Function '_generate_learning_insights' is 69 lines (limit: 50)",
      "suggested_fix": "Break down into smaller, focused functions",
      "impact_score": 0.7,
      "confidence": 1.0,
      "metadata": {
        "function": "_generate_learning_insights",
        "length": 69
      }
    },
    {
      "id": "long_learning_dashboard_658",
      "type": "readability",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/learning_dashboard.py",
      "line_range": [
        658,
        722
      ],
      "description": "Function '_calculate_system_health' is 64 lines (limit: 50)",
      "suggested_fix": "Break down into smaller, focused functions",
      "impact_score": 0.7,
      "confidence": 1.0,
      "metadata": {
        "function": "_calculate_system_health",
        "length": 64
      }
    },
    {
      "id": "long_learning_dashboard_722",
      "type": "readability",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/learning_dashboard.py",
      "line_range": [
        722,
        783
      ],
      "description": "Function '_generate_improvement_recommendations' is 61 lines (limit: 50)",
      "suggested_fix": "Break down into smaller, focused functions",
      "impact_score": 0.7,
      "confidence": 1.0,
      "metadata": {
        "function": "_generate_improvement_recommendations",
        "length": 61
      }
    },
    {
      "id": "long_learning_dashboard_807",
      "type": "readability",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/learning_dashboard.py",
      "line_range": [
        807,
        858
      ],
      "description": "Function '_create_executive_summary' is 51 lines (limit: 50)",
      "suggested_fix": "Break down into smaller, focused functions",
      "impact_score": 0.7,
      "confidence": 1.0,
      "metadata": {
        "function": "_create_executive_summary",
        "length": 51
      }
    },
    {
      "id": "notest_learning_dashboard",
      "type": "testing",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/tools/learning_dashboard.py",
      "line_range": null,
      "description": "No test file found for learning_dashboard.py (3 functions)",
      "suggested_fix": "Create tests/test_learning_dashboard.py with comprehensive test coverage",
      "impact_score": 0.8,
      "confidence": 1.0,
      "metadata": {
        "functions": 3
      }
    },
    {
      "id": "complex_learning_dashboard_383",
      "type": "complexity",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/learning_dashboard.py",
      "line_range": [
        383,
        407
      ],
      "description": "High complexity in '_calculate_metric_trend' (score: 11)",
      "suggested_fix": "Refactor to reduce cyclomatic complexity",
      "impact_score": 0.7,
      "confidence": 0.8,
      "metadata": {
        "function": "_calculate_metric_trend",
        "complexity": 11
      }
    },
    {
      "id": "complex_learning_dashboard_491",
      "type": "complexity",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/learning_dashboard.py",
      "line_range": [
        491,
        553
      ],
      "description": "High complexity in '_check_learning_alerts' (score: 12)",
      "suggested_fix": "Refactor to reduce cyclomatic complexity",
      "impact_score": 0.7,
      "confidence": 0.8,
      "metadata": {
        "function": "_check_learning_alerts",
        "complexity": 12
      }
    },
    {
      "id": "complex_learning_dashboard_589",
      "type": "complexity",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/tools/learning_dashboard.py",
      "line_range": [
        589,
        658
      ],
      "description": "High complexity in '_generate_learning_insights' (score: 15)",
      "suggested_fix": "Refactor to reduce cyclomatic complexity",
      "impact_score": 0.7,
      "confidence": 0.8,
      "metadata": {
        "function": "_generate_learning_insights",
        "complexity": 15
      }
    },
    {
      "id": "complex_learning_dashboard_658",
      "type": "complexity",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/tools/learning_dashboard.py",
      "line_range": [
        658,
        722
      ],
      "description": "High complexity in '_calculate_system_health' (score: 16)",
      "suggested_fix": "Refactor to reduce cyclomatic complexity",
      "impact_score": 0.7,
      "confidence": 0.8,
      "metadata": {
        "function": "_calculate_system_health",
        "complexity": 16
      }
    },
    {
      "id": "complex_learning_dashboard_807",
      "type": "complexity",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/tools/learning_dashboard.py",
      "line_range": [
        807,
        858
      ],
      "description": "High complexity in '_create_executive_summary' (score: 15)",
      "suggested_fix": "Refactor to reduce cyclomatic complexity",
      "impact_score": 0.7,
      "confidence": 0.8,
      "metadata": {
        "function": "_create_executive_summary",
        "complexity": 15
      }
    },
    {
      "id": "arch_god_learning_dashboard_LearningDashboard:",
      "type": "architecture",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/tools/learning_dashboard.py",
      "line_range": null,
      "description": "God class 'LearningDashboard:' has 26 methods",
      "suggested_fix": "Consider splitting into smaller, focused classes",
      "impact_score": 0.8,
      "confidence": 0.9,
      "metadata": {
        "class": "LearningDashboard:",
        "methods": 26
      }
    },
    {
      "id": "err_nolog_learning_dashboard_404",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/learning_dashboard.py",
      "line_range": [
        404,
        409
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 404
      }
    },
    {
      "id": "err_nolog_learning_dashboard_414",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/learning_dashboard.py",
      "line_range": [
        414,
        419
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 414
      }
    },
    {
      "id": "err_nolog_learning_dashboard_469",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/learning_dashboard.py",
      "line_range": [
        469,
        474
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 469
      }
    },
    {
      "id": "err_nolog_learning_dashboard_488",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/learning_dashboard.py",
      "line_range": [
        488,
        493
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 488
      }
    },
    {
      "id": "const_dict_learning_dashboard_112",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/tools/learning_dashboard.py",
      "line_range": [
        112,
        113
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 112
      }
    },
    {
      "id": "const_dict_learning_dashboard_142",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/tools/learning_dashboard.py",
      "line_range": [
        142,
        143
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 142
      }
    },
    {
      "id": "const_dict_learning_dashboard_200",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/tools/learning_dashboard.py",
      "line_range": [
        200,
        201
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 200
      }
    },
    {
      "id": "const_dict_learning_dashboard_248",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/tools/learning_dashboard.py",
      "line_range": [
        248,
        249
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 248
      }
    },
    {
      "id": "const_dict_learning_dashboard_305",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/tools/learning_dashboard.py",
      "line_range": [
        305,
        306
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 305
      }
    },
    {
      "id": "const_dict_learning_dashboard_349",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/tools/learning_dashboard.py",
      "line_range": [
        349,
        350
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 349
      }
    },
    {
      "id": "const_dict_learning_dashboard_491",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/tools/learning_dashboard.py",
      "line_range": [
        491,
        492
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 491
      }
    },
    {
      "id": "const_dict_learning_dashboard_553",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/tools/learning_dashboard.py",
      "line_range": [
        553,
        554
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 553
      }
    },
    {
      "id": "const_dict_learning_dashboard_589",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/tools/learning_dashboard.py",
      "line_range": [
        589,
        590
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 589
      }
    },
    {
      "id": "const_dict_learning_dashboard_658",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/tools/learning_dashboard.py",
      "line_range": [
        658,
        659
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 658
      }
    },
    {
      "id": "const_dict_learning_dashboard_722",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/tools/learning_dashboard.py",
      "line_range": [
        722,
        723
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 722
      }
    },
    {
      "id": "const_dict_learning_dashboard_807",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/tools/learning_dashboard.py",
      "line_range": [
        807,
        808
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 807
      }
    },
    {
      "id": "long_multi_edit_70",
      "type": "readability",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/tools/multi_edit.py",
      "line_range": [
        70,
        181
      ],
      "description": "Function 'run' is 111 lines (limit: 50)",
      "suggested_fix": "Break down into smaller, focused functions",
      "impact_score": 0.7,
      "confidence": 1.0,
      "metadata": {
        "function": "run",
        "length": 111
      }
    },
    {
      "id": "notest_multi_edit",
      "type": "testing",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/tools/multi_edit.py",
      "line_range": null,
      "description": "No test file found for multi_edit.py (2 functions)",
      "suggested_fix": "Create tests/test_multi_edit.py with comprehensive test coverage",
      "impact_score": 0.8,
      "confidence": 1.0,
      "metadata": {
        "functions": 2
      }
    },
    {
      "id": "nodoc_multi_edit_10",
      "type": "documentation",
      "severity": "low",
      "file_path": "/Users/am/Code/Agency/tools/multi_edit.py",
      "line_range": [
        10,
        11
      ],
      "description": "Missing docstring for class 'EditOperation'",
      "suggested_fix": "Add comprehensive docstring explaining purpose, parameters, and return value",
      "impact_score": 0.4,
      "confidence": 1.0,
      "metadata": {
        "item": "EditOperation",
        "type": "class"
      }
    },
    {
      "id": "nodoc_multi_edit_70",
      "type": "documentation",
      "severity": "low",
      "file_path": "/Users/am/Code/Agency/tools/multi_edit.py",
      "line_range": [
        70,
        71
      ],
      "description": "Missing docstring for function 'run'",
      "suggested_fix": "Add comprehensive docstring explaining purpose, parameters, and return value",
      "impact_score": 0.4,
      "confidence": 1.0,
      "metadata": {
        "item": "run",
        "type": "function"
      }
    },
    {
      "id": "complex_multi_edit_70",
      "type": "complexity",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/tools/multi_edit.py",
      "line_range": [
        70,
        181
      ],
      "description": "High complexity in 'run' (score: 41)",
      "suggested_fix": "Refactor to reduce cyclomatic complexity",
      "impact_score": 0.7,
      "confidence": 0.8,
      "metadata": {
        "function": "run",
        "complexity": 41
      }
    },
    {
      "id": "err_nolog_multi_edit_86",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/multi_edit.py",
      "line_range": [
        86,
        91
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 86
      }
    },
    {
      "id": "err_nolog_multi_edit_162",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/multi_edit.py",
      "line_range": [
        162,
        167
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 162
      }
    },
    {
      "id": "err_nolog_multi_edit_165",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/multi_edit.py",
      "line_range": [
        165,
        170
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 165
      }
    },
    {
      "id": "long_edit_33",
      "type": "readability",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/edit.py",
      "line_range": [
        33,
        124
      ],
      "description": "Function 'run' is 91 lines (limit: 50)",
      "suggested_fix": "Break down into smaller, focused functions",
      "impact_score": 0.7,
      "confidence": 1.0,
      "metadata": {
        "function": "run",
        "length": 91
      }
    },
    {
      "id": "notest_edit",
      "type": "testing",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/tools/edit.py",
      "line_range": null,
      "description": "No test file found for edit.py (2 functions)",
      "suggested_fix": "Create tests/test_edit.py with comprehensive test coverage",
      "impact_score": 0.8,
      "confidence": 1.0,
      "metadata": {
        "functions": 2
      }
    },
    {
      "id": "nodoc_edit_33",
      "type": "documentation",
      "severity": "low",
      "file_path": "/Users/am/Code/Agency/tools/edit.py",
      "line_range": [
        33,
        34
      ],
      "description": "Missing docstring for function 'run'",
      "suggested_fix": "Add comprehensive docstring explaining purpose, parameters, and return value",
      "impact_score": 0.4,
      "confidence": 1.0,
      "metadata": {
        "item": "run",
        "type": "function"
      }
    },
    {
      "id": "nodoc_edit_124",
      "type": "documentation",
      "severity": "low",
      "file_path": "/Users/am/Code/Agency/tools/edit.py",
      "line_range": [
        124,
        125
      ],
      "description": "Missing docstring for function 'make_context'",
      "suggested_fix": "Add comprehensive docstring explaining purpose, parameters, and return value",
      "impact_score": 0.4,
      "confidence": 1.0,
      "metadata": {
        "item": "make_context",
        "type": "function"
      }
    },
    {
      "id": "complex_edit_33",
      "type": "complexity",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/tools/edit.py",
      "line_range": [
        33,
        124
      ],
      "description": "High complexity in 'run' (score: 29)",
      "suggested_fix": "Refactor to reduce cyclomatic complexity",
      "impact_score": 0.7,
      "confidence": 0.8,
      "metadata": {
        "function": "run",
        "complexity": 29
      }
    },
    {
      "id": "err_nolog_edit_156",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/edit.py",
      "line_range": [
        156,
        161
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 156
      }
    },
    {
      "id": "err_nolog_edit_159",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/edit.py",
      "line_range": [
        159,
        164
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 159
      }
    },
    {
      "id": "notest_grep",
      "type": "testing",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/tools/grep.py",
      "line_range": null,
      "description": "No test file found for grep.py (1 functions)",
      "suggested_fix": "Create tests/test_grep.py with comprehensive test coverage",
      "impact_score": 0.8,
      "confidence": 1.0,
      "metadata": {
        "functions": 1
      }
    },
    {
      "id": "nodoc_grep_72",
      "type": "documentation",
      "severity": "low",
      "file_path": "/Users/am/Code/Agency/tools/grep.py",
      "line_range": [
        72,
        73
      ],
      "description": "Missing docstring for function 'run'",
      "suggested_fix": "Add comprehensive docstring explaining purpose, parameters, and return value",
      "impact_score": 0.4,
      "confidence": 1.0,
      "metadata": {
        "item": "run",
        "type": "function"
      }
    },
    {
      "id": "err_nolog_grep_186",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/grep.py",
      "line_range": [
        186,
        191
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 186
      }
    },
    {
      "id": "notest_ls",
      "type": "testing",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/tools/ls.py",
      "line_range": null,
      "description": "No test file found for ls.py (1 functions)",
      "suggested_fix": "Create tests/test_ls.py with comprehensive test coverage",
      "impact_score": 0.8,
      "confidence": 1.0,
      "metadata": {
        "functions": 1
      }
    },
    {
      "id": "nodoc_ls_24",
      "type": "documentation",
      "severity": "low",
      "file_path": "/Users/am/Code/Agency/tools/ls.py",
      "line_range": [
        24,
        25
      ],
      "description": "Missing docstring for function 'run'",
      "suggested_fix": "Add comprehensive docstring explaining purpose, parameters, and return value",
      "impact_score": 0.4,
      "confidence": 1.0,
      "metadata": {
        "item": "run",
        "type": "function"
      }
    },
    {
      "id": "err_nolog_ls_146",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/ls.py",
      "line_range": [
        146,
        151
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 146
      }
    },
    {
      "id": "long_apply_and_verify_patch_35",
      "type": "readability",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/apply_and_verify_patch.py",
      "line_range": [
        35,
        119
      ],
      "description": "Function 'run' is 84 lines (limit: 50)",
      "suggested_fix": "Break down into smaller, focused functions",
      "impact_score": 0.7,
      "confidence": 1.0,
      "metadata": {
        "function": "run",
        "length": 84
      }
    },
    {
      "id": "long_apply_and_verify_patch_161",
      "type": "readability",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/apply_and_verify_patch.py",
      "line_range": [
        161,
        225
      ],
      "description": "Function '_commit_change' is 64 lines (limit: 50)",
      "suggested_fix": "Break down into smaller, focused functions",
      "impact_score": 0.7,
      "confidence": 1.0,
      "metadata": {
        "function": "_commit_change",
        "length": 64
      }
    },
    {
      "id": "long_apply_and_verify_patch_271",
      "type": "readability",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/apply_and_verify_patch.py",
      "line_range": [
        271,
        368
      ],
      "description": "Function 'run' is 97 lines (limit: 50)",
      "suggested_fix": "Break down into smaller, focused functions",
      "impact_score": 0.7,
      "confidence": 1.0,
      "metadata": {
        "function": "run",
        "length": 97
      }
    },
    {
      "id": "complex_apply_and_verify_patch_225",
      "type": "complexity",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/apply_and_verify_patch.py",
      "line_range": [
        225,
        271
      ],
      "description": "High complexity in '_log_successful_healing' (score: 11)",
      "suggested_fix": "Refactor to reduce cyclomatic complexity",
      "impact_score": 0.7,
      "confidence": 0.8,
      "metadata": {
        "function": "_log_successful_healing",
        "complexity": 11
      }
    },
    {
      "id": "complex_apply_and_verify_patch_271",
      "type": "complexity",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/tools/apply_and_verify_patch.py",
      "line_range": [
        271,
        368
      ],
      "description": "High complexity in 'run' (score: 22)",
      "suggested_fix": "Refactor to reduce cyclomatic complexity",
      "impact_score": 0.7,
      "confidence": 0.8,
      "metadata": {
        "function": "run",
        "complexity": 22
      }
    },
    {
      "id": "err_nolog_apply_and_verify_patch_45",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/apply_and_verify_patch.py",
      "line_range": [
        45,
        50
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 45
      }
    },
    {
      "id": "err_nolog_apply_and_verify_patch_60",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/apply_and_verify_patch.py",
      "line_range": [
        60,
        65
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 60
      }
    },
    {
      "id": "err_nolog_apply_and_verify_patch_145",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/apply_and_verify_patch.py",
      "line_range": [
        145,
        150
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 145
      }
    },
    {
      "id": "err_nolog_apply_and_verify_patch_158",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/apply_and_verify_patch.py",
      "line_range": [
        158,
        163
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 158
      }
    },
    {
      "id": "err_nolog_apply_and_verify_patch_219",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/apply_and_verify_patch.py",
      "line_range": [
        219,
        224
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 219
      }
    },
    {
      "id": "err_bare_apply_and_verify_patch_283",
      "type": "error_handling",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/tools/apply_and_verify_patch.py",
      "line_range": [
        283,
        284
      ],
      "description": "Bare except clause catches all exceptions",
      "suggested_fix": "Specify exception types to catch",
      "impact_score": 0.8,
      "confidence": 1.0,
      "metadata": {
        "line": 283
      }
    },
    {
      "id": "err_bare_apply_and_verify_patch_304",
      "type": "error_handling",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/tools/apply_and_verify_patch.py",
      "line_range": [
        304,
        305
      ],
      "description": "Bare except clause catches all exceptions",
      "suggested_fix": "Specify exception types to catch",
      "impact_score": 0.8,
      "confidence": 1.0,
      "metadata": {
        "line": 304
      }
    },
    {
      "id": "err_bare_apply_and_verify_patch_319",
      "type": "error_handling",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/tools/apply_and_verify_patch.py",
      "line_range": [
        319,
        320
      ],
      "description": "Bare except clause catches all exceptions",
      "suggested_fix": "Specify exception types to catch",
      "impact_score": 0.8,
      "confidence": 1.0,
      "metadata": {
        "line": 319
      }
    },
    {
      "id": "long_handoff_context_read_23",
      "type": "readability",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/handoff_context_read.py",
      "line_range": [
        23,
        78
      ],
      "description": "Function 'run' is 55 lines (limit: 50)",
      "suggested_fix": "Break down into smaller, focused functions",
      "impact_score": 0.7,
      "confidence": 1.0,
      "metadata": {
        "function": "run",
        "length": 55
      }
    },
    {
      "id": "notest_handoff_context_read",
      "type": "testing",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/tools/handoff_context_read.py",
      "line_range": null,
      "description": "No test file found for handoff_context_read.py (1 functions)",
      "suggested_fix": "Create tests/test_handoff_context_read.py with comprehensive test coverage",
      "impact_score": 0.8,
      "confidence": 1.0,
      "metadata": {
        "functions": 1
      }
    },
    {
      "id": "nodoc_handoff_context_read_23",
      "type": "documentation",
      "severity": "low",
      "file_path": "/Users/am/Code/Agency/tools/handoff_context_read.py",
      "line_range": [
        23,
        24
      ],
      "description": "Missing docstring for function 'run'",
      "suggested_fix": "Add comprehensive docstring explaining purpose, parameters, and return value",
      "impact_score": 0.4,
      "confidence": 1.0,
      "metadata": {
        "item": "run",
        "type": "function"
      }
    },
    {
      "id": "complex_handoff_context_read_23",
      "type": "complexity",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/tools/handoff_context_read.py",
      "line_range": [
        23,
        78
      ],
      "description": "High complexity in 'run' (score: 24)",
      "suggested_fix": "Refactor to reduce cyclomatic complexity",
      "impact_score": 0.7,
      "confidence": 0.8,
      "metadata": {
        "function": "run",
        "complexity": 24
      }
    },
    {
      "id": "err_nolog_handoff_context_read_34",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/handoff_context_read.py",
      "line_range": [
        34,
        39
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 34
      }
    },
    {
      "id": "err_nolog_handoff_context_read_57",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/handoff_context_read.py",
      "line_range": [
        57,
        62
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 57
      }
    },
    {
      "id": "err_nolog_handoff_context_read_63",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/handoff_context_read.py",
      "line_range": [
        63,
        68
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 63
      }
    },
    {
      "id": "err_nolog_handoff_context_read_74",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/handoff_context_read.py",
      "line_range": [
        74,
        79
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 74
      }
    },
    {
      "id": "notest_glob",
      "type": "testing",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/tools/glob.py",
      "line_range": null,
      "description": "No test file found for glob.py (1 functions)",
      "suggested_fix": "Create tests/test_glob.py with comprehensive test coverage",
      "impact_score": 0.8,
      "confidence": 1.0,
      "metadata": {
        "functions": 1
      }
    },
    {
      "id": "nodoc_glob_24",
      "type": "documentation",
      "severity": "low",
      "file_path": "/Users/am/Code/Agency/tools/glob.py",
      "line_range": [
        24,
        25
      ],
      "description": "Missing docstring for function 'run'",
      "suggested_fix": "Add comprehensive docstring explaining purpose, parameters, and return value",
      "impact_score": 0.4,
      "confidence": 1.0,
      "metadata": {
        "item": "run",
        "type": "function"
      }
    },
    {
      "id": "complex_glob_75",
      "type": "complexity",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/glob.py",
      "line_range": [
        75,
        110
      ],
      "description": "High complexity in '_recursive_glob' (score: 12)",
      "suggested_fix": "Refactor to reduce cyclomatic complexity",
      "impact_score": 0.7,
      "confidence": 0.8,
      "metadata": {
        "function": "_recursive_glob",
        "complexity": 12
      }
    },
    {
      "id": "complex_glob_135",
      "type": "complexity",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/glob.py",
      "line_range": [
        135,
        182
      ],
      "description": "High complexity in '_match_path_pattern' (score: 13)",
      "suggested_fix": "Refactor to reduce cyclomatic complexity",
      "impact_score": 0.7,
      "confidence": 0.8,
      "metadata": {
        "function": "_match_path_pattern",
        "complexity": 13
      }
    },
    {
      "id": "err_nolog_glob_56",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/glob.py",
      "line_range": [
        56,
        61
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 56
      }
    },
    {
      "id": "err_nolog_glob_193",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/glob.py",
      "line_range": [
        193,
        198
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 193
      }
    },
    {
      "id": "err_nolog_glob_202",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/glob.py",
      "line_range": [
        202,
        207
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 202
      }
    },
    {
      "id": "notest_claude_web_search",
      "type": "testing",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/tools/claude_web_search.py",
      "line_range": null,
      "description": "No test file found for claude_web_search.py (1 functions)",
      "suggested_fix": "Create tests/test_claude_web_search.py with comprehensive test coverage",
      "impact_score": 0.8,
      "confidence": 1.0,
      "metadata": {
        "functions": 1
      }
    },
    {
      "id": "nodoc_claude_web_search_28",
      "type": "documentation",
      "severity": "low",
      "file_path": "/Users/am/Code/Agency/tools/claude_web_search.py",
      "line_range": [
        28,
        29
      ],
      "description": "Missing docstring for function 'run'",
      "suggested_fix": "Add comprehensive docstring explaining purpose, parameters, and return value",
      "impact_score": 0.4,
      "confidence": 1.0,
      "metadata": {
        "item": "run",
        "type": "function"
      }
    },
    {
      "id": "err_nolog_claude_web_search_57",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/claude_web_search.py",
      "line_range": [
        57,
        62
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 57
      }
    },
    {
      "id": "notest_context_handoff",
      "type": "testing",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/tools/context_handoff.py",
      "line_range": null,
      "description": "No test file found for context_handoff.py (1 functions)",
      "suggested_fix": "Create tests/test_context_handoff.py with comprehensive test coverage",
      "impact_score": 0.8,
      "confidence": 1.0,
      "metadata": {
        "functions": 1
      }
    },
    {
      "id": "nodoc_context_handoff_28",
      "type": "documentation",
      "severity": "low",
      "file_path": "/Users/am/Code/Agency/tools/context_handoff.py",
      "line_range": [
        28,
        29
      ],
      "description": "Missing docstring for function 'run'",
      "suggested_fix": "Add comprehensive docstring explaining purpose, parameters, and return value",
      "impact_score": 0.4,
      "confidence": 1.0,
      "metadata": {
        "item": "run",
        "type": "function"
      }
    },
    {
      "id": "complex_context_handoff_28",
      "type": "complexity",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/context_handoff.py",
      "line_range": [
        28,
        78
      ],
      "description": "High complexity in 'run' (score: 11)",
      "suggested_fix": "Refactor to reduce cyclomatic complexity",
      "impact_score": 0.7,
      "confidence": 0.8,
      "metadata": {
        "function": "run",
        "complexity": 11
      }
    },
    {
      "id": "err_nolog_context_handoff_57",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/context_handoff.py",
      "line_range": [
        57,
        62
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 57
      }
    },
    {
      "id": "long_auto_fix_nonetype_39",
      "type": "readability",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/auto_fix_nonetype.py",
      "line_range": [
        39,
        124
      ],
      "description": "Function 'run' is 85 lines (limit: 50)",
      "suggested_fix": "Break down into smaller, focused functions",
      "impact_score": 0.7,
      "confidence": 1.0,
      "metadata": {
        "function": "run",
        "length": 85
      }
    },
    {
      "id": "long_auto_fix_nonetype_124",
      "type": "readability",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/auto_fix_nonetype.py",
      "line_range": [
        124,
        220
      ],
      "description": "Function 'run' is 96 lines (limit: 50)",
      "suggested_fix": "Break down into smaller, focused functions",
      "impact_score": 0.7,
      "confidence": 1.0,
      "metadata": {
        "function": "run",
        "length": 96
      }
    },
    {
      "id": "long_auto_fix_nonetype_220",
      "type": "readability",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/auto_fix_nonetype.py",
      "line_range": [
        220,
        291
      ],
      "description": "Function 'run' is 71 lines (limit: 50)",
      "suggested_fix": "Break down into smaller, focused functions",
      "impact_score": 0.7,
      "confidence": 1.0,
      "metadata": {
        "function": "run",
        "length": 71
      }
    },
    {
      "id": "complex_auto_fix_nonetype_39",
      "type": "complexity",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/tools/auto_fix_nonetype.py",
      "line_range": [
        39,
        124
      ],
      "description": "High complexity in 'run' (score: 22)",
      "suggested_fix": "Refactor to reduce cyclomatic complexity",
      "impact_score": 0.7,
      "confidence": 0.8,
      "metadata": {
        "function": "run",
        "complexity": 22
      }
    },
    {
      "id": "complex_auto_fix_nonetype_124",
      "type": "complexity",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/tools/auto_fix_nonetype.py",
      "line_range": [
        124,
        220
      ],
      "description": "High complexity in 'run' (score: 23)",
      "suggested_fix": "Refactor to reduce cyclomatic complexity",
      "impact_score": 0.7,
      "confidence": 0.8,
      "metadata": {
        "function": "run",
        "complexity": 23
      }
    },
    {
      "id": "complex_auto_fix_nonetype_220",
      "type": "complexity",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/tools/auto_fix_nonetype.py",
      "line_range": [
        220,
        291
      ],
      "description": "High complexity in 'run' (score: 15)",
      "suggested_fix": "Refactor to reduce cyclomatic complexity",
      "impact_score": 0.7,
      "confidence": 0.8,
      "metadata": {
        "function": "run",
        "complexity": 15
      }
    },
    {
      "id": "err_bare_auto_fix_nonetype_129",
      "type": "error_handling",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/tools/auto_fix_nonetype.py",
      "line_range": [
        129,
        130
      ],
      "description": "Bare except clause catches all exceptions",
      "suggested_fix": "Specify exception types to catch",
      "impact_score": 0.8,
      "confidence": 1.0,
      "metadata": {
        "line": 129
      }
    },
    {
      "id": "err_bare_auto_fix_nonetype_229",
      "type": "error_handling",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/tools/auto_fix_nonetype.py",
      "line_range": [
        229,
        230
      ],
      "description": "Bare except clause catches all exceptions",
      "suggested_fix": "Specify exception types to catch",
      "impact_score": 0.8,
      "confidence": 1.0,
      "metadata": {
        "line": 229
      }
    },
    {
      "id": "err_bare_auto_fix_nonetype_239",
      "type": "error_handling",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/tools/auto_fix_nonetype.py",
      "line_range": [
        239,
        240
      ],
      "description": "Bare except clause catches all exceptions",
      "suggested_fix": "Specify exception types to catch",
      "impact_score": 0.8,
      "confidence": 1.0,
      "metadata": {
        "line": 239
      }
    },
    {
      "id": "err_nolog_auto_fix_nonetype_322",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/auto_fix_nonetype.py",
      "line_range": [
        322,
        327
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 322
      }
    },
    {
      "id": "err_nolog_auto_fix_nonetype_325",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/auto_fix_nonetype.py",
      "line_range": [
        325,
        330
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 325
      }
    },
    {
      "id": "notest_todo_write",
      "type": "testing",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/tools/todo_write.py",
      "line_range": null,
      "description": "No test file found for todo_write.py (1 functions)",
      "suggested_fix": "Create tests/test_todo_write.py with comprehensive test coverage",
      "impact_score": 0.8,
      "confidence": 1.0,
      "metadata": {
        "functions": 1
      }
    },
    {
      "id": "nodoc_todo_write_14",
      "type": "documentation",
      "severity": "low",
      "file_path": "/Users/am/Code/Agency/tools/todo_write.py",
      "line_range": [
        14,
        15
      ],
      "description": "Missing docstring for class 'TodoItem'",
      "suggested_fix": "Add comprehensive docstring explaining purpose, parameters, and return value",
      "impact_score": 0.4,
      "confidence": 1.0,
      "metadata": {
        "item": "TodoItem",
        "type": "class"
      }
    },
    {
      "id": "nodoc_todo_write_81",
      "type": "documentation",
      "severity": "low",
      "file_path": "/Users/am/Code/Agency/tools/todo_write.py",
      "line_range": [
        81,
        82
      ],
      "description": "Missing docstring for function 'run'",
      "suggested_fix": "Add comprehensive docstring explaining purpose, parameters, and return value",
      "impact_score": 0.4,
      "confidence": 1.0,
      "metadata": {
        "item": "run",
        "type": "function"
      }
    },
    {
      "id": "err_nolog_todo_write_153",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/todo_write.py",
      "line_range": [
        153,
        158
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 153
      }
    },
    {
      "id": "long_github_manager_10",
      "type": "readability",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/github_manager.py",
      "line_range": [
        10,
        61
      ],
      "description": "Function '_read_token_from_env_or_dotenv' is 51 lines (limit: 50)",
      "suggested_fix": "Break down into smaller, focused functions",
      "impact_score": 0.7,
      "confidence": 1.0,
      "metadata": {
        "function": "_read_token_from_env_or_dotenv",
        "length": 51
      }
    },
    {
      "id": "notest_github_manager",
      "type": "testing",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/tools/github_manager.py",
      "line_range": null,
      "description": "No test file found for github_manager.py (1 functions)",
      "suggested_fix": "Create tests/test_github_manager.py with comprehensive test coverage",
      "impact_score": 0.8,
      "confidence": 1.0,
      "metadata": {
        "functions": 1
      }
    },
    {
      "id": "nodoc_github_manager_136",
      "type": "documentation",
      "severity": "low",
      "file_path": "/Users/am/Code/Agency/tools/github_manager.py",
      "line_range": [
        136,
        137
      ],
      "description": "Missing docstring for function 'run'",
      "suggested_fix": "Add comprehensive docstring explaining purpose, parameters, and return value",
      "impact_score": 0.4,
      "confidence": 1.0,
      "metadata": {
        "item": "run",
        "type": "function"
      }
    },
    {
      "id": "complex_github_manager_10",
      "type": "complexity",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/github_manager.py",
      "line_range": [
        10,
        61
      ],
      "description": "High complexity in '_read_token_from_env_or_dotenv' (score: 14)",
      "suggested_fix": "Refactor to reduce cyclomatic complexity",
      "impact_score": 0.7,
      "confidence": 0.8,
      "metadata": {
        "function": "_read_token_from_env_or_dotenv",
        "complexity": 14
      }
    },
    {
      "id": "err_nolog_github_manager_27",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/github_manager.py",
      "line_range": [
        27,
        32
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 27
      }
    },
    {
      "id": "err_nolog_github_manager_166",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/github_manager.py",
      "line_range": [
        166,
        171
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 166
      }
    },
    {
      "id": "notest_notebook_edit",
      "type": "testing",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/tools/notebook_edit.py",
      "line_range": null,
      "description": "No test file found for notebook_edit.py (1 functions)",
      "suggested_fix": "Create tests/test_notebook_edit.py with comprehensive test coverage",
      "impact_score": 0.8,
      "confidence": 1.0,
      "metadata": {
        "functions": 1
      }
    },
    {
      "id": "nodoc_notebook_edit_41",
      "type": "documentation",
      "severity": "low",
      "file_path": "/Users/am/Code/Agency/tools/notebook_edit.py",
      "line_range": [
        41,
        42
      ],
      "description": "Missing docstring for function 'run'",
      "suggested_fix": "Add comprehensive docstring explaining purpose, parameters, and return value",
      "impact_score": 0.4,
      "confidence": 1.0,
      "metadata": {
        "item": "run",
        "type": "function"
      }
    },
    {
      "id": "complex_notebook_edit_41",
      "type": "complexity",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/tools/notebook_edit.py",
      "line_range": [
        41,
        87
      ],
      "description": "High complexity in 'run' (score: 19)",
      "suggested_fix": "Refactor to reduce cyclomatic complexity",
      "impact_score": 0.7,
      "confidence": 0.8,
      "metadata": {
        "function": "run",
        "complexity": 19
      }
    },
    {
      "id": "complex_notebook_edit_101",
      "type": "complexity",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/notebook_edit.py",
      "line_range": [
        101,
        144
      ],
      "description": "High complexity in '_insert_cell' (score: 11)",
      "suggested_fix": "Refactor to reduce cyclomatic complexity",
      "impact_score": 0.7,
      "confidence": 0.8,
      "metadata": {
        "function": "_insert_cell",
        "complexity": 11
      }
    },
    {
      "id": "complex_notebook_edit_169",
      "type": "complexity",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/notebook_edit.py",
      "line_range": [
        169,
        214
      ],
      "description": "High complexity in '_replace_cell' (score: 11)",
      "suggested_fix": "Refactor to reduce cyclomatic complexity",
      "impact_score": 0.7,
      "confidence": 0.8,
      "metadata": {
        "function": "_replace_cell",
        "complexity": 11
      }
    },
    {
      "id": "err_nolog_notebook_edit_65",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/notebook_edit.py",
      "line_range": [
        65,
        70
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 65
      }
    },
    {
      "id": "err_nolog_notebook_edit_84",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/notebook_edit.py",
      "line_range": [
        84,
        89
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 84
      }
    },
    {
      "id": "notest_read",
      "type": "testing",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/tools/read.py",
      "line_range": null,
      "description": "No test file found for read.py (1 functions)",
      "suggested_fix": "Create tests/test_read.py with comprehensive test coverage",
      "impact_score": 0.8,
      "confidence": 1.0,
      "metadata": {
        "functions": 1
      }
    },
    {
      "id": "nodoc_read_38",
      "type": "documentation",
      "severity": "low",
      "file_path": "/Users/am/Code/Agency/tools/read.py",
      "line_range": [
        38,
        39
      ],
      "description": "Missing docstring for function 'run'",
      "suggested_fix": "Add comprehensive docstring explaining purpose, parameters, and return value",
      "impact_score": 0.4,
      "confidence": 1.0,
      "metadata": {
        "item": "run",
        "type": "function"
      }
    },
    {
      "id": "err_nolog_read_120",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/read.py",
      "line_range": [
        120,
        125
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 120
      }
    },
    {
      "id": "notest_analyzer",
      "type": "testing",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/tools/codegen/analyzer.py",
      "line_range": null,
      "description": "No test file found for analyzer.py (4 functions)",
      "suggested_fix": "Create tests/test_analyzer.py with comprehensive test coverage",
      "impact_score": 0.8,
      "confidence": 1.0,
      "metadata": {
        "functions": 4
      }
    },
    {
      "id": "long_test_gen_20",
      "type": "readability",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/codegen/test_gen.py",
      "line_range": [
        20,
        91
      ],
      "description": "Function 'generate_tests_from_spec' is 71 lines (limit: 50)",
      "suggested_fix": "Break down into smaller, focused functions",
      "impact_score": 0.7,
      "confidence": 1.0,
      "metadata": {
        "function": "generate_tests_from_spec",
        "length": 71
      }
    },
    {
      "id": "complex_test_gen_20",
      "type": "complexity",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/codegen/test_gen.py",
      "line_range": [
        20,
        91
      ],
      "description": "High complexity in 'generate_tests_from_spec' (score: 11)",
      "suggested_fix": "Refactor to reduce cyclomatic complexity",
      "impact_score": 0.7,
      "confidence": 0.8,
      "metadata": {
        "function": "generate_tests_from_spec",
        "complexity": 11
      }
    },
    {
      "id": "long_scaffold_156",
      "type": "readability",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/codegen/scaffold.py",
      "line_range": [
        156,
        232
      ],
      "description": "Function 'scaffold_module' is 76 lines (limit: 50)",
      "suggested_fix": "Break down into smaller, focused functions",
      "impact_score": 0.7,
      "confidence": 1.0,
      "metadata": {
        "function": "scaffold_module",
        "length": 76
      }
    },
    {
      "id": "notest_scaffold",
      "type": "testing",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/tools/codegen/scaffold.py",
      "line_range": null,
      "description": "No test file found for scaffold.py (6 functions)",
      "suggested_fix": "Create tests/test_scaffold.py with comprehensive test coverage",
      "impact_score": 0.8,
      "confidence": 1.0,
      "metadata": {
        "functions": 6
      }
    },
    {
      "id": "const_dict_scaffold_238",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/tools/codegen/scaffold.py",
      "line_range": [
        238,
        239
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 238
      }
    },
    {
      "id": "notest_tail",
      "type": "testing",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/tools/agency_cli/tail.py",
      "line_range": null,
      "description": "No test file found for tail.py (1 functions)",
      "suggested_fix": "Create tests/test_tail.py with comprehensive test coverage",
      "impact_score": 0.8,
      "confidence": 1.0,
      "metadata": {
        "functions": 1
      }
    },
    {
      "id": "nodoc_tail_31",
      "type": "documentation",
      "severity": "low",
      "file_path": "/Users/am/Code/Agency/tools/agency_cli/tail.py",
      "line_range": [
        31,
        32
      ],
      "description": "Missing docstring for function 'main'",
      "suggested_fix": "Add comprehensive docstring explaining purpose, parameters, and return value",
      "impact_score": 0.4,
      "confidence": 1.0,
      "metadata": {
        "item": "main",
        "type": "function"
      }
    },
    {
      "id": "notest_dashboard",
      "type": "testing",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/tools/agency_cli/dashboard.py",
      "line_range": null,
      "description": "No test file found for dashboard.py (2 functions)",
      "suggested_fix": "Create tests/test_dashboard.py with comprehensive test coverage",
      "impact_score": 0.8,
      "confidence": 1.0,
      "metadata": {
        "functions": 2
      }
    },
    {
      "id": "nodoc_dashboard_73",
      "type": "documentation",
      "severity": "low",
      "file_path": "/Users/am/Code/Agency/tools/agency_cli/dashboard.py",
      "line_range": [
        73,
        74
      ],
      "description": "Missing docstring for function 'main'",
      "suggested_fix": "Add comprehensive docstring explaining purpose, parameters, and return value",
      "impact_score": 0.4,
      "confidence": 1.0,
      "metadata": {
        "item": "main",
        "type": "function"
      }
    },
    {
      "id": "nodoc_dashboard_83",
      "type": "documentation",
      "severity": "low",
      "file_path": "/Users/am/Code/Agency/tools/agency_cli/dashboard.py",
      "line_range": [
        83,
        84
      ],
      "description": "Missing docstring for function 'once'",
      "suggested_fix": "Add comprehensive docstring explaining purpose, parameters, and return value",
      "impact_score": 0.4,
      "confidence": 1.0,
      "metadata": {
        "item": "once",
        "type": "function"
      }
    },
    {
      "id": "err_nolog_dashboard_69",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/agency_cli/dashboard.py",
      "line_range": [
        69,
        74
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 69
      }
    },
    {
      "id": "const_dict_dashboard_18",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/tools/agency_cli/dashboard.py",
      "line_range": [
        18,
        19
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 18
      }
    },
    {
      "id": "notest_nav",
      "type": "testing",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/tools/agency_cli/nav.py",
      "line_range": null,
      "description": "No test file found for nav.py (7 functions)",
      "suggested_fix": "Create tests/test_nav.py with comprehensive test coverage",
      "impact_score": 0.8,
      "confidence": 1.0,
      "metadata": {
        "functions": 7
      }
    },
    {
      "id": "nodoc_nav_17",
      "type": "documentation",
      "severity": "low",
      "file_path": "/Users/am/Code/Agency/tools/agency_cli/nav.py",
      "line_range": [
        17,
        18
      ],
      "description": "Missing docstring for function 'list_dir'",
      "suggested_fix": "Add comprehensive docstring explaining purpose, parameters, and return value",
      "impact_score": 0.4,
      "confidence": 1.0,
      "metadata": {
        "item": "list_dir",
        "type": "function"
      }
    },
    {
      "id": "nodoc_nav_24",
      "type": "documentation",
      "severity": "low",
      "file_path": "/Users/am/Code/Agency/tools/agency_cli/nav.py",
      "line_range": [
        24,
        25
      ],
      "description": "Missing docstring for function 'print_tree'",
      "suggested_fix": "Add comprehensive docstring explaining purpose, parameters, and return value",
      "impact_score": 0.4,
      "confidence": 1.0,
      "metadata": {
        "item": "print_tree",
        "type": "function"
      }
    },
    {
      "id": "nodoc_nav_36",
      "type": "documentation",
      "severity": "low",
      "file_path": "/Users/am/Code/Agency/tools/agency_cli/nav.py",
      "line_range": [
        36,
        37
      ],
      "description": "Missing docstring for function 'open_file_segment'",
      "suggested_fix": "Add comprehensive docstring explaining purpose, parameters, and return value",
      "impact_score": 0.4,
      "confidence": 1.0,
      "metadata": {
        "item": "open_file_segment",
        "type": "function"
      }
    },
    {
      "id": "nodoc_nav_47",
      "type": "documentation",
      "severity": "low",
      "file_path": "/Users/am/Code/Agency/tools/agency_cli/nav.py",
      "line_range": [
        47,
        48
      ],
      "description": "Missing docstring for function 'grep_search'",
      "suggested_fix": "Add comprehensive docstring explaining purpose, parameters, and return value",
      "impact_score": 0.4,
      "confidence": 1.0,
      "metadata": {
        "item": "grep_search",
        "type": "function"
      }
    },
    {
      "id": "nodoc_nav_62",
      "type": "documentation",
      "severity": "low",
      "file_path": "/Users/am/Code/Agency/tools/agency_cli/nav.py",
      "line_range": [
        62,
        63
      ],
      "description": "Missing docstring for function 'find_files'",
      "suggested_fix": "Add comprehensive docstring explaining purpose, parameters, and return value",
      "impact_score": 0.4,
      "confidence": 1.0,
      "metadata": {
        "item": "find_files",
        "type": "function"
      }
    },
    {
      "id": "nodoc_nav_98",
      "type": "documentation",
      "severity": "low",
      "file_path": "/Users/am/Code/Agency/tools/agency_cli/nav.py",
      "line_range": [
        98,
        99
      ],
      "description": "Missing docstring for function 'find_references'",
      "suggested_fix": "Add comprehensive docstring explaining purpose, parameters, and return value",
      "impact_score": 0.4,
      "confidence": 1.0,
      "metadata": {
        "item": "find_references",
        "type": "function"
      }
    },
    {
      "id": "complex_nav_70",
      "type": "complexity",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/agency_cli/nav.py",
      "line_range": [
        70,
        98
      ],
      "description": "High complexity in '_extract_file' (score: 12)",
      "suggested_fix": "Refactor to reduce cyclomatic complexity",
      "impact_score": 0.7,
      "confidence": 0.8,
      "metadata": {
        "function": "_extract_file",
        "complexity": 12
      }
    },
    {
      "id": "err_nolog_nav_57",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/agency_cli/nav.py",
      "line_range": [
        57,
        62
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 57
      }
    },
    {
      "id": "err_nolog_nav_77",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/agency_cli/nav.py",
      "line_range": [
        77,
        82
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 77
      }
    },
    {
      "id": "err_nolog_nav_109",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/agency_cli/nav.py",
      "line_range": [
        109,
        114
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 109
      }
    },
    {
      "id": "long_self_healing_100",
      "type": "readability",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/agency_cli/self_healing.py",
      "line_range": [
        100,
        163
      ],
      "description": "Function 'cmd_triggers' is 63 lines (limit: 50)",
      "suggested_fix": "Break down into smaller, focused functions",
      "impact_score": 0.7,
      "confidence": 1.0,
      "metadata": {
        "function": "cmd_triggers",
        "length": 63
      }
    },
    {
      "id": "long_self_healing_163",
      "type": "readability",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/agency_cli/self_healing.py",
      "line_range": [
        163,
        229
      ],
      "description": "Function 'cmd_actions' is 66 lines (limit: 50)",
      "suggested_fix": "Break down into smaller, focused functions",
      "impact_score": 0.7,
      "confidence": 1.0,
      "metadata": {
        "function": "cmd_actions",
        "length": 66
      }
    },
    {
      "id": "notest_self_healing",
      "type": "testing",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/tools/agency_cli/self_healing.py",
      "line_range": null,
      "description": "No test file found for self_healing.py (11 functions)",
      "suggested_fix": "Create tests/test_self_healing.py with comprehensive test coverage",
      "impact_score": 0.8,
      "confidence": 1.0,
      "metadata": {
        "functions": 11
      }
    },
    {
      "id": "complex_self_healing_51",
      "type": "complexity",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/agency_cli/self_healing.py",
      "line_range": [
        51,
        100
      ],
      "description": "High complexity in 'cmd_status' (score: 12)",
      "suggested_fix": "Refactor to reduce cyclomatic complexity",
      "impact_score": 0.7,
      "confidence": 0.8,
      "metadata": {
        "function": "cmd_status",
        "complexity": 12
      }
    },
    {
      "id": "complex_self_healing_100",
      "type": "complexity",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/tools/agency_cli/self_healing.py",
      "line_range": [
        100,
        163
      ],
      "description": "High complexity in 'cmd_triggers' (score: 16)",
      "suggested_fix": "Refactor to reduce cyclomatic complexity",
      "impact_score": 0.7,
      "confidence": 0.8,
      "metadata": {
        "function": "cmd_triggers",
        "complexity": 16
      }
    },
    {
      "id": "complex_self_healing_163",
      "type": "complexity",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/agency_cli/self_healing.py",
      "line_range": [
        163,
        229
      ],
      "description": "High complexity in 'cmd_actions' (score: 12)",
      "suggested_fix": "Refactor to reduce cyclomatic complexity",
      "impact_score": 0.7,
      "confidence": 0.8,
      "metadata": {
        "function": "cmd_actions",
        "complexity": 12
      }
    },
    {
      "id": "complex_self_healing_229",
      "type": "complexity",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/agency_cli/self_healing.py",
      "line_range": [
        229,
        271
      ],
      "description": "High complexity in 'cmd_check' (score: 14)",
      "suggested_fix": "Refactor to reduce cyclomatic complexity",
      "impact_score": 0.7,
      "confidence": 0.8,
      "metadata": {
        "function": "cmd_check",
        "complexity": 14
      }
    },
    {
      "id": "err_nolog_self_healing_37",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/agency_cli/self_healing.py",
      "line_range": [
        37,
        42
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 37
      }
    },
    {
      "id": "notest_server",
      "type": "testing",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/tools/kanban/server.py",
      "line_range": null,
      "description": "No test file found for server.py (3 functions)",
      "suggested_fix": "Create tests/test_server.py with comprehensive test coverage",
      "impact_score": 0.8,
      "confidence": 1.0,
      "metadata": {
        "functions": 3
      }
    },
    {
      "id": "nodoc_server_20",
      "type": "documentation",
      "severity": "low",
      "file_path": "/Users/am/Code/Agency/tools/kanban/server.py",
      "line_range": [
        20,
        21
      ],
      "description": "Missing docstring for class 'KanbanHandler'",
      "suggested_fix": "Add comprehensive docstring explaining purpose, parameters, and return value",
      "impact_score": 0.4,
      "confidence": 1.0,
      "metadata": {
        "item": "KanbanHandler",
        "type": "class"
      }
    },
    {
      "id": "nodoc_server_21",
      "type": "documentation",
      "severity": "low",
      "file_path": "/Users/am/Code/Agency/tools/kanban/server.py",
      "line_range": [
        21,
        22
      ],
      "description": "Missing docstring for function 'do_GET'",
      "suggested_fix": "Add comprehensive docstring explaining purpose, parameters, and return value",
      "impact_score": 0.4,
      "confidence": 1.0,
      "metadata": {
        "item": "do_GET",
        "type": "function"
      }
    },
    {
      "id": "nodoc_server_37",
      "type": "documentation",
      "severity": "low",
      "file_path": "/Users/am/Code/Agency/tools/kanban/server.py",
      "line_range": [
        37,
        38
      ],
      "description": "Missing docstring for function 'translate_path'",
      "suggested_fix": "Add comprehensive docstring explaining purpose, parameters, and return value",
      "impact_score": 0.4,
      "confidence": 1.0,
      "metadata": {
        "item": "translate_path",
        "type": "function"
      }
    },
    {
      "id": "nodoc_server_73",
      "type": "documentation",
      "severity": "low",
      "file_path": "/Users/am/Code/Agency/tools/kanban/server.py",
      "line_range": [
        73,
        74
      ],
      "description": "Missing docstring for function 'run_server'",
      "suggested_fix": "Add comprehensive docstring explaining purpose, parameters, and return value",
      "impact_score": 0.4,
      "confidence": 1.0,
      "metadata": {
        "item": "run_server",
        "type": "function"
      }
    },
    {
      "id": "err_nolog_server_31",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/kanban/server.py",
      "line_range": [
        31,
        36
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 31
      }
    },
    {
      "id": "nodoc_runtime_hints_31",
      "type": "documentation",
      "severity": "low",
      "file_path": "/Users/am/Code/Agency/tools/kanban/runtime_hints.py",
      "line_range": [
        31,
        32
      ],
      "description": "Missing docstring for function 'apply_env_hints_from_registry'",
      "suggested_fix": "Add comprehensive docstring explaining purpose, parameters, and return value",
      "impact_score": 0.4,
      "confidence": 1.0,
      "metadata": {
        "item": "apply_env_hints_from_registry",
        "type": "function"
      }
    },
    {
      "id": "err_nolog_runtime_hints_49",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/kanban/runtime_hints.py",
      "line_range": [
        49,
        54
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 49
      }
    },
    {
      "id": "notest_untracked",
      "type": "testing",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/tools/kanban/untracked.py",
      "line_range": null,
      "description": "No test file found for untracked.py (1 functions)",
      "suggested_fix": "Create tests/test_untracked.py with comprehensive test coverage",
      "impact_score": 0.8,
      "confidence": 1.0,
      "metadata": {
        "functions": 1
      }
    },
    {
      "id": "nodoc_untracked_50",
      "type": "documentation",
      "severity": "low",
      "file_path": "/Users/am/Code/Agency/tools/kanban/untracked.py",
      "line_range": [
        50,
        51
      ],
      "description": "Missing docstring for function 'discover_untracked_cards'",
      "suggested_fix": "Add comprehensive docstring explaining purpose, parameters, and return value",
      "impact_score": 0.4,
      "confidence": 1.0,
      "metadata": {
        "item": "discover_untracked_cards",
        "type": "function"
      }
    },
    {
      "id": "err_nolog_untracked_36",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/kanban/untracked.py",
      "line_range": [
        36,
        41
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 36
      }
    },
    {
      "id": "err_nolog_untracked_46",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/kanban/untracked.py",
      "line_range": [
        46,
        51
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 46
      }
    },
    {
      "id": "err_nolog_untracked_73",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/kanban/untracked.py",
      "line_range": [
        73,
        78
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 73
      }
    },
    {
      "id": "notest_hints",
      "type": "testing",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/tools/kanban/hints.py",
      "line_range": null,
      "description": "No test file found for hints.py (5 functions)",
      "suggested_fix": "Create tests/test_hints.py with comprehensive test coverage",
      "impact_score": 0.8,
      "confidence": 1.0,
      "metadata": {
        "functions": 5
      }
    },
    {
      "id": "nodoc_hints_17",
      "type": "documentation",
      "severity": "low",
      "file_path": "/Users/am/Code/Agency/tools/kanban/hints.py",
      "line_range": [
        17,
        18
      ],
      "description": "Missing docstring for class 'Hint:'",
      "suggested_fix": "Add comprehensive docstring explaining purpose, parameters, and return value",
      "impact_score": 0.4,
      "confidence": 1.0,
      "metadata": {
        "item": "Hint:",
        "type": "class"
      }
    },
    {
      "id": "nodoc_hints_22",
      "type": "documentation",
      "severity": "low",
      "file_path": "/Users/am/Code/Agency/tools/kanban/hints.py",
      "line_range": [
        22,
        23
      ],
      "description": "Missing docstring for function 'to_dict'",
      "suggested_fix": "Add comprehensive docstring explaining purpose, parameters, and return value",
      "impact_score": 0.4,
      "confidence": 1.0,
      "metadata": {
        "item": "to_dict",
        "type": "function"
      }
    },
    {
      "id": "nodoc_hints_26",
      "type": "documentation",
      "severity": "low",
      "file_path": "/Users/am/Code/Agency/tools/kanban/hints.py",
      "line_range": [
        26,
        27
      ],
      "description": "Missing docstring for class 'LearningHintRegistry:'",
      "suggested_fix": "Add comprehensive docstring explaining purpose, parameters, and return value",
      "impact_score": 0.4,
      "confidence": 1.0,
      "metadata": {
        "item": "LearningHintRegistry:",
        "type": "class"
      }
    },
    {
      "id": "nodoc_hints_55",
      "type": "documentation",
      "severity": "low",
      "file_path": "/Users/am/Code/Agency/tools/kanban/hints.py",
      "line_range": [
        55,
        56
      ],
      "description": "Missing docstring for function 'register'",
      "suggested_fix": "Add comprehensive docstring explaining purpose, parameters, and return value",
      "impact_score": 0.4,
      "confidence": 1.0,
      "metadata": {
        "item": "register",
        "type": "function"
      }
    },
    {
      "id": "nodoc_hints_60",
      "type": "documentation",
      "severity": "low",
      "file_path": "/Users/am/Code/Agency/tools/kanban/hints.py",
      "line_range": [
        60,
        61
      ],
      "description": "Missing docstring for function 'all'",
      "suggested_fix": "Add comprehensive docstring explaining purpose, parameters, and return value",
      "impact_score": 0.4,
      "confidence": 1.0,
      "metadata": {
        "item": "all",
        "type": "function"
      }
    },
    {
      "id": "err_nolog_hints_43",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/kanban/hints.py",
      "line_range": [
        43,
        48
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 43
      }
    },
    {
      "id": "err_nolog_hints_52",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/kanban/hints.py",
      "line_range": [
        52,
        57
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 52
      }
    },
    {
      "id": "err_nolog_hints_78",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/kanban/hints.py",
      "line_range": [
        78,
        83
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 78
      }
    },
    {
      "id": "const_dict_hints_18",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/tools/kanban/hints.py",
      "line_range": [
        18,
        19
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 18
      }
    },
    {
      "id": "const_dict_hints_19",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/tools/kanban/hints.py",
      "line_range": [
        19,
        20
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 19
      }
    },
    {
      "id": "long_adapters_85",
      "type": "readability",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/kanban/adapters.py",
      "line_range": [
        85,
        157
      ],
      "description": "Function '_event_to_card' is 72 lines (limit: 50)",
      "suggested_fix": "Break down into smaller, focused functions",
      "impact_score": 0.7,
      "confidence": 1.0,
      "metadata": {
        "function": "_event_to_card",
        "length": 72
      }
    },
    {
      "id": "notest_adapters",
      "type": "testing",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/tools/kanban/adapters.py",
      "line_range": null,
      "description": "No test file found for adapters.py (3 functions)",
      "suggested_fix": "Create tests/test_adapters.py with comprehensive test coverage",
      "impact_score": 0.8,
      "confidence": 1.0,
      "metadata": {
        "functions": 3
      }
    },
    {
      "id": "nodoc_adapters_31",
      "type": "documentation",
      "severity": "low",
      "file_path": "/Users/am/Code/Agency/tools/kanban/adapters.py",
      "line_range": [
        31,
        32
      ],
      "description": "Missing docstring for class 'Card:'",
      "suggested_fix": "Add comprehensive docstring explaining purpose, parameters, and return value",
      "impact_score": 0.4,
      "confidence": 1.0,
      "metadata": {
        "item": "Card:",
        "type": "class"
      }
    },
    {
      "id": "nodoc_adapters_42",
      "type": "documentation",
      "severity": "low",
      "file_path": "/Users/am/Code/Agency/tools/kanban/adapters.py",
      "line_range": [
        42,
        43
      ],
      "description": "Missing docstring for function 'to_dict'",
      "suggested_fix": "Add comprehensive docstring explaining purpose, parameters, and return value",
      "impact_score": 0.4,
      "confidence": 1.0,
      "metadata": {
        "item": "to_dict",
        "type": "function"
      }
    },
    {
      "id": "nodoc_adapters_233",
      "type": "documentation",
      "severity": "low",
      "file_path": "/Users/am/Code/Agency/tools/kanban/adapters.py",
      "line_range": [
        233,
        234
      ],
      "description": "Missing docstring for function 'build_feed'",
      "suggested_fix": "Add comprehensive docstring explaining purpose, parameters, and return value",
      "impact_score": 0.4,
      "confidence": 1.0,
      "metadata": {
        "item": "build_feed",
        "type": "function"
      }
    },
    {
      "id": "complex_adapters_85",
      "type": "complexity",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/tools/kanban/adapters.py",
      "line_range": [
        85,
        157
      ],
      "description": "High complexity in '_event_to_card' (score: 16)",
      "suggested_fix": "Refactor to reduce cyclomatic complexity",
      "impact_score": 0.7,
      "confidence": 0.8,
      "metadata": {
        "function": "_event_to_card",
        "complexity": 16
      }
    },
    {
      "id": "complex_adapters_191",
      "type": "complexity",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/kanban/adapters.py",
      "line_range": [
        191,
        233
      ],
      "description": "High complexity in 'build_cards' (score: 14)",
      "suggested_fix": "Refactor to reduce cyclomatic complexity",
      "impact_score": 0.7,
      "confidence": 0.8,
      "metadata": {
        "function": "build_cards",
        "complexity": 14
      }
    },
    {
      "id": "err_nolog_adapters_18",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/kanban/adapters.py",
      "line_range": [
        18,
        23
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 18
      }
    },
    {
      "id": "err_nolog_adapters_24",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/kanban/adapters.py",
      "line_range": [
        24,
        29
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 24
      }
    },
    {
      "id": "err_nolog_adapters_64",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/kanban/adapters.py",
      "line_range": [
        64,
        69
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 64
      }
    },
    {
      "id": "err_nolog_adapters_170",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/kanban/adapters.py",
      "line_range": [
        170,
        175
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 170
      }
    },
    {
      "id": "err_nolog_adapters_186",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/kanban/adapters.py",
      "line_range": [
        186,
        191
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 186
      }
    },
    {
      "id": "err_nolog_adapters_209",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/kanban/adapters.py",
      "line_range": [
        209,
        214
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 209
      }
    },
    {
      "id": "err_nolog_adapters_221",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/kanban/adapters.py",
      "line_range": [
        221,
        226
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 221
      }
    },
    {
      "id": "err_nolog_adapters_227",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/kanban/adapters.py",
      "line_range": [
        227,
        232
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 227
      }
    },
    {
      "id": "const_dict_adapters_42",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/tools/kanban/adapters.py",
      "line_range": [
        42,
        43
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 42
      }
    },
    {
      "id": "const_dict_adapters_85",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/tools/kanban/adapters.py",
      "line_range": [
        85,
        86
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 85
      }
    },
    {
      "id": "const_dict_adapters_233",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/tools/kanban/adapters.py",
      "line_range": [
        233,
        234
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 233
      }
    },
    {
      "id": "long_enhanced_aggregator_113",
      "type": "readability",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/telemetry/enhanced_aggregator.py",
      "line_range": [
        113,
        172
      ],
      "description": "Function '_process_event_for_timeseries' is 59 lines (limit: 50)",
      "suggested_fix": "Break down into smaller, focused functions",
      "impact_score": 0.7,
      "confidence": 1.0,
      "metadata": {
        "function": "_process_event_for_timeseries",
        "length": 59
      }
    },
    {
      "id": "long_enhanced_aggregator_274",
      "type": "readability",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/telemetry/enhanced_aggregator.py",
      "line_range": [
        274,
        358
      ],
      "description": "Function '_analyze_trends' is 84 lines (limit: 50)",
      "suggested_fix": "Break down into smaller, focused functions",
      "impact_score": 0.7,
      "confidence": 1.0,
      "metadata": {
        "function": "_analyze_trends",
        "length": 84
      }
    },
    {
      "id": "long_enhanced_aggregator_378",
      "type": "readability",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/telemetry/enhanced_aggregator.py",
      "line_range": [
        378,
        429
      ],
      "description": "Function '_calculate_correlation' is 51 lines (limit: 50)",
      "suggested_fix": "Break down into smaller, focused functions",
      "impact_score": 0.7,
      "confidence": 1.0,
      "metadata": {
        "function": "_calculate_correlation",
        "length": 51
      }
    },
    {
      "id": "long_enhanced_aggregator_453",
      "type": "readability",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/telemetry/enhanced_aggregator.py",
      "line_range": [
        453,
        520
      ],
      "description": "Function '_detect_anomalies' is 67 lines (limit: 50)",
      "suggested_fix": "Break down into smaller, focused functions",
      "impact_score": 0.7,
      "confidence": 1.0,
      "metadata": {
        "function": "_detect_anomalies",
        "length": 67
      }
    },
    {
      "id": "notest_enhanced_aggregator",
      "type": "testing",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/tools/telemetry/enhanced_aggregator.py",
      "line_range": null,
      "description": "No test file found for enhanced_aggregator.py (4 functions)",
      "suggested_fix": "Create tests/test_enhanced_aggregator.py with comprehensive test coverage",
      "impact_score": 0.8,
      "confidence": 1.0,
      "metadata": {
        "functions": 4
      }
    },
    {
      "id": "complex_enhanced_aggregator_113",
      "type": "complexity",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/tools/telemetry/enhanced_aggregator.py",
      "line_range": [
        113,
        172
      ],
      "description": "High complexity in '_process_event_for_timeseries' (score: 16)",
      "suggested_fix": "Refactor to reduce cyclomatic complexity",
      "impact_score": 0.7,
      "confidence": 0.8,
      "metadata": {
        "function": "_process_event_for_timeseries",
        "complexity": 16
      }
    },
    {
      "id": "complex_enhanced_aggregator_274",
      "type": "complexity",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/tools/telemetry/enhanced_aggregator.py",
      "line_range": [
        274,
        358
      ],
      "description": "High complexity in '_analyze_trends' (score: 22)",
      "suggested_fix": "Refactor to reduce cyclomatic complexity",
      "impact_score": 0.7,
      "confidence": 0.8,
      "metadata": {
        "function": "_analyze_trends",
        "complexity": 22
      }
    },
    {
      "id": "complex_enhanced_aggregator_378",
      "type": "complexity",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/tools/telemetry/enhanced_aggregator.py",
      "line_range": [
        378,
        429
      ],
      "description": "High complexity in '_calculate_correlation' (score: 15)",
      "suggested_fix": "Refactor to reduce cyclomatic complexity",
      "impact_score": 0.7,
      "confidence": 0.8,
      "metadata": {
        "function": "_calculate_correlation",
        "complexity": 15
      }
    },
    {
      "id": "complex_enhanced_aggregator_453",
      "type": "complexity",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/tools/telemetry/enhanced_aggregator.py",
      "line_range": [
        453,
        520
      ],
      "description": "High complexity in '_detect_anomalies' (score: 15)",
      "suggested_fix": "Refactor to reduce cyclomatic complexity",
      "impact_score": 0.7,
      "confidence": 0.8,
      "metadata": {
        "function": "_detect_anomalies",
        "complexity": 15
      }
    },
    {
      "id": "complex_enhanced_aggregator_540",
      "type": "complexity",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/telemetry/enhanced_aggregator.py",
      "line_range": [
        540,
        587
      ],
      "description": "High complexity in '_assess_data_quality' (score: 12)",
      "suggested_fix": "Refactor to reduce cyclomatic complexity",
      "impact_score": 0.7,
      "confidence": 0.8,
      "metadata": {
        "function": "_assess_data_quality",
        "complexity": 12
      }
    },
    {
      "id": "perf_enhanced_aggregator_665",
      "type": "performance",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/telemetry/enhanced_aggregator.py",
      "line_range": [
        665,
        666
      ],
      "description": "Performance issue: in range(len(",
      "suggested_fix": "Use enumerate() instead of range(len())",
      "impact_score": 0.6,
      "confidence": 0.7,
      "metadata": {
        "pattern": "in range(len(",
        "line": 665
      }
    },
    {
      "id": "perf_enhanced_aggregator_671",
      "type": "performance",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/telemetry/enhanced_aggregator.py",
      "line_range": [
        671,
        672
      ],
      "description": "Performance issue: in range(len(",
      "suggested_fix": "Use enumerate() instead of range(len())",
      "impact_score": 0.6,
      "confidence": 0.7,
      "metadata": {
        "pattern": "in range(len(",
        "line": 671
      }
    },
    {
      "id": "arch_god_enhanced_aggregator_EnhancedTelemetryAggregator:",
      "type": "architecture",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/tools/telemetry/enhanced_aggregator.py",
      "line_range": null,
      "description": "God class 'EnhancedTelemetryAggregator:' has 22 methods",
      "suggested_fix": "Consider splitting into smaller, focused classes",
      "impact_score": 0.8,
      "confidence": 0.9,
      "metadata": {
        "class": "EnhancedTelemetryAggregator:",
        "methods": 22
      }
    },
    {
      "id": "err_nolog_enhanced_aggregator_168",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/telemetry/enhanced_aggregator.py",
      "line_range": [
        168,
        173
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 168
      }
    },
    {
      "id": "err_nolog_enhanced_aggregator_270",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/telemetry/enhanced_aggregator.py",
      "line_range": [
        270,
        275
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 270
      }
    },
    {
      "id": "err_nolog_enhanced_aggregator_352",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/telemetry/enhanced_aggregator.py",
      "line_range": [
        352,
        357
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 352
      }
    },
    {
      "id": "err_nolog_enhanced_aggregator_373",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/telemetry/enhanced_aggregator.py",
      "line_range": [
        373,
        378
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 373
      }
    },
    {
      "id": "err_nolog_enhanced_aggregator_426",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/telemetry/enhanced_aggregator.py",
      "line_range": [
        426,
        431
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 426
      }
    },
    {
      "id": "err_nolog_enhanced_aggregator_515",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/telemetry/enhanced_aggregator.py",
      "line_range": [
        515,
        520
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 515
      }
    },
    {
      "id": "const_dict_enhanced_aggregator_32",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/tools/telemetry/enhanced_aggregator.py",
      "line_range": [
        32,
        33
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 32
      }
    },
    {
      "id": "const_dict_enhanced_aggregator_86",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/tools/telemetry/enhanced_aggregator.py",
      "line_range": [
        86,
        87
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 86
      }
    },
    {
      "id": "const_dict_enhanced_aggregator_87",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/tools/telemetry/enhanced_aggregator.py",
      "line_range": [
        87,
        88
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 87
      }
    },
    {
      "id": "const_dict_enhanced_aggregator_88",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/tools/telemetry/enhanced_aggregator.py",
      "line_range": [
        88,
        89
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 88
      }
    },
    {
      "id": "const_dict_enhanced_aggregator_113",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/tools/telemetry/enhanced_aggregator.py",
      "line_range": [
        113,
        114
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 113
      }
    },
    {
      "id": "const_dict_enhanced_aggregator_184",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/tools/telemetry/enhanced_aggregator.py",
      "line_range": [
        184,
        185
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 184
      }
    },
    {
      "id": "const_dict_enhanced_aggregator_520",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/tools/telemetry/enhanced_aggregator.py",
      "line_range": [
        520,
        521
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 520
      }
    },
    {
      "id": "const_dict_enhanced_aggregator_540",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/tools/telemetry/enhanced_aggregator.py",
      "line_range": [
        540,
        541
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 540
      }
    },
    {
      "id": "const_dict_enhanced_aggregator_637",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/tools/telemetry/enhanced_aggregator.py",
      "line_range": [
        637,
        638
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 637
      }
    },
    {
      "id": "const_dict_enhanced_aggregator_675",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/tools/telemetry/enhanced_aggregator.py",
      "line_range": [
        675,
        676
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 675
      }
    },
    {
      "id": "const_dict_enhanced_aggregator_688",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/tools/telemetry/enhanced_aggregator.py",
      "line_range": [
        688,
        689
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 688
      }
    },
    {
      "id": "const_dict_enhanced_aggregator_700",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/tools/telemetry/enhanced_aggregator.py",
      "line_range": [
        700,
        701
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 700
      }
    },
    {
      "id": "const_dict_enhanced_aggregator_718",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/tools/telemetry/enhanced_aggregator.py",
      "line_range": [
        718,
        719
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 718
      }
    },
    {
      "id": "notest_aggregator",
      "type": "testing",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/tools/telemetry/aggregator.py",
      "line_range": null,
      "description": "No test file found for aggregator.py (2 functions)",
      "suggested_fix": "Create tests/test_aggregator.py with comprehensive test coverage",
      "impact_score": 0.8,
      "confidence": 1.0,
      "metadata": {
        "functions": 2
      }
    },
    {
      "id": "complex_aggregator_83",
      "type": "complexity",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/tools/telemetry/aggregator.py",
      "line_range": [
        83,
        127
      ],
      "description": "High complexity in '_load_events' (score: 16)",
      "suggested_fix": "Refactor to reduce cyclomatic complexity",
      "impact_score": 0.7,
      "confidence": 0.8,
      "metadata": {
        "function": "_load_events",
        "complexity": 16
      }
    },
    {
      "id": "err_nolog_aggregator_46",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/telemetry/aggregator.py",
      "line_range": [
        46,
        51
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 46
      }
    },
    {
      "id": "err_nolog_aggregator_67",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/telemetry/aggregator.py",
      "line_range": [
        67,
        72
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 67
      }
    },
    {
      "id": "err_nolog_aggregator_96",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/telemetry/aggregator.py",
      "line_range": [
        96,
        101
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 96
      }
    },
    {
      "id": "err_nolog_aggregator_111",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/telemetry/aggregator.py",
      "line_range": [
        111,
        116
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 111
      }
    },
    {
      "id": "err_nolog_aggregator_147",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/telemetry/aggregator.py",
      "line_range": [
        147,
        152
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 147
      }
    },
    {
      "id": "err_nolog_aggregator_216",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/telemetry/aggregator.py",
      "line_range": [
        216,
        221
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 216
      }
    },
    {
      "id": "err_nolog_aggregator_252",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/telemetry/aggregator.py",
      "line_range": [
        252,
        257
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 252
      }
    },
    {
      "id": "err_nolog_aggregator_259",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/telemetry/aggregator.py",
      "line_range": [
        259,
        264
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 259
      }
    },
    {
      "id": "err_nolog_aggregator_288",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/telemetry/aggregator.py",
      "line_range": [
        288,
        293
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 288
      }
    },
    {
      "id": "const_dict_aggregator_160",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/tools/telemetry/aggregator.py",
      "line_range": [
        160,
        161
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 160
      }
    },
    {
      "id": "const_dict_aggregator_184",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/tools/telemetry/aggregator.py",
      "line_range": [
        184,
        185
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 184
      }
    },
    {
      "id": "const_dict_aggregator_292",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/tools/telemetry/aggregator.py",
      "line_range": [
        292,
        293
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 292
      }
    },
    {
      "id": "long_aggregator_enterprise_148",
      "type": "readability",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/tools/telemetry/aggregator_enterprise.py",
      "line_range": [
        148,
        326
      ],
      "description": "Function 'aggregate' is 178 lines (limit: 50)",
      "suggested_fix": "Break down into smaller, focused functions",
      "impact_score": 0.7,
      "confidence": 1.0,
      "metadata": {
        "function": "aggregate",
        "length": 178
      }
    },
    {
      "id": "notest_aggregator_enterprise",
      "type": "testing",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/tools/telemetry/aggregator_enterprise.py",
      "line_range": null,
      "description": "No test file found for aggregator_enterprise.py (3 functions)",
      "suggested_fix": "Create tests/test_aggregator_enterprise.py with comprehensive test coverage",
      "impact_score": 0.8,
      "confidence": 1.0,
      "metadata": {
        "functions": 3
      }
    },
    {
      "id": "nodoc_aggregator_enterprise_148",
      "type": "documentation",
      "severity": "low",
      "file_path": "/Users/am/Code/Agency/tools/telemetry/aggregator_enterprise.py",
      "line_range": [
        148,
        149
      ],
      "description": "Missing docstring for function 'aggregate'",
      "suggested_fix": "Add comprehensive docstring explaining purpose, parameters, and return value",
      "impact_score": 0.4,
      "confidence": 1.0,
      "metadata": {
        "item": "aggregate",
        "type": "function"
      }
    },
    {
      "id": "nodoc_aggregator_enterprise_326",
      "type": "documentation",
      "severity": "low",
      "file_path": "/Users/am/Code/Agency/tools/telemetry/aggregator_enterprise.py",
      "line_range": [
        326,
        327
      ],
      "description": "Missing docstring for function 'list_events'",
      "suggested_fix": "Add comprehensive docstring explaining purpose, parameters, and return value",
      "impact_score": 0.4,
      "confidence": 1.0,
      "metadata": {
        "item": "list_events",
        "type": "function"
      }
    },
    {
      "id": "nodoc_aggregator_enterprise_369",
      "type": "documentation",
      "severity": "low",
      "file_path": "/Users/am/Code/Agency/tools/telemetry/aggregator_enterprise.py",
      "line_range": [
        369,
        370
      ],
      "description": "Missing docstring for function 'aggregate_basic'",
      "suggested_fix": "Add comprehensive docstring explaining purpose, parameters, and return value",
      "impact_score": 0.4,
      "confidence": 1.0,
      "metadata": {
        "item": "aggregate_basic",
        "type": "function"
      }
    },
    {
      "id": "complex_aggregator_enterprise_22",
      "type": "complexity",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/telemetry/aggregator_enterprise.py",
      "line_range": [
        22,
        52
      ],
      "description": "High complexity in '_parse_since' (score: 13)",
      "suggested_fix": "Refactor to reduce cyclomatic complexity",
      "impact_score": 0.7,
      "confidence": 0.8,
      "metadata": {
        "function": "_parse_since",
        "complexity": 13
      }
    },
    {
      "id": "complex_aggregator_enterprise_88",
      "type": "complexity",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/telemetry/aggregator_enterprise.py",
      "line_range": [
        88,
        113
      ],
      "description": "High complexity in '_load_events_since' (score: 12)",
      "suggested_fix": "Refactor to reduce cyclomatic complexity",
      "impact_score": 0.7,
      "confidence": 0.8,
      "metadata": {
        "function": "_load_events_since",
        "complexity": 12
      }
    },
    {
      "id": "complex_aggregator_enterprise_148",
      "type": "complexity",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/tools/telemetry/aggregator_enterprise.py",
      "line_range": [
        148,
        326
      ],
      "description": "High complexity in 'aggregate' (score: 32)",
      "suggested_fix": "Refactor to reduce cyclomatic complexity",
      "impact_score": 0.7,
      "confidence": 0.8,
      "metadata": {
        "function": "aggregate",
        "complexity": 32
      }
    },
    {
      "id": "complex_aggregator_enterprise_326",
      "type": "complexity",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/telemetry/aggregator_enterprise.py",
      "line_range": [
        326,
        369
      ],
      "description": "High complexity in 'list_events' (score: 14)",
      "suggested_fix": "Refactor to reduce cyclomatic complexity",
      "impact_score": 0.7,
      "confidence": 0.8,
      "metadata": {
        "function": "list_events",
        "complexity": 14
      }
    },
    {
      "id": "err_nolog_aggregator_enterprise_30",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/telemetry/aggregator_enterprise.py",
      "line_range": [
        30,
        35
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 30
      }
    },
    {
      "id": "err_nolog_aggregator_enterprise_36",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/telemetry/aggregator_enterprise.py",
      "line_range": [
        36,
        41
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 36
      }
    },
    {
      "id": "err_nolog_aggregator_enterprise_42",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/telemetry/aggregator_enterprise.py",
      "line_range": [
        42,
        47
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 42
      }
    },
    {
      "id": "err_nolog_aggregator_enterprise_48",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/telemetry/aggregator_enterprise.py",
      "line_range": [
        48,
        53
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 48
      }
    },
    {
      "id": "err_nolog_aggregator_enterprise_67",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/telemetry/aggregator_enterprise.py",
      "line_range": [
        67,
        72
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 67
      }
    },
    {
      "id": "err_nolog_aggregator_enterprise_98",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/telemetry/aggregator_enterprise.py",
      "line_range": [
        98,
        103
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 98
      }
    },
    {
      "id": "err_nolog_aggregator_enterprise_108",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/telemetry/aggregator_enterprise.py",
      "line_range": [
        108,
        113
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 108
      }
    },
    {
      "id": "err_nolog_aggregator_enterprise_119",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/telemetry/aggregator_enterprise.py",
      "line_range": [
        119,
        124
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 119
      }
    },
    {
      "id": "err_nolog_aggregator_enterprise_144",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/telemetry/aggregator_enterprise.py",
      "line_range": [
        144,
        149
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 144
      }
    },
    {
      "id": "err_nolog_aggregator_enterprise_214",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/telemetry/aggregator_enterprise.py",
      "line_range": [
        214,
        219
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 214
      }
    },
    {
      "id": "err_nolog_aggregator_enterprise_236",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/telemetry/aggregator_enterprise.py",
      "line_range": [
        236,
        241
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 236
      }
    },
    {
      "id": "const_dict_aggregator_enterprise_113",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/tools/telemetry/aggregator_enterprise.py",
      "line_range": [
        113,
        114
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 113
      }
    },
    {
      "id": "const_dict_aggregator_enterprise_123",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/tools/telemetry/aggregator_enterprise.py",
      "line_range": [
        123,
        124
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 123
      }
    },
    {
      "id": "const_dict_aggregator_enterprise_153",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/tools/telemetry/aggregator_enterprise.py",
      "line_range": [
        153,
        154
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 153
      }
    },
    {
      "id": "const_dict_aggregator_enterprise_168",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/tools/telemetry/aggregator_enterprise.py",
      "line_range": [
        168,
        169
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 168
      }
    },
    {
      "id": "const_dict_aggregator_enterprise_169",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/tools/telemetry/aggregator_enterprise.py",
      "line_range": [
        169,
        170
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 169
      }
    },
    {
      "id": "const_dict_aggregator_enterprise_170",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/tools/telemetry/aggregator_enterprise.py",
      "line_range": [
        170,
        171
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 170
      }
    },
    {
      "id": "const_dict_aggregator_enterprise_177",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/tools/telemetry/aggregator_enterprise.py",
      "line_range": [
        177,
        178
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 177
      }
    },
    {
      "id": "const_dict_aggregator_enterprise_178",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/tools/telemetry/aggregator_enterprise.py",
      "line_range": [
        178,
        179
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 178
      }
    },
    {
      "id": "const_dict_aggregator_enterprise_369",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/tools/telemetry/aggregator_enterprise.py",
      "line_range": [
        369,
        370
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 369
      }
    },
    {
      "id": "const_dict_aggregator_enterprise_370",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/tools/telemetry/aggregator_enterprise.py",
      "line_range": [
        370,
        371
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 370
      }
    },
    {
      "id": "notest_sanitize",
      "type": "testing",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/tools/telemetry/sanitize.py",
      "line_range": null,
      "description": "No test file found for sanitize.py (1 functions)",
      "suggested_fix": "Create tests/test_sanitize.py with comprehensive test coverage",
      "impact_score": 0.8,
      "confidence": 1.0,
      "metadata": {
        "functions": 1
      }
    },
    {
      "id": "const_dict_sanitize_49",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/tools/telemetry/sanitize.py",
      "line_range": [
        49,
        50
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 49
      }
    },
    {
      "id": "const_dict_sanitize_63",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/tools/telemetry/sanitize.py",
      "line_range": [
        63,
        64
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 63
      }
    },
    {
      "id": "notest_graph",
      "type": "testing",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/tools/orchestrator/graph.py",
      "line_range": null,
      "description": "No test file found for graph.py (1 functions)",
      "suggested_fix": "Create tests/test_graph.py with comprehensive test coverage",
      "impact_score": 0.8,
      "confidence": 1.0,
      "metadata": {
        "functions": 1
      }
    },
    {
      "id": "nodoc_graph_13",
      "type": "documentation",
      "severity": "low",
      "file_path": "/Users/am/Code/Agency/tools/orchestrator/graph.py",
      "line_range": [
        13,
        14
      ],
      "description": "Missing docstring for class 'TaskGraph:'",
      "suggested_fix": "Add comprehensive docstring explaining purpose, parameters, and return value",
      "impact_score": 0.4,
      "confidence": 1.0,
      "metadata": {
        "item": "TaskGraph:",
        "type": "class"
      }
    },
    {
      "id": "nodoc_graph_17",
      "type": "documentation",
      "severity": "low",
      "file_path": "/Users/am/Code/Agency/tools/orchestrator/graph.py",
      "line_range": [
        17,
        18
      ],
      "description": "Missing docstring for function 'topo_order'",
      "suggested_fix": "Add comprehensive docstring explaining purpose, parameters, and return value",
      "impact_score": 0.4,
      "confidence": 1.0,
      "metadata": {
        "item": "topo_order",
        "type": "function"
      }
    },
    {
      "id": "complex_graph_17",
      "type": "complexity",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/orchestrator/graph.py",
      "line_range": [
        17,
        54
      ],
      "description": "High complexity in 'topo_order' (score: 12)",
      "suggested_fix": "Refactor to reduce cyclomatic complexity",
      "impact_score": 0.7,
      "confidence": 0.8,
      "metadata": {
        "function": "topo_order",
        "complexity": 12
      }
    },
    {
      "id": "const_dict_graph_14",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/tools/orchestrator/graph.py",
      "line_range": [
        14,
        15
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 14
      }
    },
    {
      "id": "const_dict_graph_18",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/tools/orchestrator/graph.py",
      "line_range": [
        18,
        19
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 18
      }
    },
    {
      "id": "const_dict_graph_40",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/tools/orchestrator/graph.py",
      "line_range": [
        40,
        41
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 40
      }
    },
    {
      "id": "const_dict_graph_55",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/tools/orchestrator/graph.py",
      "line_range": [
        55,
        56
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 55
      }
    },
    {
      "id": "const_dict_graph_56",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/tools/orchestrator/graph.py",
      "line_range": [
        56,
        57
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 56
      }
    },
    {
      "id": "long_scheduler_25",
      "type": "readability",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/orchestrator/scheduler.py",
      "line_range": [
        25,
        102
      ],
      "description": "Function '_telemetry_emit' is 77 lines (limit: 50)",
      "suggested_fix": "Break down into smaller, focused functions",
      "impact_score": 0.7,
      "confidence": 1.0,
      "metadata": {
        "function": "_telemetry_emit",
        "length": 77
      }
    },
    {
      "id": "long_scheduler_102",
      "type": "readability",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/tools/orchestrator/scheduler.py",
      "line_range": [
        102,
        311
      ],
      "description": "Function '__init__' is 209 lines (limit: 50)",
      "suggested_fix": "Break down into smaller, focused functions",
      "impact_score": 0.7,
      "confidence": 1.0,
      "metadata": {
        "function": "__init__",
        "length": 209
      }
    },
    {
      "id": "nodoc_scheduler_57",
      "type": "documentation",
      "severity": "low",
      "file_path": "/Users/am/Code/Agency/tools/orchestrator/scheduler.py",
      "line_range": [
        57,
        58
      ],
      "description": "Missing docstring for class 'RetryPolicy:'",
      "suggested_fix": "Add comprehensive docstring explaining purpose, parameters, and return value",
      "impact_score": 0.4,
      "confidence": 1.0,
      "metadata": {
        "item": "RetryPolicy:",
        "type": "class"
      }
    },
    {
      "id": "nodoc_scheduler_65",
      "type": "documentation",
      "severity": "low",
      "file_path": "/Users/am/Code/Agency/tools/orchestrator/scheduler.py",
      "line_range": [
        65,
        66
      ],
      "description": "Missing docstring for class 'OrchestrationPolicy:'",
      "suggested_fix": "Add comprehensive docstring explaining purpose, parameters, and return value",
      "impact_score": 0.4,
      "confidence": 1.0,
      "metadata": {
        "item": "OrchestrationPolicy:",
        "type": "class"
      }
    },
    {
      "id": "nodoc_scheduler_75",
      "type": "documentation",
      "severity": "low",
      "file_path": "/Users/am/Code/Agency/tools/orchestrator/scheduler.py",
      "line_range": [
        75,
        76
      ],
      "description": "Missing docstring for class 'TaskSpec:'",
      "suggested_fix": "Add comprehensive docstring explaining purpose, parameters, and return value",
      "impact_score": 0.4,
      "confidence": 1.0,
      "metadata": {
        "item": "TaskSpec:",
        "type": "class"
      }
    },
    {
      "id": "nodoc_scheduler_83",
      "type": "documentation",
      "severity": "low",
      "file_path": "/Users/am/Code/Agency/tools/orchestrator/scheduler.py",
      "line_range": [
        83,
        84
      ],
      "description": "Missing docstring for class 'TaskResult:'",
      "suggested_fix": "Add comprehensive docstring explaining purpose, parameters, and return value",
      "impact_score": 0.4,
      "confidence": 1.0,
      "metadata": {
        "item": "TaskResult:",
        "type": "class"
      }
    },
    {
      "id": "nodoc_scheduler_95",
      "type": "documentation",
      "severity": "low",
      "file_path": "/Users/am/Code/Agency/tools/orchestrator/scheduler.py",
      "line_range": [
        95,
        96
      ],
      "description": "Missing docstring for class 'OrchestrationResult:'",
      "suggested_fix": "Add comprehensive docstring explaining purpose, parameters, and return value",
      "impact_score": 0.4,
      "confidence": 1.0,
      "metadata": {
        "item": "OrchestrationResult:",
        "type": "class"
      }
    },
    {
      "id": "complex_scheduler_102",
      "type": "complexity",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/tools/orchestrator/scheduler.py",
      "line_range": [
        102,
        311
      ],
      "description": "High complexity in '__init__' (score: 31)",
      "suggested_fix": "Refactor to reduce cyclomatic complexity",
      "impact_score": 0.7,
      "confidence": 0.8,
      "metadata": {
        "function": "__init__",
        "complexity": 31
      }
    },
    {
      "id": "err_nolog_scheduler_46",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/orchestrator/scheduler.py",
      "line_range": [
        46,
        51
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 46
      }
    },
    {
      "id": "err_nolog_scheduler_51",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/orchestrator/scheduler.py",
      "line_range": [
        51,
        56
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 51
      }
    },
    {
      "id": "err_nolog_scheduler_146",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/orchestrator/scheduler.py",
      "line_range": [
        146,
        151
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 146
      }
    },
    {
      "id": "err_nolog_scheduler_271",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/orchestrator/scheduler.py",
      "line_range": [
        271,
        276
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 271
      }
    },
    {
      "id": "err_nolog_scheduler_308",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/tools/orchestrator/scheduler.py",
      "line_range": [
        308,
        313
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 308
      }
    },
    {
      "id": "const_dict_scheduler_25",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/tools/orchestrator/scheduler.py",
      "line_range": [
        25,
        26
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 25
      }
    },
    {
      "id": "const_dict_scheduler_97",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/tools/orchestrator/scheduler.py",
      "line_range": [
        97,
        98
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 97
      }
    },
    {
      "id": "const_dict_scheduler_98",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/tools/orchestrator/scheduler.py",
      "line_range": [
        98,
        99
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 98
      }
    },
    {
      "id": "const_dict_scheduler_171",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/tools/orchestrator/scheduler.py",
      "line_range": [
        171,
        172
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 171
      }
    },
    {
      "id": "const_dict_scheduler_219",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/tools/orchestrator/scheduler.py",
      "line_range": [
        219,
        220
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 219
      }
    },
    {
      "id": "long_pattern_store_99",
      "type": "readability",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/pattern_intelligence/pattern_store.py",
      "line_range": [
        99,
        194
      ],
      "description": "Function 'find_patterns' is 95 lines (limit: 50)",
      "suggested_fix": "Break down into smaller, focused functions",
      "impact_score": 0.7,
      "confidence": 1.0,
      "metadata": {
        "function": "find_patterns",
        "length": 95
      }
    },
    {
      "id": "notest_pattern_store",
      "type": "testing",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/pattern_intelligence/pattern_store.py",
      "line_range": null,
      "description": "No test file found for pattern_store.py (10 functions)",
      "suggested_fix": "Create tests/test_pattern_store.py with comprehensive test coverage",
      "impact_score": 0.8,
      "confidence": 1.0,
      "metadata": {
        "functions": 10
      }
    },
    {
      "id": "nodoc_pattern_store_99",
      "type": "documentation",
      "severity": "low",
      "file_path": "/Users/am/Code/Agency/pattern_intelligence/pattern_store.py",
      "line_range": [
        99,
        100
      ],
      "description": "Missing docstring for function 'find_patterns'",
      "suggested_fix": "Add comprehensive docstring explaining purpose, parameters, and return value",
      "impact_score": 0.4,
      "confidence": 1.0,
      "metadata": {
        "item": "find_patterns",
        "type": "function"
      }
    },
    {
      "id": "complex_pattern_store_99",
      "type": "complexity",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/pattern_intelligence/pattern_store.py",
      "line_range": [
        99,
        194
      ],
      "description": "High complexity in 'find_patterns' (score: 21)",
      "suggested_fix": "Refactor to reduce cyclomatic complexity",
      "impact_score": 0.7,
      "confidence": 0.8,
      "metadata": {
        "function": "find_patterns",
        "complexity": 21
      }
    },
    {
      "id": "complex_pattern_store_308",
      "type": "complexity",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/pattern_intelligence/pattern_store.py",
      "line_range": [
        308,
        355
      ],
      "description": "High complexity in 'get_stats' (score: 13)",
      "suggested_fix": "Refactor to reduce cyclomatic complexity",
      "impact_score": 0.7,
      "confidence": 0.8,
      "metadata": {
        "function": "get_stats",
        "complexity": 13
      }
    },
    {
      "id": "err_nolog_pattern_store_275",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/pattern_intelligence/pattern_store.py",
      "line_range": [
        275,
        280
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 275
      }
    },
    {
      "id": "err_nolog_pattern_store_327",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/pattern_intelligence/pattern_store.py",
      "line_range": [
        327,
        332
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 327
      }
    },
    {
      "id": "err_nolog_pattern_store_401",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/pattern_intelligence/pattern_store.py",
      "line_range": [
        401,
        406
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 401
      }
    },
    {
      "id": "const_dict_pattern_store_50",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/pattern_intelligence/pattern_store.py",
      "line_range": [
        50,
        51
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 50
      }
    },
    {
      "id": "const_dict_pattern_store_308",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/pattern_intelligence/pattern_store.py",
      "line_range": [
        308,
        309
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 308
      }
    },
    {
      "id": "long_pattern_applicator_46",
      "type": "readability",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/pattern_intelligence/pattern_applicator.py",
      "line_range": [
        46,
        103
      ],
      "description": "Function 'analyze_context' is 57 lines (limit: 50)",
      "suggested_fix": "Break down into smaller, focused functions",
      "impact_score": 0.7,
      "confidence": 1.0,
      "metadata": {
        "function": "analyze_context",
        "length": 57
      }
    },
    {
      "id": "long_pattern_applicator_103",
      "type": "readability",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/pattern_intelligence/pattern_applicator.py",
      "line_range": [
        103,
        170
      ],
      "description": "Function 'get_pattern_recommendations' is 67 lines (limit: 50)",
      "suggested_fix": "Break down into smaller, focused functions",
      "impact_score": 0.7,
      "confidence": 1.0,
      "metadata": {
        "function": "get_pattern_recommendations",
        "length": 67
      }
    },
    {
      "id": "long_pattern_applicator_170",
      "type": "readability",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/pattern_intelligence/pattern_applicator.py",
      "line_range": [
        170,
        238
      ],
      "description": "Function 'auto_apply_pattern' is 68 lines (limit: 50)",
      "suggested_fix": "Break down into smaller, focused functions",
      "impact_score": 0.7,
      "confidence": 1.0,
      "metadata": {
        "function": "auto_apply_pattern",
        "length": 68
      }
    },
    {
      "id": "notest_pattern_applicator",
      "type": "testing",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/pattern_intelligence/pattern_applicator.py",
      "line_range": null,
      "description": "No test file found for pattern_applicator.py (5 functions)",
      "suggested_fix": "Create tests/test_pattern_applicator.py with comprehensive test coverage",
      "impact_score": 0.8,
      "confidence": 1.0,
      "metadata": {
        "functions": 5
      }
    },
    {
      "id": "nodoc_pattern_applicator_46",
      "type": "documentation",
      "severity": "low",
      "file_path": "/Users/am/Code/Agency/pattern_intelligence/pattern_applicator.py",
      "line_range": [
        46,
        47
      ],
      "description": "Missing docstring for function 'analyze_context'",
      "suggested_fix": "Add comprehensive docstring explaining purpose, parameters, and return value",
      "impact_score": 0.4,
      "confidence": 1.0,
      "metadata": {
        "item": "analyze_context",
        "type": "function"
      }
    },
    {
      "id": "nodoc_pattern_applicator_103",
      "type": "documentation",
      "severity": "low",
      "file_path": "/Users/am/Code/Agency/pattern_intelligence/pattern_applicator.py",
      "line_range": [
        103,
        104
      ],
      "description": "Missing docstring for function 'get_pattern_recommendations'",
      "suggested_fix": "Add comprehensive docstring explaining purpose, parameters, and return value",
      "impact_score": 0.4,
      "confidence": 1.0,
      "metadata": {
        "item": "get_pattern_recommendations",
        "type": "function"
      }
    },
    {
      "id": "nodoc_pattern_applicator_170",
      "type": "documentation",
      "severity": "low",
      "file_path": "/Users/am/Code/Agency/pattern_intelligence/pattern_applicator.py",
      "line_range": [
        170,
        171
      ],
      "description": "Missing docstring for function 'auto_apply_pattern'",
      "suggested_fix": "Add comprehensive docstring explaining purpose, parameters, and return value",
      "impact_score": 0.4,
      "confidence": 1.0,
      "metadata": {
        "item": "auto_apply_pattern",
        "type": "function"
      }
    },
    {
      "id": "nodoc_pattern_applicator_238",
      "type": "documentation",
      "severity": "low",
      "file_path": "/Users/am/Code/Agency/pattern_intelligence/pattern_applicator.py",
      "line_range": [
        238,
        239
      ],
      "description": "Missing docstring for function 'suggest_pattern_combinations'",
      "suggested_fix": "Add comprehensive docstring explaining purpose, parameters, and return value",
      "impact_score": 0.4,
      "confidence": 1.0,
      "metadata": {
        "item": "suggest_pattern_combinations",
        "type": "function"
      }
    },
    {
      "id": "complex_pattern_applicator_103",
      "type": "complexity",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/pattern_intelligence/pattern_applicator.py",
      "line_range": [
        103,
        170
      ],
      "description": "High complexity in 'get_pattern_recommendations' (score: 13)",
      "suggested_fix": "Refactor to reduce cyclomatic complexity",
      "impact_score": 0.7,
      "confidence": 0.8,
      "metadata": {
        "function": "get_pattern_recommendations",
        "complexity": 13
      }
    },
    {
      "id": "complex_pattern_applicator_316",
      "type": "complexity",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/pattern_intelligence/pattern_applicator.py",
      "line_range": [
        316,
        354
      ],
      "description": "High complexity in '_is_pattern_applicable' (score: 14)",
      "suggested_fix": "Refactor to reduce cyclomatic complexity",
      "impact_score": 0.7,
      "confidence": 0.8,
      "metadata": {
        "function": "_is_pattern_applicable",
        "complexity": 14
      }
    },
    {
      "id": "err_nolog_pattern_applicator_389",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/pattern_intelligence/pattern_applicator.py",
      "line_range": [
        389,
        394
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 389
      }
    },
    {
      "id": "err_nolog_pattern_applicator_523",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/pattern_intelligence/pattern_applicator.py",
      "line_range": [
        523,
        528
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 523
      }
    },
    {
      "id": "err_nolog_pattern_applicator_554",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/pattern_intelligence/pattern_applicator.py",
      "line_range": [
        554,
        559
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 554
      }
    },
    {
      "id": "const_dict_pattern_applicator_173",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/pattern_intelligence/pattern_applicator.py",
      "line_range": [
        173,
        174
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 173
      }
    },
    {
      "id": "const_dict_pattern_applicator_175",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/pattern_intelligence/pattern_applicator.py",
      "line_range": [
        175,
        176
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 175
      }
    },
    {
      "id": "const_dict_pattern_applicator_288",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/pattern_intelligence/pattern_applicator.py",
      "line_range": [
        288,
        289
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 288
      }
    },
    {
      "id": "const_dict_pattern_applicator_357",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/pattern_intelligence/pattern_applicator.py",
      "line_range": [
        357,
        358
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 357
      }
    },
    {
      "id": "const_dict_pattern_applicator_358",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/pattern_intelligence/pattern_applicator.py",
      "line_range": [
        358,
        359
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 358
      }
    },
    {
      "id": "const_dict_pattern_applicator_395",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/pattern_intelligence/pattern_applicator.py",
      "line_range": [
        395,
        396
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 395
      }
    },
    {
      "id": "const_dict_pattern_applicator_396",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/pattern_intelligence/pattern_applicator.py",
      "line_range": [
        396,
        397
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 396
      }
    },
    {
      "id": "const_dict_pattern_applicator_442",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/pattern_intelligence/pattern_applicator.py",
      "line_range": [
        442,
        443
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 442
      }
    },
    {
      "id": "const_dict_pattern_applicator_444",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/pattern_intelligence/pattern_applicator.py",
      "line_range": [
        444,
        445
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 444
      }
    },
    {
      "id": "const_dict_pattern_applicator_478",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/pattern_intelligence/pattern_applicator.py",
      "line_range": [
        478,
        479
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 478
      }
    },
    {
      "id": "const_dict_pattern_applicator_479",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/pattern_intelligence/pattern_applicator.py",
      "line_range": [
        479,
        480
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 479
      }
    },
    {
      "id": "long_meta_learning_104",
      "type": "readability",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/pattern_intelligence/meta_learning.py",
      "line_range": [
        104,
        157
      ],
      "description": "Function 'optimize_learning_strategy' is 53 lines (limit: 50)",
      "suggested_fix": "Break down into smaller, focused functions",
      "impact_score": 0.7,
      "confidence": 1.0,
      "metadata": {
        "function": "optimize_learning_strategy",
        "length": 53
      }
    },
    {
      "id": "long_meta_learning_246",
      "type": "readability",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/pattern_intelligence/meta_learning.py",
      "line_range": [
        246,
        319
      ],
      "description": "Function 'generate_meta_pattern' is 73 lines (limit: 50)",
      "suggested_fix": "Break down into smaller, focused functions",
      "impact_score": 0.7,
      "confidence": 1.0,
      "metadata": {
        "function": "generate_meta_pattern",
        "length": 73
      }
    },
    {
      "id": "long_meta_learning_319",
      "type": "readability",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/pattern_intelligence/meta_learning.py",
      "line_range": [
        319,
        372
      ],
      "description": "Function '_analyze_pattern_effectiveness_trends' is 53 lines (limit: 50)",
      "suggested_fix": "Break down into smaller, focused functions",
      "impact_score": 0.7,
      "confidence": 1.0,
      "metadata": {
        "function": "_analyze_pattern_effectiveness_trends",
        "length": 53
      }
    },
    {
      "id": "notest_meta_learning",
      "type": "testing",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/pattern_intelligence/meta_learning.py",
      "line_range": null,
      "description": "No test file found for meta_learning.py (5 functions)",
      "suggested_fix": "Create tests/test_meta_learning.py with comprehensive test coverage",
      "impact_score": 0.8,
      "confidence": 1.0,
      "metadata": {
        "functions": 5
      }
    },
    {
      "id": "complex_meta_learning_319",
      "type": "complexity",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/pattern_intelligence/meta_learning.py",
      "line_range": [
        319,
        372
      ],
      "description": "High complexity in '_analyze_pattern_effectiveness_trends' (score: 12)",
      "suggested_fix": "Refactor to reduce cyclomatic complexity",
      "impact_score": 0.7,
      "confidence": 0.8,
      "metadata": {
        "function": "_analyze_pattern_effectiveness_trends",
        "complexity": 12
      }
    },
    {
      "id": "arch_god_meta_learning_MetaLearningEngine:",
      "type": "architecture",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/pattern_intelligence/meta_learning.py",
      "line_range": null,
      "description": "God class 'MetaLearningEngine:' has 28 methods",
      "suggested_fix": "Consider splitting into smaller, focused classes",
      "impact_score": 0.8,
      "confidence": 0.9,
      "metadata": {
        "class": "MetaLearningEngine:",
        "methods": 28
      }
    },
    {
      "id": "err_nolog_meta_learning_441",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/pattern_intelligence/meta_learning.py",
      "line_range": [
        441,
        446
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 441
      }
    },
    {
      "id": "const_dict_meta_learning_52",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/pattern_intelligence/meta_learning.py",
      "line_range": [
        52,
        53
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 52
      }
    },
    {
      "id": "const_dict_meta_learning_57",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/pattern_intelligence/meta_learning.py",
      "line_range": [
        57,
        58
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 57
      }
    },
    {
      "id": "const_dict_meta_learning_104",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/pattern_intelligence/meta_learning.py",
      "line_range": [
        104,
        105
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 104
      }
    },
    {
      "id": "const_dict_meta_learning_157",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/pattern_intelligence/meta_learning.py",
      "line_range": [
        157,
        158
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 157
      }
    },
    {
      "id": "const_dict_meta_learning_202",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/pattern_intelligence/meta_learning.py",
      "line_range": [
        202,
        203
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 202
      }
    },
    {
      "id": "const_dict_meta_learning_246",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/pattern_intelligence/meta_learning.py",
      "line_range": [
        246,
        247
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 246
      }
    },
    {
      "id": "const_dict_meta_learning_319",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/pattern_intelligence/meta_learning.py",
      "line_range": [
        319,
        320
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 319
      }
    },
    {
      "id": "const_dict_meta_learning_372",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/pattern_intelligence/meta_learning.py",
      "line_range": [
        372,
        373
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 372
      }
    },
    {
      "id": "const_dict_meta_learning_402",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/pattern_intelligence/meta_learning.py",
      "line_range": [
        402,
        403
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 402
      }
    },
    {
      "id": "const_dict_meta_learning_528",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/pattern_intelligence/meta_learning.py",
      "line_range": [
        528,
        529
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 528
      }
    },
    {
      "id": "const_dict_meta_learning_590",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/pattern_intelligence/meta_learning.py",
      "line_range": [
        590,
        591
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 590
      }
    },
    {
      "id": "const_dict_meta_learning_611",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/pattern_intelligence/meta_learning.py",
      "line_range": [
        611,
        612
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 611
      }
    },
    {
      "id": "const_dict_meta_learning_729",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/pattern_intelligence/meta_learning.py",
      "line_range": [
        729,
        730
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 729
      }
    },
    {
      "id": "const_dict_meta_learning_747",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/pattern_intelligence/meta_learning.py",
      "line_range": [
        747,
        748
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 747
      }
    },
    {
      "id": "const_dict_meta_learning_787",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/pattern_intelligence/meta_learning.py",
      "line_range": [
        787,
        788
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 787
      }
    },
    {
      "id": "const_dict_meta_learning_804",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/pattern_intelligence/meta_learning.py",
      "line_range": [
        804,
        805
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 804
      }
    },
    {
      "id": "const_dict_meta_learning_819",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/pattern_intelligence/meta_learning.py",
      "line_range": [
        819,
        820
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 819
      }
    },
    {
      "id": "const_dict_meta_learning_833",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/pattern_intelligence/meta_learning.py",
      "line_range": [
        833,
        834
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 833
      }
    },
    {
      "id": "const_dict_meta_learning_843",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/pattern_intelligence/meta_learning.py",
      "line_range": [
        843,
        844
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 843
      }
    },
    {
      "id": "long_coding_pattern_196",
      "type": "readability",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/pattern_intelligence/coding_pattern.py",
      "line_range": [
        196,
        247
      ],
      "description": "Function 'from_dict' is 51 lines (limit: 50)",
      "suggested_fix": "Break down into smaller, focused functions",
      "impact_score": 0.7,
      "confidence": 1.0,
      "metadata": {
        "function": "from_dict",
        "length": 51
      }
    },
    {
      "id": "notest_coding_pattern",
      "type": "testing",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/pattern_intelligence/coding_pattern.py",
      "line_range": null,
      "description": "No test file found for coding_pattern.py (10 functions)",
      "suggested_fix": "Create tests/test_coding_pattern.py with comprehensive test coverage",
      "impact_score": 0.8,
      "confidence": 1.0,
      "metadata": {
        "functions": 10
      }
    },
    {
      "id": "const_dict_coding_pattern_149",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/pattern_intelligence/coding_pattern.py",
      "line_range": [
        149,
        150
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 149
      }
    },
    {
      "id": "const_dict_coding_pattern_196",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/pattern_intelligence/coding_pattern.py",
      "line_range": [
        196,
        197
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 196
      }
    },
    {
      "id": "long_intelligence_metrics_97",
      "type": "readability",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/pattern_intelligence/intelligence_metrics.py",
      "line_range": [
        97,
        155
      ],
      "description": "Function 'detect_exponential_amplification' is 58 lines (limit: 50)",
      "suggested_fix": "Break down into smaller, focused functions",
      "impact_score": 0.7,
      "confidence": 1.0,
      "metadata": {
        "function": "detect_exponential_amplification",
        "length": 58
      }
    },
    {
      "id": "long_intelligence_metrics_155",
      "type": "readability",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/pattern_intelligence/intelligence_metrics.py",
      "line_range": [
        155,
        247
      ],
      "description": "Function 'benchmark_intelligence_capabilities' is 92 lines (limit: 50)",
      "suggested_fix": "Break down into smaller, focused functions",
      "impact_score": 0.7,
      "confidence": 1.0,
      "metadata": {
        "function": "benchmark_intelligence_capabilities",
        "length": 92
      }
    },
    {
      "id": "notest_intelligence_metrics",
      "type": "testing",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/pattern_intelligence/intelligence_metrics.py",
      "line_range": null,
      "description": "No test file found for intelligence_metrics.py (7 functions)",
      "suggested_fix": "Create tests/test_intelligence_metrics.py with comprehensive test coverage",
      "impact_score": 0.8,
      "confidence": 1.0,
      "metadata": {
        "functions": 7
      }
    },
    {
      "id": "nodoc_intelligence_metrics_28",
      "type": "documentation",
      "severity": "low",
      "file_path": "/Users/am/Code/Agency/pattern_intelligence/intelligence_metrics.py",
      "line_range": [
        28,
        29
      ],
      "description": "Missing docstring for function 'calculate_aiq'",
      "suggested_fix": "Add comprehensive docstring explaining purpose, parameters, and return value",
      "impact_score": 0.4,
      "confidence": 1.0,
      "metadata": {
        "item": "calculate_aiq",
        "type": "function"
      }
    },
    {
      "id": "nodoc_intelligence_metrics_69",
      "type": "documentation",
      "severity": "low",
      "file_path": "/Users/am/Code/Agency/pattern_intelligence/intelligence_metrics.py",
      "line_range": [
        69,
        70
      ],
      "description": "Missing docstring for function 'measure_intelligence_growth_rate'",
      "suggested_fix": "Add comprehensive docstring explaining purpose, parameters, and return value",
      "impact_score": 0.4,
      "confidence": 1.0,
      "metadata": {
        "item": "measure_intelligence_growth_rate",
        "type": "function"
      }
    },
    {
      "id": "nodoc_intelligence_metrics_97",
      "type": "documentation",
      "severity": "low",
      "file_path": "/Users/am/Code/Agency/pattern_intelligence/intelligence_metrics.py",
      "line_range": [
        97,
        98
      ],
      "description": "Missing docstring for function 'detect_exponential_amplification'",
      "suggested_fix": "Add comprehensive docstring explaining purpose, parameters, and return value",
      "impact_score": 0.4,
      "confidence": 1.0,
      "metadata": {
        "item": "detect_exponential_amplification",
        "type": "function"
      }
    },
    {
      "id": "nodoc_intelligence_metrics_155",
      "type": "documentation",
      "severity": "low",
      "file_path": "/Users/am/Code/Agency/pattern_intelligence/intelligence_metrics.py",
      "line_range": [
        155,
        156
      ],
      "description": "Missing docstring for function 'benchmark_intelligence_capabilities'",
      "suggested_fix": "Add comprehensive docstring explaining purpose, parameters, and return value",
      "impact_score": 0.4,
      "confidence": 1.0,
      "metadata": {
        "item": "benchmark_intelligence_capabilities",
        "type": "function"
      }
    },
    {
      "id": "nodoc_intelligence_metrics_247",
      "type": "documentation",
      "severity": "low",
      "file_path": "/Users/am/Code/Agency/pattern_intelligence/intelligence_metrics.py",
      "line_range": [
        247,
        248
      ],
      "description": "Missing docstring for function 'record_measurement'",
      "suggested_fix": "Add comprehensive docstring explaining purpose, parameters, and return value",
      "impact_score": 0.4,
      "confidence": 1.0,
      "metadata": {
        "item": "record_measurement",
        "type": "function"
      }
    },
    {
      "id": "complex_intelligence_metrics_97",
      "type": "complexity",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/pattern_intelligence/intelligence_metrics.py",
      "line_range": [
        97,
        155
      ],
      "description": "High complexity in 'detect_exponential_amplification' (score: 11)",
      "suggested_fix": "Refactor to reduce cyclomatic complexity",
      "impact_score": 0.7,
      "confidence": 0.8,
      "metadata": {
        "function": "detect_exponential_amplification",
        "complexity": 11
      }
    },
    {
      "id": "complex_intelligence_metrics_271",
      "type": "complexity",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/pattern_intelligence/intelligence_metrics.py",
      "line_range": [
        271,
        316
      ],
      "description": "High complexity in 'get_intelligence_trajectory' (score: 12)",
      "suggested_fix": "Refactor to reduce cyclomatic complexity",
      "impact_score": 0.7,
      "confidence": 0.8,
      "metadata": {
        "function": "get_intelligence_trajectory",
        "complexity": 12
      }
    },
    {
      "id": "const_dict_intelligence_metrics_101",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/pattern_intelligence/intelligence_metrics.py",
      "line_range": [
        101,
        102
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 101
      }
    },
    {
      "id": "const_dict_intelligence_metrics_160",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/pattern_intelligence/intelligence_metrics.py",
      "line_range": [
        160,
        161
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 160
      }
    },
    {
      "id": "const_dict_intelligence_metrics_250",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/pattern_intelligence/intelligence_metrics.py",
      "line_range": [
        250,
        251
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 250
      }
    },
    {
      "id": "const_dict_intelligence_metrics_251",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/pattern_intelligence/intelligence_metrics.py",
      "line_range": [
        251,
        252
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 251
      }
    },
    {
      "id": "const_dict_intelligence_metrics_271",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/pattern_intelligence/intelligence_metrics.py",
      "line_range": [
        271,
        272
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 271
      }
    },
    {
      "id": "const_dict_intelligence_metrics_395",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/pattern_intelligence/intelligence_metrics.py",
      "line_range": [
        395,
        396
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 395
      }
    },
    {
      "id": "const_dict_intelligence_metrics_428",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/pattern_intelligence/intelligence_metrics.py",
      "line_range": [
        428,
        429
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 428
      }
    },
    {
      "id": "long_github_extractor_387",
      "type": "readability",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/pattern_intelligence/extractors/github_extractor.py",
      "line_range": [
        387,
        439
      ],
      "description": "Function '_analyze_fix_commit' is 52 lines (limit: 50)",
      "suggested_fix": "Break down into smaller, focused functions",
      "impact_score": 0.7,
      "confidence": 1.0,
      "metadata": {
        "function": "_analyze_fix_commit",
        "length": 52
      }
    },
    {
      "id": "notest_github_extractor",
      "type": "testing",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/pattern_intelligence/extractors/github_extractor.py",
      "line_range": null,
      "description": "No test file found for github_extractor.py (1 functions)",
      "suggested_fix": "Create tests/test_github_extractor.py with comprehensive test coverage",
      "impact_score": 0.8,
      "confidence": 1.0,
      "metadata": {
        "functions": 1
      }
    },
    {
      "id": "err_nolog_github_extractor_79",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/pattern_intelligence/extractors/github_extractor.py",
      "line_range": [
        79,
        84
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 79
      }
    },
    {
      "id": "const_dict_github_extractor_572",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/pattern_intelligence/extractors/github_extractor.py",
      "line_range": [
        572,
        573
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 572
      }
    },
    {
      "id": "long_local_codebase_183",
      "type": "readability",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/pattern_intelligence/extractors/local_codebase.py",
      "line_range": [
        183,
        235
      ],
      "description": "Function '_extract_testing_patterns' is 52 lines (limit: 50)",
      "suggested_fix": "Break down into smaller, focused functions",
      "impact_score": 0.7,
      "confidence": 1.0,
      "metadata": {
        "function": "_extract_testing_patterns",
        "length": 52
      }
    },
    {
      "id": "long_local_codebase_235",
      "type": "readability",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/pattern_intelligence/extractors/local_codebase.py",
      "line_range": [
        235,
        287
      ],
      "description": "Function '_extract_git_history_patterns' is 52 lines (limit: 50)",
      "suggested_fix": "Break down into smaller, focused functions",
      "impact_score": 0.7,
      "confidence": 1.0,
      "metadata": {
        "function": "_extract_git_history_patterns",
        "length": 52
      }
    },
    {
      "id": "notest_local_codebase",
      "type": "testing",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/pattern_intelligence/extractors/local_codebase.py",
      "line_range": null,
      "description": "No test file found for local_codebase.py (2 functions)",
      "suggested_fix": "Create tests/test_local_codebase.py with comprehensive test coverage",
      "impact_score": 0.8,
      "confidence": 1.0,
      "metadata": {
        "functions": 2
      }
    },
    {
      "id": "nodoc_local_codebase_305",
      "type": "documentation",
      "severity": "low",
      "file_path": "/Users/am/Code/Agency/pattern_intelligence/extractors/local_codebase.py",
      "line_range": [
        305,
        306
      ],
      "description": "Missing docstring for class 'ErrorHandlerVisitor'",
      "suggested_fix": "Add comprehensive docstring explaining purpose, parameters, and return value",
      "impact_score": 0.4,
      "confidence": 1.0,
      "metadata": {
        "item": "ErrorHandlerVisitor",
        "type": "class"
      }
    },
    {
      "id": "nodoc_local_codebase_306",
      "type": "documentation",
      "severity": "low",
      "file_path": "/Users/am/Code/Agency/pattern_intelligence/extractors/local_codebase.py",
      "line_range": [
        306,
        307
      ],
      "description": "Missing docstring for function 'visit_Try'",
      "suggested_fix": "Add comprehensive docstring explaining purpose, parameters, and return value",
      "impact_score": 0.4,
      "confidence": 1.0,
      "metadata": {
        "item": "visit_Try",
        "type": "function"
      }
    },
    {
      "id": "complex_local_codebase_85",
      "type": "complexity",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/pattern_intelligence/extractors/local_codebase.py",
      "line_range": [
        85,
        135
      ],
      "description": "High complexity in '_extract_architecture_patterns' (score: 13)",
      "suggested_fix": "Refactor to reduce cyclomatic complexity",
      "impact_score": 0.7,
      "confidence": 0.8,
      "metadata": {
        "function": "_extract_architecture_patterns",
        "complexity": 13
      }
    },
    {
      "id": "complex_local_codebase_135",
      "type": "complexity",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/pattern_intelligence/extractors/local_codebase.py",
      "line_range": [
        135,
        183
      ],
      "description": "High complexity in '_extract_tool_patterns' (score: 11)",
      "suggested_fix": "Refactor to reduce cyclomatic complexity",
      "impact_score": 0.7,
      "confidence": 0.8,
      "metadata": {
        "function": "_extract_tool_patterns",
        "complexity": 11
      }
    },
    {
      "id": "complex_local_codebase_183",
      "type": "complexity",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/pattern_intelligence/extractors/local_codebase.py",
      "line_range": [
        183,
        235
      ],
      "description": "High complexity in '_extract_testing_patterns' (score: 11)",
      "suggested_fix": "Refactor to reduce cyclomatic complexity",
      "impact_score": 0.7,
      "confidence": 0.8,
      "metadata": {
        "function": "_extract_testing_patterns",
        "complexity": 11
      }
    },
    {
      "id": "complex_local_codebase_306",
      "type": "complexity",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/pattern_intelligence/extractors/local_codebase.py",
      "line_range": [
        306,
        355
      ],
      "description": "High complexity in 'visit_Try' (score: 20)",
      "suggested_fix": "Refactor to reduce cyclomatic complexity",
      "impact_score": 0.7,
      "confidence": 0.8,
      "metadata": {
        "function": "visit_Try",
        "complexity": 20
      }
    },
    {
      "id": "complex_local_codebase_409",
      "type": "complexity",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/pattern_intelligence/extractors/local_codebase.py",
      "line_range": [
        409,
        433
      ],
      "description": "High complexity in '_analyze_tool_implementations' (score: 11)",
      "suggested_fix": "Refactor to reduce cyclomatic complexity",
      "impact_score": 0.7,
      "confidence": 0.8,
      "metadata": {
        "function": "_analyze_tool_implementations",
        "complexity": 11
      }
    },
    {
      "id": "const_dict_local_codebase_409",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/pattern_intelligence/extractors/local_codebase.py",
      "line_range": [
        409,
        410
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 409
      }
    },
    {
      "id": "const_dict_local_codebase_433",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/pattern_intelligence/extractors/local_codebase.py",
      "line_range": [
        433,
        434
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 433
      }
    },
    {
      "id": "notest_base_extractor",
      "type": "testing",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/pattern_intelligence/extractors/base_extractor.py",
      "line_range": null,
      "description": "No test file found for base_extractor.py (7 functions)",
      "suggested_fix": "Create tests/test_base_extractor.py with comprehensive test coverage",
      "impact_score": 0.8,
      "confidence": 1.0,
      "metadata": {
        "functions": 7
      }
    },
    {
      "id": "nodoc_base_extractor_39",
      "type": "documentation",
      "severity": "low",
      "file_path": "/Users/am/Code/Agency/pattern_intelligence/extractors/base_extractor.py",
      "line_range": [
        39,
        40
      ],
      "description": "Missing docstring for function 'create_pattern'",
      "suggested_fix": "Add comprehensive docstring explaining purpose, parameters, and return value",
      "impact_score": 0.4,
      "confidence": 1.0,
      "metadata": {
        "item": "create_pattern",
        "type": "function"
      }
    },
    {
      "id": "nodoc_base_extractor_165",
      "type": "documentation",
      "severity": "low",
      "file_path": "/Users/am/Code/Agency/pattern_intelligence/extractors/base_extractor.py",
      "line_range": [
        165,
        166
      ],
      "description": "Missing docstring for function 'filter_patterns'",
      "suggested_fix": "Add comprehensive docstring explaining purpose, parameters, and return value",
      "impact_score": 0.4,
      "confidence": 1.0,
      "metadata": {
        "item": "filter_patterns",
        "type": "function"
      }
    },
    {
      "id": "const_dict_base_extractor_139",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/pattern_intelligence/extractors/base_extractor.py",
      "line_range": [
        139,
        140
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 139
      }
    },
    {
      "id": "const_dict_base_extractor_198",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/pattern_intelligence/extractors/base_extractor.py",
      "line_range": [
        198,
        199
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 198
      }
    },
    {
      "id": "long_session_extractor_96",
      "type": "readability",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/pattern_intelligence/extractors/session_extractor.py",
      "line_range": [
        96,
        203
      ],
      "description": "Function '_extract_tool_usage_patterns' is 107 lines (limit: 50)",
      "suggested_fix": "Break down into smaller, focused functions",
      "impact_score": 0.7,
      "confidence": 1.0,
      "metadata": {
        "function": "_extract_tool_usage_patterns",
        "length": 107
      }
    },
    {
      "id": "long_session_extractor_203",
      "type": "readability",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/pattern_intelligence/extractors/session_extractor.py",
      "line_range": [
        203,
        257
      ],
      "description": "Function '_extract_task_completion_patterns' is 54 lines (limit: 50)",
      "suggested_fix": "Break down into smaller, focused functions",
      "impact_score": 0.7,
      "confidence": 1.0,
      "metadata": {
        "function": "_extract_task_completion_patterns",
        "length": 54
      }
    },
    {
      "id": "long_session_extractor_257",
      "type": "readability",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/pattern_intelligence/extractors/session_extractor.py",
      "line_range": [
        257,
        312
      ],
      "description": "Function '_extract_problem_solving_patterns' is 55 lines (limit: 50)",
      "suggested_fix": "Break down into smaller, focused functions",
      "impact_score": 0.7,
      "confidence": 1.0,
      "metadata": {
        "function": "_extract_problem_solving_patterns",
        "length": 55
      }
    },
    {
      "id": "long_session_extractor_312",
      "type": "readability",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/pattern_intelligence/extractors/session_extractor.py",
      "line_range": [
        312,
        364
      ],
      "description": "Function '_extract_agent_handoff_patterns' is 52 lines (limit: 50)",
      "suggested_fix": "Break down into smaller, focused functions",
      "impact_score": 0.7,
      "confidence": 1.0,
      "metadata": {
        "function": "_extract_agent_handoff_patterns",
        "length": 52
      }
    },
    {
      "id": "long_session_extractor_364",
      "type": "readability",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/pattern_intelligence/extractors/session_extractor.py",
      "line_range": [
        364,
        430
      ],
      "description": "Function '_parse_session_file' is 66 lines (limit: 50)",
      "suggested_fix": "Break down into smaller, focused functions",
      "impact_score": 0.7,
      "confidence": 1.0,
      "metadata": {
        "function": "_parse_session_file",
        "length": 66
      }
    },
    {
      "id": "notest_session_extractor",
      "type": "testing",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/pattern_intelligence/extractors/session_extractor.py",
      "line_range": null,
      "description": "No test file found for session_extractor.py (1 functions)",
      "suggested_fix": "Create tests/test_session_extractor.py with comprehensive test coverage",
      "impact_score": 0.8,
      "confidence": 1.0,
      "metadata": {
        "functions": 1
      }
    },
    {
      "id": "complex_session_extractor_96",
      "type": "complexity",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/pattern_intelligence/extractors/session_extractor.py",
      "line_range": [
        96,
        203
      ],
      "description": "High complexity in '_extract_tool_usage_patterns' (score: 23)",
      "suggested_fix": "Refactor to reduce cyclomatic complexity",
      "impact_score": 0.7,
      "confidence": 0.8,
      "metadata": {
        "function": "_extract_tool_usage_patterns",
        "complexity": 23
      }
    },
    {
      "id": "complex_session_extractor_257",
      "type": "complexity",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/pattern_intelligence/extractors/session_extractor.py",
      "line_range": [
        257,
        312
      ],
      "description": "High complexity in '_extract_problem_solving_patterns' (score: 11)",
      "suggested_fix": "Refactor to reduce cyclomatic complexity",
      "impact_score": 0.7,
      "confidence": 0.8,
      "metadata": {
        "function": "_extract_problem_solving_patterns",
        "complexity": 11
      }
    },
    {
      "id": "complex_session_extractor_364",
      "type": "complexity",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/pattern_intelligence/extractors/session_extractor.py",
      "line_range": [
        364,
        430
      ],
      "description": "High complexity in '_parse_session_file' (score: 13)",
      "suggested_fix": "Refactor to reduce cyclomatic complexity",
      "impact_score": 0.7,
      "confidence": 0.8,
      "metadata": {
        "function": "_parse_session_file",
        "complexity": 13
      }
    },
    {
      "id": "complex_session_extractor_430",
      "type": "complexity",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/pattern_intelligence/extractors/session_extractor.py",
      "line_range": [
        430,
        472
      ],
      "description": "High complexity in '_analyze_success_factors' (score: 12)",
      "suggested_fix": "Refactor to reduce cyclomatic complexity",
      "impact_score": 0.7,
      "confidence": 0.8,
      "metadata": {
        "function": "_analyze_success_factors",
        "complexity": 12
      }
    },
    {
      "id": "perf_session_extractor_119",
      "type": "performance",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/pattern_intelligence/extractors/session_extractor.py",
      "line_range": [
        119,
        120
      ],
      "description": "Performance issue: in range(len(",
      "suggested_fix": "Use enumerate() instead of range(len())",
      "impact_score": 0.6,
      "confidence": 0.7,
      "metadata": {
        "pattern": "in range(len(",
        "line": 119
      }
    },
    {
      "id": "const_dict_session_extractor_364",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/pattern_intelligence/extractors/session_extractor.py",
      "line_range": [
        364,
        365
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 364
      }
    },
    {
      "id": "const_dict_session_extractor_430",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/pattern_intelligence/extractors/session_extractor.py",
      "line_range": [
        430,
        431
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 430
      }
    },
    {
      "id": "const_dict_session_extractor_472",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/pattern_intelligence/extractors/session_extractor.py",
      "line_range": [
        472,
        473
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 472
      }
    },
    {
      "id": "const_dict_session_extractor_489",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/pattern_intelligence/extractors/session_extractor.py",
      "line_range": [
        489,
        490
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 489
      }
    },
    {
      "id": "notest_memory",
      "type": "testing",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/agency_memory/memory.py",
      "line_range": null,
      "description": "No test file found for memory.py (12 functions)",
      "suggested_fix": "Create tests/test_memory.py with comprehensive test coverage",
      "impact_score": 0.8,
      "confidence": 1.0,
      "metadata": {
        "functions": 12
      }
    },
    {
      "id": "const_dict_memory_58",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/agency_memory/memory.py",
      "line_range": [
        58,
        59
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 58
      }
    },
    {
      "id": "long_vector_store_181",
      "type": "readability",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/agency_memory/vector_store.py",
      "line_range": [
        181,
        240
      ],
      "description": "Function 'semantic_search' is 59 lines (limit: 50)",
      "suggested_fix": "Break down into smaller, focused functions",
      "impact_score": 0.7,
      "confidence": 1.0,
      "metadata": {
        "function": "semantic_search",
        "length": 59
      }
    },
    {
      "id": "long_vector_store_290",
      "type": "readability",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/agency_memory/vector_store.py",
      "line_range": [
        290,
        358
      ],
      "description": "Function 'hybrid_search' is 68 lines (limit: 50)",
      "suggested_fix": "Break down into smaller, focused functions",
      "impact_score": 0.7,
      "confidence": 1.0,
      "metadata": {
        "function": "hybrid_search",
        "length": 68
      }
    },
    {
      "id": "long_vector_store_497",
      "type": "readability",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/agency_memory/vector_store.py",
      "line_range": [
        497,
        557
      ],
      "description": "Function 'combined_search' is 60 lines (limit: 50)",
      "suggested_fix": "Break down into smaller, focused functions",
      "impact_score": 0.7,
      "confidence": 1.0,
      "metadata": {
        "function": "combined_search",
        "length": 60
      }
    },
    {
      "id": "notest_vector_store",
      "type": "testing",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/agency_memory/vector_store.py",
      "line_range": null,
      "description": "No test file found for vector_store.py (12 functions)",
      "suggested_fix": "Create tests/test_vector_store.py with comprehensive test coverage",
      "impact_score": 0.8,
      "confidence": 1.0,
      "metadata": {
        "functions": 12
      }
    },
    {
      "id": "nodoc_vector_store_85",
      "type": "documentation",
      "severity": "low",
      "file_path": "/Users/am/Code/Agency/agency_memory/vector_store.py",
      "line_range": [
        85,
        86
      ],
      "description": "Missing docstring for function 'embed_texts'",
      "suggested_fix": "Add comprehensive docstring explaining purpose, parameters, and return value",
      "impact_score": 0.4,
      "confidence": 1.0,
      "metadata": {
        "item": "embed_texts",
        "type": "function"
      }
    },
    {
      "id": "nodoc_vector_store_181",
      "type": "documentation",
      "severity": "low",
      "file_path": "/Users/am/Code/Agency/agency_memory/vector_store.py",
      "line_range": [
        181,
        182
      ],
      "description": "Missing docstring for function 'semantic_search'",
      "suggested_fix": "Add comprehensive docstring explaining purpose, parameters, and return value",
      "impact_score": 0.4,
      "confidence": 1.0,
      "metadata": {
        "item": "semantic_search",
        "type": "function"
      }
    },
    {
      "id": "nodoc_vector_store_240",
      "type": "documentation",
      "severity": "low",
      "file_path": "/Users/am/Code/Agency/agency_memory/vector_store.py",
      "line_range": [
        240,
        241
      ],
      "description": "Missing docstring for function 'keyword_search'",
      "suggested_fix": "Add comprehensive docstring explaining purpose, parameters, and return value",
      "impact_score": 0.4,
      "confidence": 1.0,
      "metadata": {
        "item": "keyword_search",
        "type": "function"
      }
    },
    {
      "id": "nodoc_vector_store_290",
      "type": "documentation",
      "severity": "low",
      "file_path": "/Users/am/Code/Agency/agency_memory/vector_store.py",
      "line_range": [
        290,
        291
      ],
      "description": "Missing docstring for function 'hybrid_search'",
      "suggested_fix": "Add comprehensive docstring explaining purpose, parameters, and return value",
      "impact_score": 0.4,
      "confidence": 1.0,
      "metadata": {
        "item": "hybrid_search",
        "type": "function"
      }
    },
    {
      "id": "nodoc_vector_store_385",
      "type": "documentation",
      "severity": "low",
      "file_path": "/Users/am/Code/Agency/agency_memory/vector_store.py",
      "line_range": [
        385,
        386
      ],
      "description": "Missing docstring for function 'search'",
      "suggested_fix": "Add comprehensive docstring explaining purpose, parameters, and return value",
      "impact_score": 0.4,
      "confidence": 1.0,
      "metadata": {
        "item": "search",
        "type": "function"
      }
    },
    {
      "id": "nodoc_vector_store_467",
      "type": "documentation",
      "severity": "low",
      "file_path": "/Users/am/Code/Agency/agency_memory/vector_store.py",
      "line_range": [
        467,
        468
      ],
      "description": "Missing docstring for function 'semantic_search'",
      "suggested_fix": "Add comprehensive docstring explaining purpose, parameters, and return value",
      "impact_score": 0.4,
      "confidence": 1.0,
      "metadata": {
        "item": "semantic_search",
        "type": "function"
      }
    },
    {
      "id": "nodoc_vector_store_497",
      "type": "documentation",
      "severity": "low",
      "file_path": "/Users/am/Code/Agency/agency_memory/vector_store.py",
      "line_range": [
        497,
        498
      ],
      "description": "Missing docstring for function 'combined_search'",
      "suggested_fix": "Add comprehensive docstring explaining purpose, parameters, and return value",
      "impact_score": 0.4,
      "confidence": 1.0,
      "metadata": {
        "item": "combined_search",
        "type": "function"
      }
    },
    {
      "id": "err_nolog_vector_store_399",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/agency_memory/vector_store.py",
      "line_range": [
        399,
        404
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 399
      }
    },
    {
      "id": "const_dict_vector_store_20",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/agency_memory/vector_store.py",
      "line_range": [
        20,
        21
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 20
      }
    },
    {
      "id": "const_dict_vector_store_43",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/agency_memory/vector_store.py",
      "line_range": [
        43,
        44
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 43
      }
    },
    {
      "id": "const_dict_vector_store_44",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/agency_memory/vector_store.py",
      "line_range": [
        44,
        45
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 44
      }
    },
    {
      "id": "const_dict_vector_store_45",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/agency_memory/vector_store.py",
      "line_range": [
        45,
        46
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 45
      }
    },
    {
      "id": "const_dict_vector_store_125",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/agency_memory/vector_store.py",
      "line_range": [
        125,
        126
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 125
      }
    },
    {
      "id": "const_dict_vector_store_149",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/agency_memory/vector_store.py",
      "line_range": [
        149,
        150
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 149
      }
    },
    {
      "id": "const_dict_vector_store_413",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/agency_memory/vector_store.py",
      "line_range": [
        413,
        414
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 413
      }
    },
    {
      "id": "long_swarm_memory_70",
      "type": "readability",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/agency_memory/swarm_memory.py",
      "line_range": [
        70,
        129
      ],
      "description": "Function 'store' is 59 lines (limit: 50)",
      "suggested_fix": "Break down into smaller, focused functions",
      "impact_score": 0.7,
      "confidence": 1.0,
      "metadata": {
        "function": "store",
        "length": 59
      }
    },
    {
      "id": "long_swarm_memory_129",
      "type": "readability",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/agency_memory/swarm_memory.py",
      "line_range": [
        129,
        197
      ],
      "description": "Function 'search' is 68 lines (limit: 50)",
      "suggested_fix": "Break down into smaller, focused functions",
      "impact_score": 0.7,
      "confidence": 1.0,
      "metadata": {
        "function": "search",
        "length": 68
      }
    },
    {
      "id": "long_swarm_memory_221",
      "type": "readability",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/agency_memory/swarm_memory.py",
      "line_range": [
        221,
        277
      ],
      "description": "Function 'get_agent_summary' is 56 lines (limit: 50)",
      "suggested_fix": "Break down into smaller, focused functions",
      "impact_score": 0.7,
      "confidence": 1.0,
      "metadata": {
        "function": "get_agent_summary",
        "length": 56
      }
    },
    {
      "id": "long_swarm_memory_322",
      "type": "readability",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/agency_memory/swarm_memory.py",
      "line_range": [
        322,
        380
      ],
      "description": "Function 'prune_memories' is 58 lines (limit: 50)",
      "suggested_fix": "Break down into smaller, focused functions",
      "impact_score": 0.7,
      "confidence": 1.0,
      "metadata": {
        "function": "prune_memories",
        "length": 58
      }
    },
    {
      "id": "long_swarm_memory_391",
      "type": "readability",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/agency_memory/swarm_memory.py",
      "line_range": [
        391,
        528
      ],
      "description": "Function 'consolidate_agent_memories' is 137 lines (limit: 50)",
      "suggested_fix": "Break down into smaller, focused functions",
      "impact_score": 0.7,
      "confidence": 1.0,
      "metadata": {
        "function": "consolidate_agent_memories",
        "length": 137
      }
    },
    {
      "id": "nodoc_swarm_memory_70",
      "type": "documentation",
      "severity": "low",
      "file_path": "/Users/am/Code/Agency/agency_memory/swarm_memory.py",
      "line_range": [
        70,
        71
      ],
      "description": "Missing docstring for function 'store'",
      "suggested_fix": "Add comprehensive docstring explaining purpose, parameters, and return value",
      "impact_score": 0.4,
      "confidence": 1.0,
      "metadata": {
        "item": "store",
        "type": "function"
      }
    },
    {
      "id": "nodoc_swarm_memory_129",
      "type": "documentation",
      "severity": "low",
      "file_path": "/Users/am/Code/Agency/agency_memory/swarm_memory.py",
      "line_range": [
        129,
        130
      ],
      "description": "Missing docstring for function 'search'",
      "suggested_fix": "Add comprehensive docstring explaining purpose, parameters, and return value",
      "impact_score": 0.4,
      "confidence": 1.0,
      "metadata": {
        "item": "search",
        "type": "function"
      }
    },
    {
      "id": "nodoc_swarm_memory_391",
      "type": "documentation",
      "severity": "low",
      "file_path": "/Users/am/Code/Agency/agency_memory/swarm_memory.py",
      "line_range": [
        391,
        392
      ],
      "description": "Missing docstring for function 'consolidate_agent_memories'",
      "suggested_fix": "Add comprehensive docstring explaining purpose, parameters, and return value",
      "impact_score": 0.4,
      "confidence": 1.0,
      "metadata": {
        "item": "consolidate_agent_memories",
        "type": "function"
      }
    },
    {
      "id": "nodoc_swarm_memory_551",
      "type": "documentation",
      "severity": "low",
      "file_path": "/Users/am/Code/Agency/agency_memory/swarm_memory.py",
      "line_range": [
        551,
        552
      ],
      "description": "Missing docstring for function 'store'",
      "suggested_fix": "Add comprehensive docstring explaining purpose, parameters, and return value",
      "impact_score": 0.4,
      "confidence": 1.0,
      "metadata": {
        "item": "store",
        "type": "function"
      }
    },
    {
      "id": "nodoc_swarm_memory_577",
      "type": "documentation",
      "severity": "low",
      "file_path": "/Users/am/Code/Agency/agency_memory/swarm_memory.py",
      "line_range": [
        577,
        578
      ],
      "description": "Missing docstring for function 'search'",
      "suggested_fix": "Add comprehensive docstring explaining purpose, parameters, and return value",
      "impact_score": 0.4,
      "confidence": 1.0,
      "metadata": {
        "item": "search",
        "type": "function"
      }
    },
    {
      "id": "nodoc_swarm_memory_613",
      "type": "documentation",
      "severity": "low",
      "file_path": "/Users/am/Code/Agency/agency_memory/swarm_memory.py",
      "line_range": [
        613,
        614
      ],
      "description": "Missing docstring for function 'prune_memories'",
      "suggested_fix": "Add comprehensive docstring explaining purpose, parameters, and return value",
      "impact_score": 0.4,
      "confidence": 1.0,
      "metadata": {
        "item": "prune_memories",
        "type": "function"
      }
    },
    {
      "id": "nodoc_swarm_memory_620",
      "type": "documentation",
      "severity": "low",
      "file_path": "/Users/am/Code/Agency/agency_memory/swarm_memory.py",
      "line_range": [
        620,
        621
      ],
      "description": "Missing docstring for function 'consolidate_memories'",
      "suggested_fix": "Add comprehensive docstring explaining purpose, parameters, and return value",
      "impact_score": 0.4,
      "confidence": 1.0,
      "metadata": {
        "item": "consolidate_memories",
        "type": "function"
      }
    },
    {
      "id": "complex_swarm_memory_129",
      "type": "complexity",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/agency_memory/swarm_memory.py",
      "line_range": [
        129,
        197
      ],
      "description": "High complexity in 'search' (score: 14)",
      "suggested_fix": "Refactor to reduce cyclomatic complexity",
      "impact_score": 0.7,
      "confidence": 0.8,
      "metadata": {
        "function": "search",
        "complexity": 14
      }
    },
    {
      "id": "complex_swarm_memory_322",
      "type": "complexity",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/agency_memory/swarm_memory.py",
      "line_range": [
        322,
        380
      ],
      "description": "High complexity in 'prune_memories' (score: 13)",
      "suggested_fix": "Refactor to reduce cyclomatic complexity",
      "impact_score": 0.7,
      "confidence": 0.8,
      "metadata": {
        "function": "prune_memories",
        "complexity": 13
      }
    },
    {
      "id": "complex_swarm_memory_391",
      "type": "complexity",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/agency_memory/swarm_memory.py",
      "line_range": [
        391,
        528
      ],
      "description": "High complexity in 'consolidate_agent_memories' (score: 25)",
      "suggested_fix": "Refactor to reduce cyclomatic complexity",
      "impact_score": 0.7,
      "confidence": 0.8,
      "metadata": {
        "function": "consolidate_agent_memories",
        "complexity": 25
      }
    },
    {
      "id": "const_dict_swarm_memory_58",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/agency_memory/swarm_memory.py",
      "line_range": [
        58,
        59
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 58
      }
    },
    {
      "id": "const_dict_swarm_memory_59",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/agency_memory/swarm_memory.py",
      "line_range": [
        59,
        60
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 59
      }
    },
    {
      "id": "const_dict_swarm_memory_60",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/agency_memory/swarm_memory.py",
      "line_range": [
        60,
        61
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 60
      }
    },
    {
      "id": "const_dict_swarm_memory_61",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/agency_memory/swarm_memory.py",
      "line_range": [
        61,
        62
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 61
      }
    },
    {
      "id": "const_dict_swarm_memory_221",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/agency_memory/swarm_memory.py",
      "line_range": [
        221,
        222
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 221
      }
    },
    {
      "id": "const_dict_swarm_memory_277",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/agency_memory/swarm_memory.py",
      "line_range": [
        277,
        278
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 277
      }
    },
    {
      "id": "const_dict_swarm_memory_393",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/agency_memory/swarm_memory.py",
      "line_range": [
        393,
        394
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 393
      }
    },
    {
      "id": "const_dict_swarm_memory_604",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/agency_memory/swarm_memory.py",
      "line_range": [
        604,
        605
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 604
      }
    },
    {
      "id": "const_dict_swarm_memory_609",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/agency_memory/swarm_memory.py",
      "line_range": [
        609,
        610
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 609
      }
    },
    {
      "id": "const_dict_swarm_memory_622",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/agency_memory/swarm_memory.py",
      "line_range": [
        622,
        623
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 622
      }
    },
    {
      "id": "long_firestore_store_59",
      "type": "readability",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/agency_memory/firestore_store.py",
      "line_range": [
        59,
        116
      ],
      "description": "Function '_initialize_firestore' is 57 lines (limit: 50)",
      "suggested_fix": "Break down into smaller, focused functions",
      "impact_score": 0.7,
      "confidence": 1.0,
      "metadata": {
        "function": "_initialize_firestore",
        "length": 57
      }
    },
    {
      "id": "notest_firestore_store",
      "type": "testing",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/agency_memory/firestore_store.py",
      "line_range": null,
      "description": "No test file found for firestore_store.py (4 functions)",
      "suggested_fix": "Create tests/test_firestore_store.py with comprehensive test coverage",
      "impact_score": 0.8,
      "confidence": 1.0,
      "metadata": {
        "functions": 4
      }
    },
    {
      "id": "complex_firestore_store_59",
      "type": "complexity",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/agency_memory/firestore_store.py",
      "line_range": [
        59,
        116
      ],
      "description": "High complexity in '_initialize_firestore' (score: 14)",
      "suggested_fix": "Refactor to reduce cyclomatic complexity",
      "impact_score": 0.7,
      "confidence": 0.8,
      "metadata": {
        "function": "_initialize_firestore",
        "complexity": 14
      }
    },
    {
      "id": "err_nolog_firestore_store_13",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/agency_memory/firestore_store.py",
      "line_range": [
        13,
        18
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 13
      }
    },
    {
      "id": "dup_memory_v2_432",
      "type": "duplicate_code",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/agency_memory/memory_v2.py",
      "line_range": [
        430,
        432
      ],
      "description": "Potential duplicate function: def retrieve_memory(",
      "suggested_fix": "Consider extracting common functionality to shared utility",
      "impact_score": 0.6,
      "confidence": 0.7,
      "metadata": {
        "function": "def retrieve_memory("
      }
    },
    {
      "id": "dup_memory_v2_455",
      "type": "duplicate_code",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/agency_memory/memory_v2.py",
      "line_range": [
        447,
        455
      ],
      "description": "Potential duplicate function: def search_memories(",
      "suggested_fix": "Consider extracting common functionality to shared utility",
      "impact_score": 0.6,
      "confidence": 0.7,
      "metadata": {
        "function": "def search_memories("
      }
    },
    {
      "id": "dup_memory_v2_497",
      "type": "duplicate_code",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/agency_memory/memory_v2.py",
      "line_range": [
        495,
        497
      ],
      "description": "Potential duplicate function: def get_agent_memories(",
      "suggested_fix": "Consider extracting common functionality to shared utility",
      "impact_score": 0.6,
      "confidence": 0.7,
      "metadata": {
        "function": "def get_agent_memories("
      }
    },
    {
      "id": "long_memory_v2_662",
      "type": "readability",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/agency_memory/memory_v2.py",
      "line_range": [
        662,
        737
      ],
      "description": "Function '_create_cluster_summary' is 75 lines (limit: 50)",
      "suggested_fix": "Break down into smaller, focused functions",
      "impact_score": 0.7,
      "confidence": 1.0,
      "metadata": {
        "function": "_create_cluster_summary",
        "length": 75
      }
    },
    {
      "id": "long_memory_v2_756",
      "type": "readability",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/agency_memory/memory_v2.py",
      "line_range": [
        756,
        823
      ],
      "description": "Function 'store' is 67 lines (limit: 50)",
      "suggested_fix": "Break down into smaller, focused functions",
      "impact_score": 0.7,
      "confidence": 1.0,
      "metadata": {
        "function": "store",
        "length": 67
      }
    },
    {
      "id": "notest_memory_v2",
      "type": "testing",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/agency_memory/memory_v2.py",
      "line_range": null,
      "description": "No test file found for memory_v2.py (28 functions)",
      "suggested_fix": "Create tests/test_memory_v2.py with comprehensive test coverage",
      "impact_score": 0.8,
      "confidence": 1.0,
      "metadata": {
        "functions": 28
      }
    },
    {
      "id": "nodoc_memory_v2_107",
      "type": "documentation",
      "severity": "low",
      "file_path": "/Users/am/Code/Agency/agency_memory/memory_v2.py",
      "line_range": [
        107,
        108
      ],
      "description": "Missing docstring for function 'namespaced_key'",
      "suggested_fix": "Add comprehensive docstring explaining purpose, parameters, and return value",
      "impact_score": 0.4,
      "confidence": 1.0,
      "metadata": {
        "item": "namespaced_key",
        "type": "function"
      }
    },
    {
      "id": "nodoc_memory_v2_149",
      "type": "documentation",
      "severity": "low",
      "file_path": "/Users/am/Code/Agency/agency_memory/memory_v2.py",
      "line_range": [
        149,
        150
      ],
      "description": "Missing docstring for function 'calculate_importance_score'",
      "suggested_fix": "Add comprehensive docstring explaining purpose, parameters, and return value",
      "impact_score": 0.4,
      "confidence": 1.0,
      "metadata": {
        "item": "calculate_importance_score",
        "type": "function"
      }
    },
    {
      "id": "nodoc_memory_v2_214",
      "type": "documentation",
      "severity": "low",
      "file_path": "/Users/am/Code/Agency/agency_memory/memory_v2.py",
      "line_range": [
        214,
        215
      ],
      "description": "Missing docstring for function 'update_memory_importance'",
      "suggested_fix": "Add comprehensive docstring explaining purpose, parameters, and return value",
      "impact_score": 0.4,
      "confidence": 1.0,
      "metadata": {
        "item": "update_memory_importance",
        "type": "function"
      }
    },
    {
      "id": "nodoc_memory_v2_235",
      "type": "documentation",
      "severity": "low",
      "file_path": "/Users/am/Code/Agency/agency_memory/memory_v2.py",
      "line_range": [
        235,
        236
      ],
      "description": "Missing docstring for function 'cluster_memories'",
      "suggested_fix": "Add comprehensive docstring explaining purpose, parameters, and return value",
      "impact_score": 0.4,
      "confidence": 1.0,
      "metadata": {
        "item": "cluster_memories",
        "type": "function"
      }
    },
    {
      "id": "nodoc_memory_v2_337",
      "type": "documentation",
      "severity": "low",
      "file_path": "/Users/am/Code/Agency/agency_memory/memory_v2.py",
      "line_range": [
        337,
        338
      ],
      "description": "Missing docstring for function 'retrieve_memory'",
      "suggested_fix": "Add comprehensive docstring explaining purpose, parameters, and return value",
      "impact_score": 0.4,
      "confidence": 1.0,
      "metadata": {
        "item": "retrieve_memory",
        "type": "function"
      }
    },
    {
      "id": "nodoc_memory_v2_344",
      "type": "documentation",
      "severity": "low",
      "file_path": "/Users/am/Code/Agency/agency_memory/memory_v2.py",
      "line_range": [
        344,
        345
      ],
      "description": "Missing docstring for function 'search_memories'",
      "suggested_fix": "Add comprehensive docstring explaining purpose, parameters, and return value",
      "impact_score": 0.4,
      "confidence": 1.0,
      "metadata": {
        "item": "search_memories",
        "type": "function"
      }
    },
    {
      "id": "nodoc_memory_v2_357",
      "type": "documentation",
      "severity": "low",
      "file_path": "/Users/am/Code/Agency/agency_memory/memory_v2.py",
      "line_range": [
        357,
        358
      ],
      "description": "Missing docstring for function 'get_agent_memories'",
      "suggested_fix": "Add comprehensive docstring explaining purpose, parameters, and return value",
      "impact_score": 0.4,
      "confidence": 1.0,
      "metadata": {
        "item": "get_agent_memories",
        "type": "function"
      }
    },
    {
      "id": "nodoc_memory_v2_430",
      "type": "documentation",
      "severity": "low",
      "file_path": "/Users/am/Code/Agency/agency_memory/memory_v2.py",
      "line_range": [
        430,
        431
      ],
      "description": "Missing docstring for function 'retrieve_memory'",
      "suggested_fix": "Add comprehensive docstring explaining purpose, parameters, and return value",
      "impact_score": 0.4,
      "confidence": 1.0,
      "metadata": {
        "item": "retrieve_memory",
        "type": "function"
      }
    },
    {
      "id": "nodoc_memory_v2_447",
      "type": "documentation",
      "severity": "low",
      "file_path": "/Users/am/Code/Agency/agency_memory/memory_v2.py",
      "line_range": [
        447,
        448
      ],
      "description": "Missing docstring for function 'search_memories'",
      "suggested_fix": "Add comprehensive docstring explaining purpose, parameters, and return value",
      "impact_score": 0.4,
      "confidence": 1.0,
      "metadata": {
        "item": "search_memories",
        "type": "function"
      }
    },
    {
      "id": "nodoc_memory_v2_495",
      "type": "documentation",
      "severity": "low",
      "file_path": "/Users/am/Code/Agency/agency_memory/memory_v2.py",
      "line_range": [
        495,
        496
      ],
      "description": "Missing docstring for function 'get_agent_memories'",
      "suggested_fix": "Add comprehensive docstring explaining purpose, parameters, and return value",
      "impact_score": 0.4,
      "confidence": 1.0,
      "metadata": {
        "item": "get_agent_memories",
        "type": "function"
      }
    },
    {
      "id": "nodoc_memory_v2_756",
      "type": "documentation",
      "severity": "low",
      "file_path": "/Users/am/Code/Agency/agency_memory/memory_v2.py",
      "line_range": [
        756,
        757
      ],
      "description": "Missing docstring for function 'store'",
      "suggested_fix": "Add comprehensive docstring explaining purpose, parameters, and return value",
      "impact_score": 0.4,
      "confidence": 1.0,
      "metadata": {
        "item": "store",
        "type": "function"
      }
    },
    {
      "id": "nodoc_memory_v2_829",
      "type": "documentation",
      "severity": "low",
      "file_path": "/Users/am/Code/Agency/agency_memory/memory_v2.py",
      "line_range": [
        829,
        830
      ],
      "description": "Missing docstring for function 'search'",
      "suggested_fix": "Add comprehensive docstring explaining purpose, parameters, and return value",
      "impact_score": 0.4,
      "confidence": 1.0,
      "metadata": {
        "item": "search",
        "type": "function"
      }
    },
    {
      "id": "nodoc_memory_v2_892",
      "type": "documentation",
      "severity": "low",
      "file_path": "/Users/am/Code/Agency/agency_memory/memory_v2.py",
      "line_range": [
        892,
        893
      ],
      "description": "Missing docstring for function 'create_semantic_memory'",
      "suggested_fix": "Add comprehensive docstring explaining purpose, parameters, and return value",
      "impact_score": 0.4,
      "confidence": 1.0,
      "metadata": {
        "item": "create_semantic_memory",
        "type": "function"
      }
    },
    {
      "id": "nodoc_memory_v2_906",
      "type": "documentation",
      "severity": "low",
      "file_path": "/Users/am/Code/Agency/agency_memory/memory_v2.py",
      "line_range": [
        906,
        907
      ],
      "description": "Missing docstring for function 'create_episodic_memory'",
      "suggested_fix": "Add comprehensive docstring explaining purpose, parameters, and return value",
      "impact_score": 0.4,
      "confidence": 1.0,
      "metadata": {
        "item": "create_episodic_memory",
        "type": "function"
      }
    },
    {
      "id": "nodoc_memory_v2_924",
      "type": "documentation",
      "severity": "low",
      "file_path": "/Users/am/Code/Agency/agency_memory/memory_v2.py",
      "line_range": [
        924,
        925
      ],
      "description": "Missing docstring for function 'create_procedural_memory'",
      "suggested_fix": "Add comprehensive docstring explaining purpose, parameters, and return value",
      "impact_score": 0.4,
      "confidence": 1.0,
      "metadata": {
        "item": "create_procedural_memory",
        "type": "function"
      }
    },
    {
      "id": "complex_memory_v2_447",
      "type": "complexity",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/agency_memory/memory_v2.py",
      "line_range": [
        447,
        495
      ],
      "description": "High complexity in 'search_memories' (score: 12)",
      "suggested_fix": "Refactor to reduce cyclomatic complexity",
      "impact_score": 0.7,
      "confidence": 0.8,
      "metadata": {
        "function": "search_memories",
        "complexity": 12
      }
    },
    {
      "id": "complex_memory_v2_534",
      "type": "complexity",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/agency_memory/memory_v2.py",
      "line_range": [
        534,
        581
      ],
      "description": "High complexity in 'get_memory_stats' (score: 14)",
      "suggested_fix": "Refactor to reduce cyclomatic complexity",
      "impact_score": 0.7,
      "confidence": 0.8,
      "metadata": {
        "function": "get_memory_stats",
        "complexity": 14
      }
    },
    {
      "id": "complex_memory_v2_662",
      "type": "complexity",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/agency_memory/memory_v2.py",
      "line_range": [
        662,
        737
      ],
      "description": "High complexity in '_create_cluster_summary' (score: 11)",
      "suggested_fix": "Refactor to reduce cyclomatic complexity",
      "impact_score": 0.7,
      "confidence": 0.8,
      "metadata": {
        "function": "_create_cluster_summary",
        "complexity": 11
      }
    },
    {
      "id": "const_dict_memory_v2_110",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/agency_memory/memory_v2.py",
      "line_range": [
        110,
        111
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 110
      }
    },
    {
      "id": "const_dict_memory_v2_115",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/agency_memory/memory_v2.py",
      "line_range": [
        115,
        116
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 115
      }
    },
    {
      "id": "const_dict_memory_v2_369",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/agency_memory/memory_v2.py",
      "line_range": [
        369,
        370
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 369
      }
    },
    {
      "id": "const_dict_memory_v2_384",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/agency_memory/memory_v2.py",
      "line_range": [
        384,
        385
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 384
      }
    },
    {
      "id": "const_dict_memory_v2_385",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/agency_memory/memory_v2.py",
      "line_range": [
        385,
        386
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 385
      }
    },
    {
      "id": "const_dict_memory_v2_386",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/agency_memory/memory_v2.py",
      "line_range": [
        386,
        387
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 386
      }
    },
    {
      "id": "const_dict_memory_v2_387",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/agency_memory/memory_v2.py",
      "line_range": [
        387,
        388
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 387
      }
    },
    {
      "id": "const_dict_memory_v2_534",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/agency_memory/memory_v2.py",
      "line_range": [
        534,
        535
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 534
      }
    },
    {
      "id": "const_dict_memory_v2_628",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/agency_memory/memory_v2.py",
      "line_range": [
        628,
        629
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 628
      }
    },
    {
      "id": "const_dict_memory_v2_872",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/agency_memory/memory_v2.py",
      "line_range": [
        872,
        873
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 872
      }
    },
    {
      "id": "const_dict_memory_v2_877",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/agency_memory/memory_v2.py",
      "line_range": [
        877,
        878
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 877
      }
    },
    {
      "id": "const_dict_memory_v2_888",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/agency_memory/memory_v2.py",
      "line_range": [
        888,
        889
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 888
      }
    },
    {
      "id": "const_dict_memory_v2_909",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/agency_memory/memory_v2.py",
      "line_range": [
        909,
        910
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 909
      }
    },
    {
      "id": "notest___init__",
      "type": "testing",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/agency_memory/__init__.py",
      "line_range": null,
      "description": "No test file found for __init__.py (1 functions)",
      "suggested_fix": "Create tests/test___init__.py with comprehensive test coverage",
      "impact_score": 0.8,
      "confidence": 1.0,
      "metadata": {
        "functions": 1
      }
    },
    {
      "id": "err_nolog___init___55",
      "type": "error_handling",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/agency_memory/__init__.py",
      "line_range": [
        55,
        60
      ],
      "description": "Exception caught but not logged",
      "suggested_fix": "Add logging for caught exceptions",
      "impact_score": 0.6,
      "confidence": 0.8,
      "metadata": {
        "line": 55
      }
    },
    {
      "id": "long_enhanced_memory_store_259",
      "type": "readability",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/agency_memory/enhanced_memory_store.py",
      "line_range": [
        259,
        311
      ],
      "description": "Function '_extract_error_patterns' is 52 lines (limit: 50)",
      "suggested_fix": "Break down into smaller, focused functions",
      "impact_score": 0.7,
      "confidence": 1.0,
      "metadata": {
        "function": "_extract_error_patterns",
        "length": 52
      }
    },
    {
      "id": "notest_enhanced_memory_store",
      "type": "testing",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/agency_memory/enhanced_memory_store.py",
      "line_range": null,
      "description": "No test file found for enhanced_memory_store.py (12 functions)",
      "suggested_fix": "Create tests/test_enhanced_memory_store.py with comprehensive test coverage",
      "impact_score": 0.8,
      "confidence": 1.0,
      "metadata": {
        "functions": 12
      }
    },
    {
      "id": "complex_enhanced_memory_store_215",
      "type": "complexity",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/agency_memory/enhanced_memory_store.py",
      "line_range": [
        215,
        259
      ],
      "description": "High complexity in '_extract_tool_patterns' (score: 14)",
      "suggested_fix": "Refactor to reduce cyclomatic complexity",
      "impact_score": 0.7,
      "confidence": 0.8,
      "metadata": {
        "function": "_extract_tool_patterns",
        "complexity": 14
      }
    },
    {
      "id": "complex_enhanced_memory_store_259",
      "type": "complexity",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/agency_memory/enhanced_memory_store.py",
      "line_range": [
        259,
        311
      ],
      "description": "High complexity in '_extract_error_patterns' (score: 18)",
      "suggested_fix": "Refactor to reduce cyclomatic complexity",
      "impact_score": 0.7,
      "confidence": 0.8,
      "metadata": {
        "function": "_extract_error_patterns",
        "complexity": 18
      }
    },
    {
      "id": "complex_enhanced_memory_store_421",
      "type": "complexity",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/agency_memory/enhanced_memory_store.py",
      "line_range": [
        421,
        455
      ],
      "description": "High complexity in 'export_for_learning' (score: 11)",
      "suggested_fix": "Refactor to reduce cyclomatic complexity",
      "impact_score": 0.7,
      "confidence": 0.8,
      "metadata": {
        "function": "export_for_learning",
        "complexity": 11
      }
    },
    {
      "id": "const_dict_enhanced_memory_store_33",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/agency_memory/enhanced_memory_store.py",
      "line_range": [
        33,
        34
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 33
      }
    },
    {
      "id": "const_dict_enhanced_memory_store_340",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/agency_memory/enhanced_memory_store.py",
      "line_range": [
        340,
        341
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 340
      }
    },
    {
      "id": "const_dict_enhanced_memory_store_346",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/agency_memory/enhanced_memory_store.py",
      "line_range": [
        346,
        347
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 346
      }
    },
    {
      "id": "const_dict_enhanced_memory_store_352",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/agency_memory/enhanced_memory_store.py",
      "line_range": [
        352,
        353
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 352
      }
    },
    {
      "id": "const_dict_enhanced_memory_store_384",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/agency_memory/enhanced_memory_store.py",
      "line_range": [
        384,
        385
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 384
      }
    },
    {
      "id": "const_dict_enhanced_memory_store_392",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/agency_memory/enhanced_memory_store.py",
      "line_range": [
        392,
        393
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 392
      }
    },
    {
      "id": "const_dict_enhanced_memory_store_421",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/agency_memory/enhanced_memory_store.py",
      "line_range": [
        421,
        422
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 421
      }
    },
    {
      "id": "long_learning_13",
      "type": "readability",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/agency_memory/learning.py",
      "line_range": [
        13,
        121
      ],
      "description": "Function 'consolidate_learnings' is 108 lines (limit: 50)",
      "suggested_fix": "Break down into smaller, focused functions",
      "impact_score": 0.7,
      "confidence": 1.0,
      "metadata": {
        "function": "consolidate_learnings",
        "length": 108
      }
    },
    {
      "id": "long_learning_159",
      "type": "readability",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/agency_memory/learning.py",
      "line_range": [
        159,
        221
      ],
      "description": "Function '_generate_insights' is 62 lines (limit: 50)",
      "suggested_fix": "Break down into smaller, focused functions",
      "impact_score": 0.7,
      "confidence": 1.0,
      "metadata": {
        "function": "_generate_insights",
        "length": 62
      }
    },
    {
      "id": "notest_learning",
      "type": "testing",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/agency_memory/learning.py",
      "line_range": null,
      "description": "No test file found for learning.py (2 functions)",
      "suggested_fix": "Create tests/test_learning.py with comprehensive test coverage",
      "impact_score": 0.8,
      "confidence": 1.0,
      "metadata": {
        "functions": 2
      }
    },
    {
      "id": "nodoc_learning_221",
      "type": "documentation",
      "severity": "low",
      "file_path": "/Users/am/Code/Agency/agency_memory/learning.py",
      "line_range": [
        221,
        222
      ],
      "description": "Missing docstring for function 'generate_learning_report'",
      "suggested_fix": "Add comprehensive docstring explaining purpose, parameters, and return value",
      "impact_score": 0.4,
      "confidence": 1.0,
      "metadata": {
        "item": "generate_learning_report",
        "type": "function"
      }
    },
    {
      "id": "complex_learning_13",
      "type": "complexity",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/agency_memory/learning.py",
      "line_range": [
        13,
        121
      ],
      "description": "High complexity in 'consolidate_learnings' (score: 13)",
      "suggested_fix": "Refactor to reduce cyclomatic complexity",
      "impact_score": 0.7,
      "confidence": 0.8,
      "metadata": {
        "function": "consolidate_learnings",
        "complexity": 13
      }
    },
    {
      "id": "complex_learning_121",
      "type": "complexity",
      "severity": "medium",
      "file_path": "/Users/am/Code/Agency/agency_memory/learning.py",
      "line_range": [
        121,
        159
      ],
      "description": "High complexity in '_categorize_content' (score: 14)",
      "suggested_fix": "Refactor to reduce cyclomatic complexity",
      "impact_score": 0.7,
      "confidence": 0.8,
      "metadata": {
        "function": "_categorize_content",
        "complexity": 14
      }
    },
    {
      "id": "complex_learning_159",
      "type": "complexity",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/agency_memory/learning.py",
      "line_range": [
        159,
        221
      ],
      "description": "High complexity in '_generate_insights' (score: 16)",
      "suggested_fix": "Refactor to reduce cyclomatic complexity",
      "impact_score": 0.7,
      "confidence": 0.8,
      "metadata": {
        "function": "_generate_insights",
        "complexity": 16
      }
    },
    {
      "id": "const_dict_learning_13",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/agency_memory/learning.py",
      "line_range": [
        13,
        14
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 13
      }
    },
    {
      "id": "const_dict_learning_163",
      "type": "constitutional",
      "severity": "high",
      "file_path": "/Users/am/Code/Agency/agency_memory/learning.py",
      "line_range": [
        163,
        164
      ],
      "description": "Constitutional violation: Using Dict instead of Pydantic model",
      "suggested_fix": "Use concrete Pydantic model with typed fields",
      "impact_score": 0.9,
      "confidence": 1.0,
      "metadata": {
        "article": "Strict Typing",
        "line": 163
      }
    }
  ],
  "patterns_detected": [
    "missing_tests",
    "missing_docs",
    "constitutional",
    "long_functions",
    "complexity",
    "error_handling",
    "architecture",
    "performance",
    "memory_leaks",
    "duplicate_code"
  ],
  "health_score": 0.192,
  "recommendations": [
    "\ud83d\udea8 CRITICAL: Fix constitutional violations immediately to maintain system integrity",
    "\ud83d\udcdd HIGH: Improve test coverage - multiple modules lack tests",
    "\ud83d\udd27 MEDIUM: Refactor complex functions to improve maintainability",
    "\ud83d\udcda LOW: Add missing documentation to improve code understanding",
    "\u26a1 MEDIUM: Address performance bottlenecks for better efficiency",
    "\u267b\ufe0f  Extract common functionality to shared utilities",
    "\u2702\ufe0f  Break down long functions following single-responsibility principle",
    "\ud83d\udcbe Review resource management and use context managers"
  ],
  "metrics": {
    "avg_opportunities_per_file": 7.424778761061947,
    "critical_issues": 1,
    "high_priority_issues": 380,
    "test_coverage_estimate": 0.6,
    "documentation_coverage": 0.78
  }
}